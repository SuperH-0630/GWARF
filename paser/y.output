终端机在文法中未使用

    INDENTA


状态 50冲突：4 项偏移/归约
状态 61冲突：1 项偏移/归约
状态 68冲突：1 项偏移/归约
状态 74冲突：1 项偏移/归约
状态 115冲突：1 项偏移/归约
状态 128冲突：1 项偏移/归约
状态 142冲突：1 项偏移/归约
状态 143冲突：1 项偏移/归约
状态 285冲突：1 项偏移/归约
状态 286冲突：1 项偏移/归约
状态 345冲突：1 项偏移/归约


语法

    0 $accept: command_block $end

    1 command_block: command_list

    2 command_list: command
    3             | command_list command

    4 command: top_exp stop_token
    5        | while_block stop_token
    6        | if_block stop_token
    7        | break_exp stop_token
    8        | broken_exp stop_token
    9        | continue_exp stop_token
   10        | continued_exp stop_token
   11        | restart_exp stop_token
   12        | restarted_exp stop_token
   13        | REGO stop_token
   14        | REWENT stop_token
   15        | default_token stop_token
   16        | global_token stop_token
   17        | for_block stop_token
   18        | nonlocal_token stop_token
   19        | block_block stop_token
   20        | def_block stop_token
   21        | return_exp stop_token
   22        | class_block stop_token
   23        | try_block stop_token
   24        | raise_exp stop_token
   25        | import_exp stop_token
   26        | include_exp stop_token
   27        | do_while_block stop_token
   28        | pack_eq_exp stop_token

   29 pack_eq_exp: formal_parameter EQ formal_parameter

   30 top_exp: eq_number

   31 eq_number: call_number
   32          | call_number EQ eq_number
   33          | call_number AADD eq_number
   34          | call_number ASUB eq_number
   35          | call_number AMUL eq_number
   36          | call_number ADIV eq_number
   37          | call_number AMOD eq_number
   38          | call_number AINTDIV eq_number
   39          | call_number APOW eq_number
   40          | call_number FADD
   41          | FADD call_number
   42          | call_number FSUB
   43          | FSUB call_number

   44 formal_parameter: top_exp
   45                 | MUL top_exp
   46                 | POW top_exp
   47                 | top_exp COLON top_exp
   48                 | formal_parameter COMMA top_exp
   49                 | formal_parameter COMMA MUL top_exp
   50                 | formal_parameter COMMA POW top_exp
   51                 | formal_parameter COMMA top_exp COLON top_exp

   52 slice_arguments: slice_arguments_token
   53                | slice_arguments slice_arguments_token
   54                | slice_arguments top_exp

   55 slice_arguments_token: top_exp COLON

   56 call_number: lambda_exp
   57            | call_number LB RB
   58            | call_number LB formal_parameter RB

   59 lambda_exp: chose_exp
   60           | LB RB LAMBDA chose_exp
   61           | LB formal_parameter RB LAMBDA chose_exp

   62 chose_exp: bool_or
   63          | chose_exp IF chose_exp ELSE chose_exp

   64 bool_or: bool_and
   65        | bool_or OR bool_and

   66 bool_and: bool_not
   67         | bool_and AND bool_not

   68 bool_not: third_number
   69         | NOT third_number

   70 third_number: bit_or_not
   71             | third_number EQUAL bit_or_not
   72             | third_number MORE bit_or_not
   73             | third_number LESS bit_or_not
   74             | third_number MOREEQ bit_or_not
   75             | third_number LESSEQ bit_or_not
   76             | third_number NOTEQ bit_or_not

   77 bit_or_not: bit_or
   78           | bit_or_not BITNOTOR bit_or

   79 bit_or: bit_and
   80       | bit_or BITOR bit_and

   81 bit_and: bit_move
   82        | bit_and BITAND bit_move

   83 bit_move: second_number
   84         | bit_move BITRIGHT second_number
   85         | bit_move BITLEFT second_number

   86 second_number: first_number
   87              | second_number ADD first_number
   88              | second_number SUB first_number

   89 first_number: negative
   90             | first_number MUL negative
   91             | first_number DIV negative
   92             | first_number MOD negative
   93             | first_number INTDIV negative

   94 negative: bit_not
   95         | SUB bit_not

   96 bit_not: zero_number
   97        | BITNOT zero_number

   98 zero_number: attribute
   99            | zero_number POW attribute
  100            | zero_number LOG attribute
  101            | zero_number SQRT attribute

  102 attribute: call_down
  103          | attribute POINT call_down

  104 call_down: call_slice
  105          | call_slice LI top_exp RI

  106 call_slice: iter_value
  107           | call_slice LI slice_arguments RI

  108 iter_value: element
  109           | LI RI
  110           | LI formal_parameter RI
  111           | LP RP
  112           | LP formal_parameter RP

  113 element: base_value
  114        | base_var_
  115        | LB top_exp RB

  116 base_value: NUMBER
  117           | INT
  118           | base_string
  119           | TRUE
  120           | FALSE
  121           | NULL_token

  122 base_var_: base_var_token
  123          | LI top_exp RI base_var_token

  124 base_var_token: VAR

  125 base_string: STRING
  126            | base_string STRING

  127 nonlocal_token: NONLOCAL base_var_token

  128 global_token: GLOBAL base_var_token

  129 default_token: DEFAULT base_var_token element

  130 return_exp: return_token
  131           | return_token top_exp
  132           | return_token top_exp element

  133 return_token: RETURN

  134 restarted_exp: restarted_token
  135              | restarted_token element

  136 restarted_token: RESTARTED

  137 restart_exp: restart_token
  138            | restart_token element

  139 restart_token: RESTART

  140 continued_exp: continued_token
  141              | continued_token element

  142 continued_token: CONTINUED

  143 continue_exp: continue_token
  144             | continue_token element

  145 continue_token: CONTINUE

  146 break_exp: break_token
  147          | break_token element

  148 break_token: BREAK

  149 broken_exp: broken_token
  150           | broken_token element

  151 broken_token: BROKEN

  152 if_block: if_exp block
  153         | if_block elif_exp block

  154 elif_exp: ELIF LB top_exp RB
  155         | ELSE

  156 if_exp: IF LB top_exp RB

  157 block_block: block_exp block

  158 block_exp: BLOCK

  159 for_block: for_exp block

  160 for_exp: FOR LB COMMA COMMA RB
  161        | FOR LB top_exp COMMA COMMA RB
  162        | FOR LB COMMA top_exp COMMA RB
  163        | FOR LB COMMA COMMA top_exp RB
  164        | FOR LB top_exp COMMA COMMA top_exp RB
  165        | FOR LB top_exp COMMA top_exp COMMA RB
  166        | FOR LB COMMA top_exp COMMA top_exp RB
  167        | FOR LB top_exp COMMA top_exp COMMA top_exp RB
  168        | FOR LB element IN top_exp RB

  169 include_exp: INCLUDE top_exp

  170 import_exp: IMPORT top_exp AS element

  171 raise_exp: RAISE top_exp top_exp
  172          | THROW top_exp
  173          | ASSERT top_exp top_exp

  174 try_block: try_exp block

  175 try_exp: try_token block EXCEPT AS element

  176 try_token: TRY

  177 do_while_block: DO block while_exp
  178               | DO block stop_token while_exp

  179 while_block: while_exp block

  180 while_exp: WHILE LB top_exp RB

  181 class_block: class_exp block

  182 class_exp: CLASS element LB RB
  183          | CLASS element LB formal_parameter RB

  184 def_block: def_exp block

  185 def_exp: DEF element LB RB
  186        | DEF element LB formal_parameter RB

  187 block: LP command_list RP
  188      | LP block RP
  189      | LP PASS RP

  190 stop_token: STOPN
  191           | STOPF
  192           | stop_token STOPF
  193           | stop_token STOPN


终结语词，附有它们出现处的规则

    $end (0) 0
    error (256)
    NUMBER <double_value> (258) 116
    INT <double_value> (259) 117
    STRING <string_value> (260) 125 126
    VAR <string_value> (261) 124
    ADD (262) 87
    SUB (263) 88 95
    DIV (264) 91
    MUL (265) 45 49 90
    EQ (266) 29 32
    LESS (267) 73
    MORE (268) 72
    RB (269) 57 58 60 61 115 154 156 160 161 162 163 164 165 166 167 168 180 182 183 185 186
    LB (270) 57 58 60 61 115 154 156 160 161 162 163 164 165 166 167 168 180 182 183 185 186
    RP (271) 111 112 187 188 189
    LP (272) 111 112 187 188 189
    WHILE (273) 180
    POW (274) 46 50 99
    LOG (275) 100
    SQRT (276) 101
    EQUAL (277) 71
    MOREEQ (278) 74
    LESSEQ (279) 75
    NOTEQ (280) 76
    BREAK (281) 148
    IF (282) 63 156
    ELSE (283) 63 155
    ELIF (284) 154
    BROKEN (285) 151
    CONTINUE (286) 145
    CONTINUED (287) 142
    RESTART (288) 139
    RESTARTED (289) 136
    REGO (290) 13
    REWENT (291) 14
    RI (292) 105 107 109 110 123
    LI (293) 105 107 109 110 123
    DEFAULT (294) 129
    FOR (295) 160 161 162 163 164 165 166 167 168
    COMMA (296) 48 49 50 51 160 161 162 163 164 165 166 167
    GLOBAL (297) 128
    NONLOCAL (298) 127
    INDENTA (299)
    STOPN (300) 190 193
    STOPF (301) 191 192
    BLOCK (302) 158
    FALSE (303) 120
    TRUE (304) 119
    NULL_token (305) 121
    DEF (306) 185 186
    RETURN (307) 133
    CLASS (308) 182 183
    POINT (309) 103
    COLON (310) 47 51 55
    TRY (311) 176
    EXCEPT (312) 175
    AS (313) 170 175
    RAISE (314) 171
    THROW (315) 172
    IMPORT (316) 170
    INCLUDE (317) 169
    IN (318) 168
    AND (319) 67
    OR (320) 65
    NOT (321) 69
    MOD (322) 92
    INTDIV (323) 93
    AADD (324) 33
    ASUB (325) 34
    AMUL (326) 35
    ADIV (327) 36
    AMOD (328) 37
    AINTDIV (329) 38
    FADD (330) 40 41
    FSUB (331) 42 43
    APOW (332) 39
    BITAND (333) 82
    BITOR (334) 80
    BITNOT (335) 97
    BITNOTOR (336) 78
    BITRIGHT (337) 84
    BITLEFT (338) 85
    PASS (339) 189
    DO (340) 177 178
    LAMBDA (341) 60 61
    ASSERT (342) 173


非终结语词，附有它们出现处的规则

    $accept (88)
        on left: 0
    command_block (89)
        on left: 1
        on right: 0
    command_list (90)
        on left: 2 3
        on right: 1 3 187
    command <statement_value> (91)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
        on right: 2 3
    pack_eq_exp <statement_value> (92)
        on left: 29
        on right: 28
    top_exp <statement_value> (93)
        on left: 30
        on right: 4 44 45 46 47 48 49 50 51 54 55 105 115 123 131 132 154 156 161 162 163 164 165 166 167 168 169 170 171 172 173 180
    eq_number <statement_value> (94)
        on left: 31 32 33 34 35 36 37 38 39 40 41 42 43
        on right: 30 32 33 34 35 36 37 38 39
    formal_parameter <parameter_list> (95)
        on left: 44 45 46 47 48 49 50 51
        on right: 29 48 49 50 51 58 61 110 112 183 186
    slice_arguments <parameter_list> (96)
        on left: 52 53 54
        on right: 53 54 107
    slice_arguments_token <statement_value> (97)
        on left: 55
        on right: 52 53
    call_number <statement_value> (98)
        on left: 56 57 58
        on right: 31 32 33 34 35 36 37 38 39 40 41 42 43 57 58
    lambda_exp <statement_value> (99)
        on left: 59 60 61
        on right: 56
    chose_exp <statement_value> (100)
        on left: 62 63
        on right: 59 60 61 63
    bool_or <statement_value> (101)
        on left: 64 65
        on right: 62 65
    bool_and <statement_value> (102)
        on left: 66 67
        on right: 64 65 67
    bool_not <statement_value> (103)
        on left: 68 69
        on right: 66 67
    third_number <statement_value> (104)
        on left: 70 71 72 73 74 75 76
        on right: 68 69 71 72 73 74 75 76
    bit_or_not <statement_value> (105)
        on left: 77 78
        on right: 70 71 72 73 74 75 76 78
    bit_or <statement_value> (106)
        on left: 79 80
        on right: 77 78 80
    bit_and <statement_value> (107)
        on left: 81 82
        on right: 79 80 82
    bit_move <statement_value> (108)
        on left: 83 84 85
        on right: 81 82 84 85
    second_number <statement_value> (109)
        on left: 86 87 88
        on right: 83 84 85 87 88
    first_number <statement_value> (110)
        on left: 89 90 91 92 93
        on right: 86 87 88 90 91 92 93
    negative <statement_value> (111)
        on left: 94 95
        on right: 89 90 91 92 93
    bit_not <statement_value> (112)
        on left: 96 97
        on right: 94 95
    zero_number <statement_value> (113)
        on left: 98 99 100 101
        on right: 96 97 99 100 101
    attribute <statement_value> (114)
        on left: 102 103
        on right: 98 99 100 101 103
    call_down <statement_value> (115)
        on left: 104 105
        on right: 102 103
    call_slice <statement_value> (116)
        on left: 106 107
        on right: 104 105 107
    iter_value <statement_value> (117)
        on left: 108 109 110 111 112
        on right: 106
    element <statement_value> (118)
        on left: 113 114 115
        on right: 108 129 132 135 138 141 144 147 150 168 170 175 182 183 185 186
    base_value <statement_value> (119)
        on left: 116 117 118 119 120 121
        on right: 113
    base_var_ <statement_value> (120)
        on left: 122 123
        on right: 114
    base_var_token <statement_value> (121)
        on left: 124
        on right: 122 123 127 128 129
    base_string <string_value> (122)
        on left: 125 126
        on right: 118 126
    nonlocal_token <statement_value> (123)
        on left: 127
        on right: 18
    global_token <statement_value> (124)
        on left: 128
        on right: 16
    default_token <statement_value> (125)
        on left: 129
        on right: 15
    return_exp <statement_value> (126)
        on left: 130 131 132
        on right: 21
    return_token <statement_value> (127)
        on left: 133
        on right: 130 131 132
    restarted_exp <statement_value> (128)
        on left: 134 135
        on right: 12
    restarted_token <statement_value> (129)
        on left: 136
        on right: 134 135
    restart_exp <statement_value> (130)
        on left: 137 138
        on right: 11
    restart_token <statement_value> (131)
        on left: 139
        on right: 137 138
    continued_exp <statement_value> (132)
        on left: 140 141
        on right: 10
    continued_token <statement_value> (133)
        on left: 142
        on right: 140 141
    continue_exp <statement_value> (134)
        on left: 143 144
        on right: 9
    continue_token <statement_value> (135)
        on left: 145
        on right: 143 144
    break_exp <statement_value> (136)
        on left: 146 147
        on right: 7
    break_token <statement_value> (137)
        on left: 148
        on right: 146 147
    broken_exp <statement_value> (138)
        on left: 149 150
        on right: 8
    broken_token <statement_value> (139)
        on left: 151
        on right: 149 150
    if_block <statement_value> (140)
        on left: 152 153
        on right: 6 153
    elif_exp <if_list_base> (141)
        on left: 154 155
        on right: 153
    if_exp <statement_value> (142)
        on left: 156
        on right: 152
    block_block <statement_value> (143)
        on left: 157
        on right: 19
    block_exp <statement_value> (144)
        on left: 158
        on right: 157
    for_block <statement_value> (145)
        on left: 159
        on right: 17
    for_exp <statement_value> (146)
        on left: 160 161 162 163 164 165 166 167 168
        on right: 159
    include_exp <statement_value> (147)
        on left: 169
        on right: 26
    import_exp <statement_value> (148)
        on left: 170
        on right: 25
    raise_exp <statement_value> (149)
        on left: 171 172 173
        on right: 24
    try_block <statement_value> (150)
        on left: 174
        on right: 23
    try_exp <statement_value> (151)
        on left: 175
        on right: 174
    try_token <statement_value> (152)
        on left: 176
        on right: 175
    do_while_block <statement_value> (153)
        on left: 177 178
        on right: 27
    while_block <statement_value> (154)
        on left: 179
        on right: 5
    while_exp <statement_value> (155)
        on left: 180
        on right: 177 178 179
    class_block <statement_value> (156)
        on left: 181
        on right: 22
    class_exp <statement_value> (157)
        on left: 182 183
        on right: 181
    def_block <statement_value> (158)
        on left: 184
        on right: 20
    def_exp <statement_value> (159)
        on left: 185 186
        on right: 184
    block (160)
        on left: 187 188 189
        on right: 152 153 157 159 174 175 177 178 179 181 184 188
    stop_token (161)
        on left: 190 191 192 193
        on right: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 178 192 193


状态 0

    0 $accept: . command_block $end

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    WHILE       偏移，并进入状态 9
    POW         偏移，并进入状态 10
    BREAK       偏移，并进入状态 11
    IF          偏移，并进入状态 12
    BROKEN      偏移，并进入状态 13
    CONTINUE    偏移，并进入状态 14
    CONTINUED   偏移，并进入状态 15
    RESTART     偏移，并进入状态 16
    RESTARTED   偏移，并进入状态 17
    REGO        偏移，并进入状态 18
    REWENT      偏移，并进入状态 19
    LI          偏移，并进入状态 20
    DEFAULT     偏移，并进入状态 21
    FOR         偏移，并进入状态 22
    GLOBAL      偏移，并进入状态 23
    NONLOCAL    偏移，并进入状态 24
    BLOCK       偏移，并进入状态 25
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    DEF         偏移，并进入状态 29
    RETURN      偏移，并进入状态 30
    CLASS       偏移，并进入状态 31
    TRY         偏移，并进入状态 32
    RAISE       偏移，并进入状态 33
    THROW       偏移，并进入状态 34
    IMPORT      偏移，并进入状态 35
    INCLUDE     偏移，并进入状态 36
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40
    DO          偏移，并进入状态 41
    ASSERT      偏移，并进入状态 42

    command_block     转到状态 43
    command_list      转到状态 44
    command           转到状态 45
    pack_eq_exp       转到状态 46
    top_exp           转到状态 47
    eq_number         转到状态 48
    formal_parameter  转到状态 49
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74
    nonlocal_token    转到状态 75
    global_token      转到状态 76
    default_token     转到状态 77
    return_exp        转到状态 78
    return_token      转到状态 79
    restarted_exp     转到状态 80
    restarted_token   转到状态 81
    restart_exp       转到状态 82
    restart_token     转到状态 83
    continued_exp     转到状态 84
    continued_token   转到状态 85
    continue_exp      转到状态 86
    continue_token    转到状态 87
    break_exp         转到状态 88
    break_token       转到状态 89
    broken_exp        转到状态 90
    broken_token      转到状态 91
    if_block          转到状态 92
    if_exp            转到状态 93
    block_block       转到状态 94
    block_exp         转到状态 95
    for_block         转到状态 96
    for_exp           转到状态 97
    include_exp       转到状态 98
    import_exp        转到状态 99
    raise_exp         转到状态 100
    try_block         转到状态 101
    try_exp           转到状态 102
    try_token         转到状态 103
    do_while_block    转到状态 104
    while_block       转到状态 105
    while_exp         转到状态 106
    class_block       转到状态 107
    class_exp         转到状态 108
    def_block         转到状态 109
    def_exp           转到状态 110


状态 1

  116 base_value: NUMBER .

    $default  使用规则 116 以归约 (base_value)


状态 2

  117 base_value: INT .

    $default  使用规则 117 以归约 (base_value)


状态 3

  125 base_string: STRING .

    $default  使用规则 125 以归约 (base_string)


状态 4

  124 base_var_token: VAR .

    $default  使用规则 124 以归约 (base_var_token)


状态 5

   95 negative: SUB . bit_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    bit_not         转到状态 112
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 6

   45 formal_parameter: MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 113
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 7

   60 lambda_exp: LB . RB LAMBDA chose_exp
   61           | LB . formal_parameter RB LAMBDA chose_exp
  115 element: LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    RB          偏移，并进入状态 114
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    POW         偏移，并进入状态 10
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp           转到状态 115
    eq_number         转到状态 48
    formal_parameter  转到状态 116
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74


状态 8

  111 iter_value: LP . RP
  112           | LP . formal_parameter RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    LB          偏移，并进入状态 7
    RP          偏移，并进入状态 117
    LP          偏移，并进入状态 8
    POW         偏移，并进入状态 10
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp           转到状态 118
    eq_number         转到状态 48
    formal_parameter  转到状态 119
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74


状态 9

  180 while_exp: WHILE . LB top_exp RB

    LB  偏移，并进入状态 120


状态 10

   46 formal_parameter: POW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 121
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 11

  148 break_token: BREAK .

    $default  使用规则 148 以归约 (break_token)


状态 12

  156 if_exp: IF . LB top_exp RB

    LB  偏移，并进入状态 122


状态 13

  151 broken_token: BROKEN .

    $default  使用规则 151 以归约 (broken_token)


状态 14

  145 continue_token: CONTINUE .

    $default  使用规则 145 以归约 (continue_token)


状态 15

  142 continued_token: CONTINUED .

    $default  使用规则 142 以归约 (continued_token)


状态 16

  139 restart_token: RESTART .

    $default  使用规则 139 以归约 (restart_token)


状态 17

  136 restarted_token: RESTARTED .

    $default  使用规则 136 以归约 (restarted_token)


状态 18

   13 command: REGO . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 125


状态 19

   14 command: REWENT . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 126


状态 20

  109 iter_value: LI . RI
  110           | LI . formal_parameter RI
  123 base_var_: LI . top_exp RI base_var_token

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    POW         偏移，并进入状态 10
    RI          偏移，并进入状态 127
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp           转到状态 128
    eq_number         转到状态 48
    formal_parameter  转到状态 129
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74


状态 21

  129 default_token: DEFAULT . base_var_token element

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 130


状态 22

  160 for_exp: FOR . LB COMMA COMMA RB
  161        | FOR . LB top_exp COMMA COMMA RB
  162        | FOR . LB COMMA top_exp COMMA RB
  163        | FOR . LB COMMA COMMA top_exp RB
  164        | FOR . LB top_exp COMMA COMMA top_exp RB
  165        | FOR . LB top_exp COMMA top_exp COMMA RB
  166        | FOR . LB COMMA top_exp COMMA top_exp RB
  167        | FOR . LB top_exp COMMA top_exp COMMA top_exp RB
  168        | FOR . LB element IN top_exp RB

    LB  偏移，并进入状态 131


状态 23

  128 global_token: GLOBAL . base_var_token

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 132


状态 24

  127 nonlocal_token: NONLOCAL . base_var_token

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 133


状态 25

  158 block_exp: BLOCK .

    $default  使用规则 158 以归约 (block_exp)


状态 26

  120 base_value: FALSE .

    $default  使用规则 120 以归约 (base_value)


状态 27

  119 base_value: TRUE .

    $default  使用规则 119 以归约 (base_value)


状态 28

  121 base_value: NULL_token .

    $default  使用规则 121 以归约 (base_value)


状态 29

  185 def_exp: DEF . element LB RB
  186        | DEF . element LB formal_parameter RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    element         转到状态 135
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 30

  133 return_token: RETURN .

    $default  使用规则 133 以归约 (return_token)


状态 31

  182 class_exp: CLASS . element LB RB
  183          | CLASS . element LB formal_parameter RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    element         转到状态 136
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 32

  176 try_token: TRY .

    $default  使用规则 176 以归约 (try_token)


状态 33

  171 raise_exp: RAISE . top_exp top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 137
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 34

  172 raise_exp: THROW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 138
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 35

  170 import_exp: IMPORT . top_exp AS element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 139
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 36

  169 include_exp: INCLUDE . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 140
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 37

   69 bool_not: NOT . third_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    third_number    转到状态 141
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 38

   41 eq_number: FADD . call_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    BITNOT      偏移，并进入状态 40

    call_number     转到状态 142
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 39

   43 eq_number: FSUB . call_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    BITNOT      偏移，并进入状态 40

    call_number     转到状态 143
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 40

   97 bit_not: BITNOT . zero_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    zero_number     转到状态 144
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 41

  177 do_while_block: DO . block while_exp
  178               | DO . block stop_token while_exp

    LP  偏移，并进入状态 145

    block  转到状态 146


状态 42

  173 raise_exp: ASSERT . top_exp top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 147
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 43

    0 $accept: command_block . $end

    $end  偏移，并进入状态 148


状态 44

    1 command_block: command_list .
    3 command_list: command_list . command

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    WHILE       偏移，并进入状态 9
    POW         偏移，并进入状态 10
    BREAK       偏移，并进入状态 11
    IF          偏移，并进入状态 12
    BROKEN      偏移，并进入状态 13
    CONTINUE    偏移，并进入状态 14
    CONTINUED   偏移，并进入状态 15
    RESTART     偏移，并进入状态 16
    RESTARTED   偏移，并进入状态 17
    REGO        偏移，并进入状态 18
    REWENT      偏移，并进入状态 19
    LI          偏移，并进入状态 20
    DEFAULT     偏移，并进入状态 21
    FOR         偏移，并进入状态 22
    GLOBAL      偏移，并进入状态 23
    NONLOCAL    偏移，并进入状态 24
    BLOCK       偏移，并进入状态 25
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    DEF         偏移，并进入状态 29
    RETURN      偏移，并进入状态 30
    CLASS       偏移，并进入状态 31
    TRY         偏移，并进入状态 32
    RAISE       偏移，并进入状态 33
    THROW       偏移，并进入状态 34
    IMPORT      偏移，并进入状态 35
    INCLUDE     偏移，并进入状态 36
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40
    DO          偏移，并进入状态 41
    ASSERT      偏移，并进入状态 42

    $default  使用规则 1 以归约 (command_block)

    command           转到状态 149
    pack_eq_exp       转到状态 46
    top_exp           转到状态 47
    eq_number         转到状态 48
    formal_parameter  转到状态 49
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74
    nonlocal_token    转到状态 75
    global_token      转到状态 76
    default_token     转到状态 77
    return_exp        转到状态 78
    return_token      转到状态 79
    restarted_exp     转到状态 80
    restarted_token   转到状态 81
    restart_exp       转到状态 82
    restart_token     转到状态 83
    continued_exp     转到状态 84
    continued_token   转到状态 85
    continue_exp      转到状态 86
    continue_token    转到状态 87
    break_exp         转到状态 88
    break_token       转到状态 89
    broken_exp        转到状态 90
    broken_token      转到状态 91
    if_block          转到状态 92
    if_exp            转到状态 93
    block_block       转到状态 94
    block_exp         转到状态 95
    for_block         转到状态 96
    for_exp           转到状态 97
    include_exp       转到状态 98
    import_exp        转到状态 99
    raise_exp         转到状态 100
    try_block         转到状态 101
    try_exp           转到状态 102
    try_token         转到状态 103
    do_while_block    转到状态 104
    while_block       转到状态 105
    while_exp         转到状态 106
    class_block       转到状态 107
    class_exp         转到状态 108
    def_block         转到状态 109
    def_exp           转到状态 110


状态 45

    2 command_list: command .

    $default  使用规则 2 以归约 (command_list)


状态 46

   28 command: pack_eq_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 150


状态 47

    4 command: top_exp . stop_token
   44 formal_parameter: top_exp .
   47                 | top_exp . COLON top_exp

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124
    COLON  偏移，并进入状态 151

    $default  使用规则 44 以归约 (formal_parameter)

    stop_token  转到状态 152


状态 48

   30 top_exp: eq_number .

    $default  使用规则 30 以归约 (top_exp)


状态 49

   29 pack_eq_exp: formal_parameter . EQ formal_parameter
   48 formal_parameter: formal_parameter . COMMA top_exp
   49                 | formal_parameter . COMMA MUL top_exp
   50                 | formal_parameter . COMMA POW top_exp
   51                 | formal_parameter . COMMA top_exp COLON top_exp

    EQ     偏移，并进入状态 153
    COMMA  偏移，并进入状态 154


状态 50

   31 eq_number: call_number .
   32          | call_number . EQ eq_number
   33          | call_number . AADD eq_number
   34          | call_number . ASUB eq_number
   35          | call_number . AMUL eq_number
   36          | call_number . ADIV eq_number
   37          | call_number . AMOD eq_number
   38          | call_number . AINTDIV eq_number
   39          | call_number . APOW eq_number
   40          | call_number . FADD
   42          | call_number . FSUB
   57 call_number: call_number . LB RB
   58            | call_number . LB formal_parameter RB

    EQ       偏移，并进入状态 155
    LB       偏移，并进入状态 156
    AADD     偏移，并进入状态 157
    ASUB     偏移，并进入状态 158
    AMUL     偏移，并进入状态 159
    ADIV     偏移，并进入状态 160
    AMOD     偏移，并进入状态 161
    AINTDIV  偏移，并进入状态 162
    FADD     偏移，并进入状态 163
    FSUB     偏移，并进入状态 164
    APOW     偏移，并进入状态 165

    EQ        [使用规则 31 以归约 (eq_number)]
    LB        [使用规则 31 以归约 (eq_number)]
    FADD      [使用规则 31 以归约 (eq_number)]
    FSUB      [使用规则 31 以归约 (eq_number)]
    $default  使用规则 31 以归约 (eq_number)


状态 51

   56 call_number: lambda_exp .

    $default  使用规则 56 以归约 (call_number)


状态 52

   59 lambda_exp: chose_exp .
   63 chose_exp: chose_exp . IF chose_exp ELSE chose_exp

    IF  偏移，并进入状态 166

    $default  使用规则 59 以归约 (lambda_exp)


状态 53

   62 chose_exp: bool_or .
   65 bool_or: bool_or . OR bool_and

    OR  偏移，并进入状态 167

    $default  使用规则 62 以归约 (chose_exp)


状态 54

   64 bool_or: bool_and .
   67 bool_and: bool_and . AND bool_not

    AND  偏移，并进入状态 168

    $default  使用规则 64 以归约 (bool_or)


状态 55

   66 bool_and: bool_not .

    $default  使用规则 66 以归约 (bool_and)


状态 56

   68 bool_not: third_number .
   71 third_number: third_number . EQUAL bit_or_not
   72             | third_number . MORE bit_or_not
   73             | third_number . LESS bit_or_not
   74             | third_number . MOREEQ bit_or_not
   75             | third_number . LESSEQ bit_or_not
   76             | third_number . NOTEQ bit_or_not

    LESS    偏移，并进入状态 169
    MORE    偏移，并进入状态 170
    EQUAL   偏移，并进入状态 171
    MOREEQ  偏移，并进入状态 172
    LESSEQ  偏移，并进入状态 173
    NOTEQ   偏移，并进入状态 174

    $default  使用规则 68 以归约 (bool_not)


状态 57

   70 third_number: bit_or_not .
   78 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 175

    $default  使用规则 70 以归约 (third_number)


状态 58

   77 bit_or_not: bit_or .
   80 bit_or: bit_or . BITOR bit_and

    BITOR  偏移，并进入状态 176

    $default  使用规则 77 以归约 (bit_or_not)


状态 59

   79 bit_or: bit_and .
   82 bit_and: bit_and . BITAND bit_move

    BITAND  偏移，并进入状态 177

    $default  使用规则 79 以归约 (bit_or)


状态 60

   81 bit_and: bit_move .
   84 bit_move: bit_move . BITRIGHT second_number
   85         | bit_move . BITLEFT second_number

    BITRIGHT  偏移，并进入状态 178
    BITLEFT   偏移，并进入状态 179

    $default  使用规则 81 以归约 (bit_and)


状态 61

   83 bit_move: second_number .
   87 second_number: second_number . ADD first_number
   88              | second_number . SUB first_number

    ADD  偏移，并进入状态 180
    SUB  偏移，并进入状态 181

    SUB       [使用规则 83 以归约 (bit_move)]
    $default  使用规则 83 以归约 (bit_move)


状态 62

   86 second_number: first_number .
   90 first_number: first_number . MUL negative
   91             | first_number . DIV negative
   92             | first_number . MOD negative
   93             | first_number . INTDIV negative

    DIV     偏移，并进入状态 182
    MUL     偏移，并进入状态 183
    MOD     偏移，并进入状态 184
    INTDIV  偏移，并进入状态 185

    $default  使用规则 86 以归约 (second_number)


状态 63

   89 first_number: negative .

    $default  使用规则 89 以归约 (first_number)


状态 64

   94 negative: bit_not .

    $default  使用规则 94 以归约 (negative)


状态 65

   96 bit_not: zero_number .
   99 zero_number: zero_number . POW attribute
  100            | zero_number . LOG attribute
  101            | zero_number . SQRT attribute

    POW   偏移，并进入状态 186
    LOG   偏移，并进入状态 187
    SQRT  偏移，并进入状态 188

    $default  使用规则 96 以归约 (bit_not)


状态 66

   98 zero_number: attribute .
  103 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 189

    $default  使用规则 98 以归约 (zero_number)


状态 67

  102 attribute: call_down .

    $default  使用规则 102 以归约 (attribute)


状态 68

  104 call_down: call_slice .
  105          | call_slice . LI top_exp RI
  107 call_slice: call_slice . LI slice_arguments RI

    LI  偏移，并进入状态 190

    LI        [使用规则 104 以归约 (call_down)]
    $default  使用规则 104 以归约 (call_down)


状态 69

  106 call_slice: iter_value .

    $default  使用规则 106 以归约 (call_slice)


状态 70

  108 iter_value: element .

    $default  使用规则 108 以归约 (iter_value)


状态 71

  113 element: base_value .

    $default  使用规则 113 以归约 (element)


状态 72

  114 element: base_var_ .

    $default  使用规则 114 以归约 (element)


状态 73

  122 base_var_: base_var_token .

    $default  使用规则 122 以归约 (base_var_)


状态 74

  118 base_value: base_string .
  126 base_string: base_string . STRING

    STRING  偏移，并进入状态 191

    STRING    [使用规则 118 以归约 (base_value)]
    $default  使用规则 118 以归约 (base_value)


状态 75

   18 command: nonlocal_token . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 192


状态 76

   16 command: global_token . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 193


状态 77

   15 command: default_token . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 194


状态 78

   21 command: return_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 195


状态 79

  130 return_exp: return_token .
  131           | return_token . top_exp
  132           | return_token . top_exp element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    $default  使用规则 130 以归约 (return_exp)

    top_exp         转到状态 196
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 80

   12 command: restarted_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 197


状态 81

  134 restarted_exp: restarted_token .
  135              | restarted_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    $default  使用规则 134 以归约 (restarted_exp)

    element         转到状态 198
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 82

   11 command: restart_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 199


状态 83

  137 restart_exp: restart_token .
  138            | restart_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    $default  使用规则 137 以归约 (restart_exp)

    element         转到状态 200
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 84

   10 command: continued_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 201


状态 85

  140 continued_exp: continued_token .
  141              | continued_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    $default  使用规则 140 以归约 (continued_exp)

    element         转到状态 202
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 86

    9 command: continue_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 203


状态 87

  143 continue_exp: continue_token .
  144             | continue_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    $default  使用规则 143 以归约 (continue_exp)

    element         转到状态 204
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 88

    7 command: break_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 205


状态 89

  146 break_exp: break_token .
  147          | break_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    $default  使用规则 146 以归约 (break_exp)

    element         转到状态 206
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 90

    8 command: broken_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 207


状态 91

  149 broken_exp: broken_token .
  150           | broken_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    $default  使用规则 149 以归约 (broken_exp)

    element         转到状态 208
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 92

    6 command: if_block . stop_token
  153 if_block: if_block . elif_exp block

    ELSE   偏移，并进入状态 209
    ELIF   偏移，并进入状态 210
    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    elif_exp    转到状态 211
    stop_token  转到状态 212


状态 93

  152 if_block: if_exp . block

    LP  偏移，并进入状态 145

    block  转到状态 213


状态 94

   19 command: block_block . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 214


状态 95

  157 block_block: block_exp . block

    LP  偏移，并进入状态 145

    block  转到状态 215


状态 96

   17 command: for_block . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 216


状态 97

  159 for_block: for_exp . block

    LP  偏移，并进入状态 145

    block  转到状态 217


状态 98

   26 command: include_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 218


状态 99

   25 command: import_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 219


状态 100

   24 command: raise_exp . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 220


状态 101

   23 command: try_block . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 221


状态 102

  174 try_block: try_exp . block

    LP  偏移，并进入状态 145

    block  转到状态 222


状态 103

  175 try_exp: try_token . block EXCEPT AS element

    LP  偏移，并进入状态 145

    block  转到状态 223


状态 104

   27 command: do_while_block . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 224


状态 105

    5 command: while_block . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 225


状态 106

  179 while_block: while_exp . block

    LP  偏移，并进入状态 145

    block  转到状态 226


状态 107

   22 command: class_block . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 227


状态 108

  181 class_block: class_exp . block

    LP  偏移，并进入状态 145

    block  转到状态 228


状态 109

   20 command: def_block . stop_token

    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    stop_token  转到状态 229


状态 110

  184 def_block: def_exp . block

    LP  偏移，并进入状态 145

    block  转到状态 230


状态 111

  115 element: LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 231
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 112

   95 negative: SUB bit_not .

    $default  使用规则 95 以归约 (negative)


状态 113

   45 formal_parameter: MUL top_exp .

    $default  使用规则 45 以归约 (formal_parameter)


状态 114

   60 lambda_exp: LB RB . LAMBDA chose_exp

    LAMBDA  偏移，并进入状态 232


状态 115

   44 formal_parameter: top_exp .
   47                 | top_exp . COLON top_exp
  115 element: LB top_exp . RB

    RB     偏移，并进入状态 233
    COLON  偏移，并进入状态 151

    RB        [使用规则 44 以归约 (formal_parameter)]
    $default  使用规则 44 以归约 (formal_parameter)


状态 116

   48 formal_parameter: formal_parameter . COMMA top_exp
   49                 | formal_parameter . COMMA MUL top_exp
   50                 | formal_parameter . COMMA POW top_exp
   51                 | formal_parameter . COMMA top_exp COLON top_exp
   61 lambda_exp: LB formal_parameter . RB LAMBDA chose_exp

    RB     偏移，并进入状态 234
    COMMA  偏移，并进入状态 154


状态 117

  111 iter_value: LP RP .

    $default  使用规则 111 以归约 (iter_value)


状态 118

   44 formal_parameter: top_exp .
   47                 | top_exp . COLON top_exp

    COLON  偏移，并进入状态 151

    $default  使用规则 44 以归约 (formal_parameter)


状态 119

   48 formal_parameter: formal_parameter . COMMA top_exp
   49                 | formal_parameter . COMMA MUL top_exp
   50                 | formal_parameter . COMMA POW top_exp
   51                 | formal_parameter . COMMA top_exp COLON top_exp
  112 iter_value: LP formal_parameter . RP

    RP     偏移，并进入状态 235
    COMMA  偏移，并进入状态 154


状态 120

  180 while_exp: WHILE LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 236
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 121

   46 formal_parameter: POW top_exp .

    $default  使用规则 46 以归约 (formal_parameter)


状态 122

  156 if_exp: IF LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 237
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 123

  190 stop_token: STOPN .

    $default  使用规则 190 以归约 (stop_token)


状态 124

  191 stop_token: STOPF .

    $default  使用规则 191 以归约 (stop_token)


状态 125

   13 command: REGO stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 13 以归约 (command)


状态 126

   14 command: REWENT stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 14 以归约 (command)


状态 127

  109 iter_value: LI RI .

    $default  使用规则 109 以归约 (iter_value)


状态 128

   44 formal_parameter: top_exp .
   47                 | top_exp . COLON top_exp
  123 base_var_: LI top_exp . RI base_var_token

    RI     偏移，并进入状态 240
    COLON  偏移，并进入状态 151

    RI        [使用规则 44 以归约 (formal_parameter)]
    $default  使用规则 44 以归约 (formal_parameter)


状态 129

   48 formal_parameter: formal_parameter . COMMA top_exp
   49                 | formal_parameter . COMMA MUL top_exp
   50                 | formal_parameter . COMMA POW top_exp
   51                 | formal_parameter . COMMA top_exp COLON top_exp
  110 iter_value: LI formal_parameter . RI

    RI     偏移，并进入状态 241
    COMMA  偏移，并进入状态 154


状态 130

  129 default_token: DEFAULT base_var_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    element         转到状态 242
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 131

  160 for_exp: FOR LB . COMMA COMMA RB
  161        | FOR LB . top_exp COMMA COMMA RB
  162        | FOR LB . COMMA top_exp COMMA RB
  163        | FOR LB . COMMA COMMA top_exp RB
  164        | FOR LB . top_exp COMMA COMMA top_exp RB
  165        | FOR LB . top_exp COMMA top_exp COMMA RB
  166        | FOR LB . COMMA top_exp COMMA top_exp RB
  167        | FOR LB . top_exp COMMA top_exp COMMA top_exp RB
  168        | FOR LB . element IN top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    COMMA       偏移，并进入状态 243
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 244
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 245
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 132

  128 global_token: GLOBAL base_var_token .

    $default  使用规则 128 以归约 (global_token)


状态 133

  127 nonlocal_token: NONLOCAL base_var_token .

    $default  使用规则 127 以归约 (nonlocal_token)


状态 134

  123 base_var_: LI . top_exp RI base_var_token

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 246
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 135

  185 def_exp: DEF element . LB RB
  186        | DEF element . LB formal_parameter RB

    LB  偏移，并进入状态 247


状态 136

  182 class_exp: CLASS element . LB RB
  183          | CLASS element . LB formal_parameter RB

    LB  偏移，并进入状态 248


状态 137

  171 raise_exp: RAISE top_exp . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 249
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 138

  172 raise_exp: THROW top_exp .

    $default  使用规则 172 以归约 (raise_exp)


状态 139

  170 import_exp: IMPORT top_exp . AS element

    AS  偏移，并进入状态 250


状态 140

  169 include_exp: INCLUDE top_exp .

    $default  使用规则 169 以归约 (include_exp)


状态 141

   69 bool_not: NOT third_number .
   71 third_number: third_number . EQUAL bit_or_not
   72             | third_number . MORE bit_or_not
   73             | third_number . LESS bit_or_not
   74             | third_number . MOREEQ bit_or_not
   75             | third_number . LESSEQ bit_or_not
   76             | third_number . NOTEQ bit_or_not

    LESS    偏移，并进入状态 169
    MORE    偏移，并进入状态 170
    EQUAL   偏移，并进入状态 171
    MOREEQ  偏移，并进入状态 172
    LESSEQ  偏移，并进入状态 173
    NOTEQ   偏移，并进入状态 174

    $default  使用规则 69 以归约 (bool_not)


状态 142

   41 eq_number: FADD call_number .
   57 call_number: call_number . LB RB
   58            | call_number . LB formal_parameter RB

    LB  偏移，并进入状态 156

    LB        [使用规则 41 以归约 (eq_number)]
    $default  使用规则 41 以归约 (eq_number)


状态 143

   43 eq_number: FSUB call_number .
   57 call_number: call_number . LB RB
   58            | call_number . LB formal_parameter RB

    LB  偏移，并进入状态 156

    LB        [使用规则 43 以归约 (eq_number)]
    $default  使用规则 43 以归约 (eq_number)


状态 144

   97 bit_not: BITNOT zero_number .
   99 zero_number: zero_number . POW attribute
  100            | zero_number . LOG attribute
  101            | zero_number . SQRT attribute

    POW   偏移，并进入状态 186
    LOG   偏移，并进入状态 187
    SQRT  偏移，并进入状态 188

    $default  使用规则 97 以归约 (bit_not)


状态 145

  187 block: LP . command_list RP
  188      | LP . block RP
  189      | LP . PASS RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 251
    WHILE       偏移，并进入状态 9
    POW         偏移，并进入状态 10
    BREAK       偏移，并进入状态 11
    IF          偏移，并进入状态 12
    BROKEN      偏移，并进入状态 13
    CONTINUE    偏移，并进入状态 14
    CONTINUED   偏移，并进入状态 15
    RESTART     偏移，并进入状态 16
    RESTARTED   偏移，并进入状态 17
    REGO        偏移，并进入状态 18
    REWENT      偏移，并进入状态 19
    LI          偏移，并进入状态 20
    DEFAULT     偏移，并进入状态 21
    FOR         偏移，并进入状态 22
    GLOBAL      偏移，并进入状态 23
    NONLOCAL    偏移，并进入状态 24
    BLOCK       偏移，并进入状态 25
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    DEF         偏移，并进入状态 29
    RETURN      偏移，并进入状态 30
    CLASS       偏移，并进入状态 31
    TRY         偏移，并进入状态 32
    RAISE       偏移，并进入状态 33
    THROW       偏移，并进入状态 34
    IMPORT      偏移，并进入状态 35
    INCLUDE     偏移，并进入状态 36
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40
    PASS        偏移，并进入状态 252
    DO          偏移，并进入状态 41
    ASSERT      偏移，并进入状态 42

    command_list      转到状态 253
    command           转到状态 45
    pack_eq_exp       转到状态 46
    top_exp           转到状态 47
    eq_number         转到状态 48
    formal_parameter  转到状态 49
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74
    nonlocal_token    转到状态 75
    global_token      转到状态 76
    default_token     转到状态 77
    return_exp        转到状态 78
    return_token      转到状态 79
    restarted_exp     转到状态 80
    restarted_token   转到状态 81
    restart_exp       转到状态 82
    restart_token     转到状态 83
    continued_exp     转到状态 84
    continued_token   转到状态 85
    continue_exp      转到状态 86
    continue_token    转到状态 87
    break_exp         转到状态 88
    break_token       转到状态 89
    broken_exp        转到状态 90
    broken_token      转到状态 91
    if_block          转到状态 92
    if_exp            转到状态 93
    block_block       转到状态 94
    block_exp         转到状态 95
    for_block         转到状态 96
    for_exp           转到状态 97
    include_exp       转到状态 98
    import_exp        转到状态 99
    raise_exp         转到状态 100
    try_block         转到状态 101
    try_exp           转到状态 102
    try_token         转到状态 103
    do_while_block    转到状态 104
    while_block       转到状态 105
    while_exp         转到状态 106
    class_block       转到状态 107
    class_exp         转到状态 108
    def_block         转到状态 109
    def_exp           转到状态 110
    block             转到状态 254


状态 146

  177 do_while_block: DO block . while_exp
  178               | DO block . stop_token while_exp

    WHILE  偏移，并进入状态 9
    STOPN  偏移，并进入状态 123
    STOPF  偏移，并进入状态 124

    while_exp   转到状态 255
    stop_token  转到状态 256


状态 147

  173 raise_exp: ASSERT top_exp . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 257
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 148

    0 $accept: command_block $end .

    $default  接受


状态 149

    3 command_list: command_list command .

    $default  使用规则 3 以归约 (command_list)


状态 150

   28 command: pack_eq_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 28 以归约 (command)


状态 151

   47 formal_parameter: top_exp COLON . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 258
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 152

    4 command: top_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 4 以归约 (command)


状态 153

   29 pack_eq_exp: formal_parameter EQ . formal_parameter

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    POW         偏移，并进入状态 10
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp           转到状态 118
    eq_number         转到状态 48
    formal_parameter  转到状态 259
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74


状态 154

   48 formal_parameter: formal_parameter COMMA . top_exp
   49                 | formal_parameter COMMA . MUL top_exp
   50                 | formal_parameter COMMA . POW top_exp
   51                 | formal_parameter COMMA . top_exp COLON top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 260
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    POW         偏移，并进入状态 261
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 262
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 155

   32 eq_number: call_number EQ . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    eq_number       转到状态 263
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 156

   57 call_number: call_number LB . RB
   58            | call_number LB . formal_parameter RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    RB          偏移，并进入状态 264
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    POW         偏移，并进入状态 10
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp           转到状态 118
    eq_number         转到状态 48
    formal_parameter  转到状态 265
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74


状态 157

   33 eq_number: call_number AADD . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    eq_number       转到状态 266
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 158

   34 eq_number: call_number ASUB . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    eq_number       转到状态 267
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 159

   35 eq_number: call_number AMUL . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    eq_number       转到状态 268
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 160

   36 eq_number: call_number ADIV . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    eq_number       转到状态 269
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 161

   37 eq_number: call_number AMOD . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    eq_number       转到状态 270
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 162

   38 eq_number: call_number AINTDIV . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    eq_number       转到状态 271
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 163

   40 eq_number: call_number FADD .

    $default  使用规则 40 以归约 (eq_number)


状态 164

   42 eq_number: call_number FSUB .

    $default  使用规则 42 以归约 (eq_number)


状态 165

   39 eq_number: call_number APOW . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    eq_number       转到状态 272
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 166

   63 chose_exp: chose_exp IF . chose_exp ELSE chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    BITNOT      偏移，并进入状态 40

    chose_exp       转到状态 273
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 167

   65 bool_or: bool_or OR . bool_and

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    BITNOT      偏移，并进入状态 40

    bool_and        转到状态 274
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 168

   67 bool_and: bool_and AND . bool_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    BITNOT      偏移，并进入状态 40

    bool_not        转到状态 275
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 169

   73 third_number: third_number LESS . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    bit_or_not      转到状态 276
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 170

   72 third_number: third_number MORE . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    bit_or_not      转到状态 277
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 171

   71 third_number: third_number EQUAL . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    bit_or_not      转到状态 278
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 172

   74 third_number: third_number MOREEQ . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    bit_or_not      转到状态 279
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 173

   75 third_number: third_number LESSEQ . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    bit_or_not      转到状态 280
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 174

   76 third_number: third_number NOTEQ . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    bit_or_not      转到状态 281
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 175

   78 bit_or_not: bit_or_not BITNOTOR . bit_or

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    bit_or          转到状态 282
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 176

   80 bit_or: bit_or BITOR . bit_and

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    bit_and         转到状态 283
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 177

   82 bit_and: bit_and BITAND . bit_move

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    bit_move        转到状态 284
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 178

   84 bit_move: bit_move BITRIGHT . second_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    second_number   转到状态 285
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 179

   85 bit_move: bit_move BITLEFT . second_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    second_number   转到状态 286
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 180

   87 second_number: second_number ADD . first_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    first_number    转到状态 287
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 181

   88 second_number: second_number SUB . first_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    first_number    转到状态 288
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 182

   91 first_number: first_number DIV . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    negative        转到状态 289
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 183

   90 first_number: first_number MUL . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    negative        转到状态 290
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 184

   92 first_number: first_number MOD . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    negative        转到状态 291
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 185

   93 first_number: first_number INTDIV . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    BITNOT      偏移，并进入状态 40

    negative        转到状态 292
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 186

   99 zero_number: zero_number POW . attribute

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    attribute       转到状态 293
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 187

  100 zero_number: zero_number LOG . attribute

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    attribute       转到状态 294
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 188

  101 zero_number: zero_number SQRT . attribute

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    attribute       转到状态 295
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 189

  103 attribute: attribute POINT . call_down

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    call_down       转到状态 296
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 190

  105 call_down: call_slice LI . top_exp RI
  107 call_slice: call_slice LI . slice_arguments RI

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp                转到状态 297
    eq_number              转到状态 48
    slice_arguments        转到状态 298
    slice_arguments_token  转到状态 299
    call_number            转到状态 50
    lambda_exp             转到状态 51
    chose_exp              转到状态 52
    bool_or                转到状态 53
    bool_and               转到状态 54
    bool_not               转到状态 55
    third_number           转到状态 56
    bit_or_not             转到状态 57
    bit_or                 转到状态 58
    bit_and                转到状态 59
    bit_move               转到状态 60
    second_number          转到状态 61
    first_number           转到状态 62
    negative               转到状态 63
    bit_not                转到状态 64
    zero_number            转到状态 65
    attribute              转到状态 66
    call_down              转到状态 67
    call_slice             转到状态 68
    iter_value             转到状态 69
    element                转到状态 70
    base_value             转到状态 71
    base_var_              转到状态 72
    base_var_token         转到状态 73
    base_string            转到状态 74


状态 191

  126 base_string: base_string STRING .

    $default  使用规则 126 以归约 (base_string)


状态 192

   18 command: nonlocal_token stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 18 以归约 (command)


状态 193

   16 command: global_token stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 16 以归约 (command)


状态 194

   15 command: default_token stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 15 以归约 (command)


状态 195

   21 command: return_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 21 以归约 (command)


状态 196

  131 return_exp: return_token top_exp .
  132           | return_token top_exp . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    $default  使用规则 131 以归约 (return_exp)

    element         转到状态 300
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 197

   12 command: restarted_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 12 以归约 (command)


状态 198

  135 restarted_exp: restarted_token element .

    $default  使用规则 135 以归约 (restarted_exp)


状态 199

   11 command: restart_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 11 以归约 (command)


状态 200

  138 restart_exp: restart_token element .

    $default  使用规则 138 以归约 (restart_exp)


状态 201

   10 command: continued_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 10 以归约 (command)


状态 202

  141 continued_exp: continued_token element .

    $default  使用规则 141 以归约 (continued_exp)


状态 203

    9 command: continue_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 9 以归约 (command)


状态 204

  144 continue_exp: continue_token element .

    $default  使用规则 144 以归约 (continue_exp)


状态 205

    7 command: break_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 7 以归约 (command)


状态 206

  147 break_exp: break_token element .

    $default  使用规则 147 以归约 (break_exp)


状态 207

    8 command: broken_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 8 以归约 (command)


状态 208

  150 broken_exp: broken_token element .

    $default  使用规则 150 以归约 (broken_exp)


状态 209

  155 elif_exp: ELSE .

    $default  使用规则 155 以归约 (elif_exp)


状态 210

  154 elif_exp: ELIF . LB top_exp RB

    LB  偏移，并进入状态 301


状态 211

  153 if_block: if_block elif_exp . block

    LP  偏移，并进入状态 145

    block  转到状态 302


状态 212

    6 command: if_block stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 6 以归约 (command)


状态 213

  152 if_block: if_exp block .

    $default  使用规则 152 以归约 (if_block)


状态 214

   19 command: block_block stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 19 以归约 (command)


状态 215

  157 block_block: block_exp block .

    $default  使用规则 157 以归约 (block_block)


状态 216

   17 command: for_block stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 17 以归约 (command)


状态 217

  159 for_block: for_exp block .

    $default  使用规则 159 以归约 (for_block)


状态 218

   26 command: include_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 26 以归约 (command)


状态 219

   25 command: import_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 25 以归约 (command)


状态 220

   24 command: raise_exp stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 24 以归约 (command)


状态 221

   23 command: try_block stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 23 以归约 (command)


状态 222

  174 try_block: try_exp block .

    $default  使用规则 174 以归约 (try_block)


状态 223

  175 try_exp: try_token block . EXCEPT AS element

    EXCEPT  偏移，并进入状态 303


状态 224

   27 command: do_while_block stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 27 以归约 (command)


状态 225

    5 command: while_block stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 5 以归约 (command)


状态 226

  179 while_block: while_exp block .

    $default  使用规则 179 以归约 (while_block)


状态 227

   22 command: class_block stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 22 以归约 (command)


状态 228

  181 class_block: class_exp block .

    $default  使用规则 181 以归约 (class_block)


状态 229

   20 command: def_block stop_token .
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 20 以归约 (command)


状态 230

  184 def_block: def_exp block .

    $default  使用规则 184 以归约 (def_block)


状态 231

  115 element: LB top_exp . RB

    RB  偏移，并进入状态 233


状态 232

   60 lambda_exp: LB RB LAMBDA . chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    BITNOT      偏移，并进入状态 40

    chose_exp       转到状态 304
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 233

  115 element: LB top_exp RB .

    $default  使用规则 115 以归约 (element)


状态 234

   61 lambda_exp: LB formal_parameter RB . LAMBDA chose_exp

    LAMBDA  偏移，并进入状态 305


状态 235

  112 iter_value: LP formal_parameter RP .

    $default  使用规则 112 以归约 (iter_value)


状态 236

  180 while_exp: WHILE LB top_exp . RB

    RB  偏移，并进入状态 306


状态 237

  156 if_exp: IF LB top_exp . RB

    RB  偏移，并进入状态 307


状态 238

  193 stop_token: stop_token STOPN .

    $default  使用规则 193 以归约 (stop_token)


状态 239

  192 stop_token: stop_token STOPF .

    $default  使用规则 192 以归约 (stop_token)


状态 240

  123 base_var_: LI top_exp RI . base_var_token

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 308


状态 241

  110 iter_value: LI formal_parameter RI .

    $default  使用规则 110 以归约 (iter_value)


状态 242

  129 default_token: DEFAULT base_var_token element .

    $default  使用规则 129 以归约 (default_token)


状态 243

  160 for_exp: FOR LB COMMA . COMMA RB
  162        | FOR LB COMMA . top_exp COMMA RB
  163        | FOR LB COMMA . COMMA top_exp RB
  166        | FOR LB COMMA . top_exp COMMA top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    COMMA       偏移，并进入状态 309
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 310
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 244

  161 for_exp: FOR LB top_exp . COMMA COMMA RB
  164        | FOR LB top_exp . COMMA COMMA top_exp RB
  165        | FOR LB top_exp . COMMA top_exp COMMA RB
  167        | FOR LB top_exp . COMMA top_exp COMMA top_exp RB

    COMMA  偏移，并进入状态 311


状态 245

  108 iter_value: element .
  168 for_exp: FOR LB element . IN top_exp RB

    IN  偏移，并进入状态 312

    $default  使用规则 108 以归约 (iter_value)


状态 246

  123 base_var_: LI top_exp . RI base_var_token

    RI  偏移，并进入状态 240


状态 247

  185 def_exp: DEF element LB . RB
  186        | DEF element LB . formal_parameter RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    RB          偏移，并进入状态 313
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    POW         偏移，并进入状态 10
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp           转到状态 118
    eq_number         转到状态 48
    formal_parameter  转到状态 314
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74


状态 248

  182 class_exp: CLASS element LB . RB
  183          | CLASS element LB . formal_parameter RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    RB          偏移，并进入状态 315
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    POW         偏移，并进入状态 10
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp           转到状态 118
    eq_number         转到状态 48
    formal_parameter  转到状态 316
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74


状态 249

  171 raise_exp: RAISE top_exp top_exp .

    $default  使用规则 171 以归约 (raise_exp)


状态 250

  170 import_exp: IMPORT top_exp AS . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    element         转到状态 317
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 251

  111 iter_value: LP . RP
  112           | LP . formal_parameter RP
  187 block: LP . command_list RP
  188      | LP . block RP
  189      | LP . PASS RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    LB          偏移，并进入状态 7
    RP          偏移，并进入状态 117
    LP          偏移，并进入状态 251
    WHILE       偏移，并进入状态 9
    POW         偏移，并进入状态 10
    BREAK       偏移，并进入状态 11
    IF          偏移，并进入状态 12
    BROKEN      偏移，并进入状态 13
    CONTINUE    偏移，并进入状态 14
    CONTINUED   偏移，并进入状态 15
    RESTART     偏移，并进入状态 16
    RESTARTED   偏移，并进入状态 17
    REGO        偏移，并进入状态 18
    REWENT      偏移，并进入状态 19
    LI          偏移，并进入状态 20
    DEFAULT     偏移，并进入状态 21
    FOR         偏移，并进入状态 22
    GLOBAL      偏移，并进入状态 23
    NONLOCAL    偏移，并进入状态 24
    BLOCK       偏移，并进入状态 25
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    DEF         偏移，并进入状态 29
    RETURN      偏移，并进入状态 30
    CLASS       偏移，并进入状态 31
    TRY         偏移，并进入状态 32
    RAISE       偏移，并进入状态 33
    THROW       偏移，并进入状态 34
    IMPORT      偏移，并进入状态 35
    INCLUDE     偏移，并进入状态 36
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40
    PASS        偏移，并进入状态 252
    DO          偏移，并进入状态 41
    ASSERT      偏移，并进入状态 42

    command_list      转到状态 253
    command           转到状态 45
    pack_eq_exp       转到状态 46
    top_exp           转到状态 47
    eq_number         转到状态 48
    formal_parameter  转到状态 318
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74
    nonlocal_token    转到状态 75
    global_token      转到状态 76
    default_token     转到状态 77
    return_exp        转到状态 78
    return_token      转到状态 79
    restarted_exp     转到状态 80
    restarted_token   转到状态 81
    restart_exp       转到状态 82
    restart_token     转到状态 83
    continued_exp     转到状态 84
    continued_token   转到状态 85
    continue_exp      转到状态 86
    continue_token    转到状态 87
    break_exp         转到状态 88
    break_token       转到状态 89
    broken_exp        转到状态 90
    broken_token      转到状态 91
    if_block          转到状态 92
    if_exp            转到状态 93
    block_block       转到状态 94
    block_exp         转到状态 95
    for_block         转到状态 96
    for_exp           转到状态 97
    include_exp       转到状态 98
    import_exp        转到状态 99
    raise_exp         转到状态 100
    try_block         转到状态 101
    try_exp           转到状态 102
    try_token         转到状态 103
    do_while_block    转到状态 104
    while_block       转到状态 105
    while_exp         转到状态 106
    class_block       转到状态 107
    class_exp         转到状态 108
    def_block         转到状态 109
    def_exp           转到状态 110
    block             转到状态 254


状态 252

  189 block: LP PASS . RP

    RP  偏移，并进入状态 319


状态 253

    3 command_list: command_list . command
  187 block: LP command_list . RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 6
    LB          偏移，并进入状态 7
    RP          偏移，并进入状态 320
    LP          偏移，并进入状态 8
    WHILE       偏移，并进入状态 9
    POW         偏移，并进入状态 10
    BREAK       偏移，并进入状态 11
    IF          偏移，并进入状态 12
    BROKEN      偏移，并进入状态 13
    CONTINUE    偏移，并进入状态 14
    CONTINUED   偏移，并进入状态 15
    RESTART     偏移，并进入状态 16
    RESTARTED   偏移，并进入状态 17
    REGO        偏移，并进入状态 18
    REWENT      偏移，并进入状态 19
    LI          偏移，并进入状态 20
    DEFAULT     偏移，并进入状态 21
    FOR         偏移，并进入状态 22
    GLOBAL      偏移，并进入状态 23
    NONLOCAL    偏移，并进入状态 24
    BLOCK       偏移，并进入状态 25
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    DEF         偏移，并进入状态 29
    RETURN      偏移，并进入状态 30
    CLASS       偏移，并进入状态 31
    TRY         偏移，并进入状态 32
    RAISE       偏移，并进入状态 33
    THROW       偏移，并进入状态 34
    IMPORT      偏移，并进入状态 35
    INCLUDE     偏移，并进入状态 36
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40
    DO          偏移，并进入状态 41
    ASSERT      偏移，并进入状态 42

    command           转到状态 149
    pack_eq_exp       转到状态 46
    top_exp           转到状态 47
    eq_number         转到状态 48
    formal_parameter  转到状态 49
    call_number       转到状态 50
    lambda_exp        转到状态 51
    chose_exp         转到状态 52
    bool_or           转到状态 53
    bool_and          转到状态 54
    bool_not          转到状态 55
    third_number      转到状态 56
    bit_or_not        转到状态 57
    bit_or            转到状态 58
    bit_and           转到状态 59
    bit_move          转到状态 60
    second_number     转到状态 61
    first_number      转到状态 62
    negative          转到状态 63
    bit_not           转到状态 64
    zero_number       转到状态 65
    attribute         转到状态 66
    call_down         转到状态 67
    call_slice        转到状态 68
    iter_value        转到状态 69
    element           转到状态 70
    base_value        转到状态 71
    base_var_         转到状态 72
    base_var_token    转到状态 73
    base_string       转到状态 74
    nonlocal_token    转到状态 75
    global_token      转到状态 76
    default_token     转到状态 77
    return_exp        转到状态 78
    return_token      转到状态 79
    restarted_exp     转到状态 80
    restarted_token   转到状态 81
    restart_exp       转到状态 82
    restart_token     转到状态 83
    continued_exp     转到状态 84
    continued_token   转到状态 85
    continue_exp      转到状态 86
    continue_token    转到状态 87
    break_exp         转到状态 88
    break_token       转到状态 89
    broken_exp        转到状态 90
    broken_token      转到状态 91
    if_block          转到状态 92
    if_exp            转到状态 93
    block_block       转到状态 94
    block_exp         转到状态 95
    for_block         转到状态 96
    for_exp           转到状态 97
    include_exp       转到状态 98
    import_exp        转到状态 99
    raise_exp         转到状态 100
    try_block         转到状态 101
    try_exp           转到状态 102
    try_token         转到状态 103
    do_while_block    转到状态 104
    while_block       转到状态 105
    while_exp         转到状态 106
    class_block       转到状态 107
    class_exp         转到状态 108
    def_block         转到状态 109
    def_exp           转到状态 110


状态 254

  188 block: LP block . RP

    RP  偏移，并进入状态 321


状态 255

  177 do_while_block: DO block while_exp .

    $default  使用规则 177 以归约 (do_while_block)


状态 256

  178 do_while_block: DO block stop_token . while_exp
  192 stop_token: stop_token . STOPF
  193           | stop_token . STOPN

    WHILE  偏移，并进入状态 9
    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    while_exp  转到状态 322


状态 257

  173 raise_exp: ASSERT top_exp top_exp .

    $default  使用规则 173 以归约 (raise_exp)


状态 258

   47 formal_parameter: top_exp COLON top_exp .

    $default  使用规则 47 以归约 (formal_parameter)


状态 259

   29 pack_eq_exp: formal_parameter EQ formal_parameter .
   48 formal_parameter: formal_parameter . COMMA top_exp
   49                 | formal_parameter . COMMA MUL top_exp
   50                 | formal_parameter . COMMA POW top_exp
   51                 | formal_parameter . COMMA top_exp COLON top_exp

    COMMA  偏移，并进入状态 154

    $default  使用规则 29 以归约 (pack_eq_exp)


状态 260

   49 formal_parameter: formal_parameter COMMA MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 323
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 261

   50 formal_parameter: formal_parameter COMMA POW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 324
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 262

   48 formal_parameter: formal_parameter COMMA top_exp .
   51                 | formal_parameter COMMA top_exp . COLON top_exp

    COLON  偏移，并进入状态 325

    $default  使用规则 48 以归约 (formal_parameter)


状态 263

   32 eq_number: call_number EQ eq_number .

    $default  使用规则 32 以归约 (eq_number)


状态 264

   57 call_number: call_number LB RB .

    $default  使用规则 57 以归约 (call_number)


状态 265

   48 formal_parameter: formal_parameter . COMMA top_exp
   49                 | formal_parameter . COMMA MUL top_exp
   50                 | formal_parameter . COMMA POW top_exp
   51                 | formal_parameter . COMMA top_exp COLON top_exp
   58 call_number: call_number LB formal_parameter . RB

    RB     偏移，并进入状态 326
    COMMA  偏移，并进入状态 154


状态 266

   33 eq_number: call_number AADD eq_number .

    $default  使用规则 33 以归约 (eq_number)


状态 267

   34 eq_number: call_number ASUB eq_number .

    $default  使用规则 34 以归约 (eq_number)


状态 268

   35 eq_number: call_number AMUL eq_number .

    $default  使用规则 35 以归约 (eq_number)


状态 269

   36 eq_number: call_number ADIV eq_number .

    $default  使用规则 36 以归约 (eq_number)


状态 270

   37 eq_number: call_number AMOD eq_number .

    $default  使用规则 37 以归约 (eq_number)


状态 271

   38 eq_number: call_number AINTDIV eq_number .

    $default  使用规则 38 以归约 (eq_number)


状态 272

   39 eq_number: call_number APOW eq_number .

    $default  使用规则 39 以归约 (eq_number)


状态 273

   63 chose_exp: chose_exp . IF chose_exp ELSE chose_exp
   63          | chose_exp IF chose_exp . ELSE chose_exp

    IF    偏移，并进入状态 166
    ELSE  偏移，并进入状态 327


状态 274

   65 bool_or: bool_or OR bool_and .
   67 bool_and: bool_and . AND bool_not

    AND  偏移，并进入状态 168

    $default  使用规则 65 以归约 (bool_or)


状态 275

   67 bool_and: bool_and AND bool_not .

    $default  使用规则 67 以归约 (bool_and)


状态 276

   73 third_number: third_number LESS bit_or_not .
   78 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 175

    $default  使用规则 73 以归约 (third_number)


状态 277

   72 third_number: third_number MORE bit_or_not .
   78 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 175

    $default  使用规则 72 以归约 (third_number)


状态 278

   71 third_number: third_number EQUAL bit_or_not .
   78 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 175

    $default  使用规则 71 以归约 (third_number)


状态 279

   74 third_number: third_number MOREEQ bit_or_not .
   78 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 175

    $default  使用规则 74 以归约 (third_number)


状态 280

   75 third_number: third_number LESSEQ bit_or_not .
   78 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 175

    $default  使用规则 75 以归约 (third_number)


状态 281

   76 third_number: third_number NOTEQ bit_or_not .
   78 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 175

    $default  使用规则 76 以归约 (third_number)


状态 282

   78 bit_or_not: bit_or_not BITNOTOR bit_or .
   80 bit_or: bit_or . BITOR bit_and

    BITOR  偏移，并进入状态 176

    $default  使用规则 78 以归约 (bit_or_not)


状态 283

   80 bit_or: bit_or BITOR bit_and .
   82 bit_and: bit_and . BITAND bit_move

    BITAND  偏移，并进入状态 177

    $default  使用规则 80 以归约 (bit_or)


状态 284

   82 bit_and: bit_and BITAND bit_move .
   84 bit_move: bit_move . BITRIGHT second_number
   85         | bit_move . BITLEFT second_number

    BITRIGHT  偏移，并进入状态 178
    BITLEFT   偏移，并进入状态 179

    $default  使用规则 82 以归约 (bit_and)


状态 285

   84 bit_move: bit_move BITRIGHT second_number .
   87 second_number: second_number . ADD first_number
   88              | second_number . SUB first_number

    ADD  偏移，并进入状态 180
    SUB  偏移，并进入状态 181

    SUB       [使用规则 84 以归约 (bit_move)]
    $default  使用规则 84 以归约 (bit_move)


状态 286

   85 bit_move: bit_move BITLEFT second_number .
   87 second_number: second_number . ADD first_number
   88              | second_number . SUB first_number

    ADD  偏移，并进入状态 180
    SUB  偏移，并进入状态 181

    SUB       [使用规则 85 以归约 (bit_move)]
    $default  使用规则 85 以归约 (bit_move)


状态 287

   87 second_number: second_number ADD first_number .
   90 first_number: first_number . MUL negative
   91             | first_number . DIV negative
   92             | first_number . MOD negative
   93             | first_number . INTDIV negative

    DIV     偏移，并进入状态 182
    MUL     偏移，并进入状态 183
    MOD     偏移，并进入状态 184
    INTDIV  偏移，并进入状态 185

    $default  使用规则 87 以归约 (second_number)


状态 288

   88 second_number: second_number SUB first_number .
   90 first_number: first_number . MUL negative
   91             | first_number . DIV negative
   92             | first_number . MOD negative
   93             | first_number . INTDIV negative

    DIV     偏移，并进入状态 182
    MUL     偏移，并进入状态 183
    MOD     偏移，并进入状态 184
    INTDIV  偏移，并进入状态 185

    $default  使用规则 88 以归约 (second_number)


状态 289

   91 first_number: first_number DIV negative .

    $default  使用规则 91 以归约 (first_number)


状态 290

   90 first_number: first_number MUL negative .

    $default  使用规则 90 以归约 (first_number)


状态 291

   92 first_number: first_number MOD negative .

    $default  使用规则 92 以归约 (first_number)


状态 292

   93 first_number: first_number INTDIV negative .

    $default  使用规则 93 以归约 (first_number)


状态 293

   99 zero_number: zero_number POW attribute .
  103 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 189

    $default  使用规则 99 以归约 (zero_number)


状态 294

  100 zero_number: zero_number LOG attribute .
  103 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 189

    $default  使用规则 100 以归约 (zero_number)


状态 295

  101 zero_number: zero_number SQRT attribute .
  103 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 189

    $default  使用规则 101 以归约 (zero_number)


状态 296

  103 attribute: attribute POINT call_down .

    $default  使用规则 103 以归约 (attribute)


状态 297

   55 slice_arguments_token: top_exp . COLON
  105 call_down: call_slice LI top_exp . RI

    RI     偏移，并进入状态 328
    COLON  偏移，并进入状态 329


状态 298

   53 slice_arguments: slice_arguments . slice_arguments_token
   54                | slice_arguments . top_exp
  107 call_slice: call_slice LI slice_arguments . RI

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    RI          偏移，并进入状态 330
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp                转到状态 331
    eq_number              转到状态 48
    slice_arguments_token  转到状态 332
    call_number            转到状态 50
    lambda_exp             转到状态 51
    chose_exp              转到状态 52
    bool_or                转到状态 53
    bool_and               转到状态 54
    bool_not               转到状态 55
    third_number           转到状态 56
    bit_or_not             转到状态 57
    bit_or                 转到状态 58
    bit_and                转到状态 59
    bit_move               转到状态 60
    second_number          转到状态 61
    first_number           转到状态 62
    negative               转到状态 63
    bit_not                转到状态 64
    zero_number            转到状态 65
    attribute              转到状态 66
    call_down              转到状态 67
    call_slice             转到状态 68
    iter_value             转到状态 69
    element                转到状态 70
    base_value             转到状态 71
    base_var_              转到状态 72
    base_var_token         转到状态 73
    base_string            转到状态 74


状态 299

   52 slice_arguments: slice_arguments_token .

    $default  使用规则 52 以归约 (slice_arguments)


状态 300

  132 return_exp: return_token top_exp element .

    $default  使用规则 132 以归约 (return_exp)


状态 301

  154 elif_exp: ELIF LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 333
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 302

  153 if_block: if_block elif_exp block .

    $default  使用规则 153 以归约 (if_block)


状态 303

  175 try_exp: try_token block EXCEPT . AS element

    AS  偏移，并进入状态 334


状态 304

   60 lambda_exp: LB RB LAMBDA chose_exp .
   63 chose_exp: chose_exp . IF chose_exp ELSE chose_exp

    IF  偏移，并进入状态 166

    $default  使用规则 60 以归约 (lambda_exp)


状态 305

   61 lambda_exp: LB formal_parameter RB LAMBDA . chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    BITNOT      偏移，并进入状态 40

    chose_exp       转到状态 335
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 306

  180 while_exp: WHILE LB top_exp RB .

    $default  使用规则 180 以归约 (while_exp)


状态 307

  156 if_exp: IF LB top_exp RB .

    $default  使用规则 156 以归约 (if_exp)


状态 308

  123 base_var_: LI top_exp RI base_var_token .

    $default  使用规则 123 以归约 (base_var_)


状态 309

  160 for_exp: FOR LB COMMA COMMA . RB
  163        | FOR LB COMMA COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 336
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 337
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 310

  162 for_exp: FOR LB COMMA top_exp . COMMA RB
  166        | FOR LB COMMA top_exp . COMMA top_exp RB

    COMMA  偏移，并进入状态 338


状态 311

  161 for_exp: FOR LB top_exp COMMA . COMMA RB
  164        | FOR LB top_exp COMMA . COMMA top_exp RB
  165        | FOR LB top_exp COMMA . top_exp COMMA RB
  167        | FOR LB top_exp COMMA . top_exp COMMA top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    COMMA       偏移，并进入状态 339
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 340
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 312

  168 for_exp: FOR LB element IN . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 341
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 313

  185 def_exp: DEF element LB RB .

    $default  使用规则 185 以归约 (def_exp)


状态 314

   48 formal_parameter: formal_parameter . COMMA top_exp
   49                 | formal_parameter . COMMA MUL top_exp
   50                 | formal_parameter . COMMA POW top_exp
   51                 | formal_parameter . COMMA top_exp COLON top_exp
  186 def_exp: DEF element LB formal_parameter . RB

    RB     偏移，并进入状态 342
    COMMA  偏移，并进入状态 154


状态 315

  182 class_exp: CLASS element LB RB .

    $default  使用规则 182 以归约 (class_exp)


状态 316

   48 formal_parameter: formal_parameter . COMMA top_exp
   49                 | formal_parameter . COMMA MUL top_exp
   50                 | formal_parameter . COMMA POW top_exp
   51                 | formal_parameter . COMMA top_exp COLON top_exp
  183 class_exp: CLASS element LB formal_parameter . RB

    RB     偏移，并进入状态 343
    COMMA  偏移，并进入状态 154


状态 317

  170 import_exp: IMPORT top_exp AS element .

    $default  使用规则 170 以归约 (import_exp)


状态 318

   29 pack_eq_exp: formal_parameter . EQ formal_parameter
   48 formal_parameter: formal_parameter . COMMA top_exp
   49                 | formal_parameter . COMMA MUL top_exp
   50                 | formal_parameter . COMMA POW top_exp
   51                 | formal_parameter . COMMA top_exp COLON top_exp
  112 iter_value: LP formal_parameter . RP

    EQ     偏移，并进入状态 153
    RP     偏移，并进入状态 235
    COMMA  偏移，并进入状态 154


状态 319

  189 block: LP PASS RP .

    $default  使用规则 189 以归约 (block)


状态 320

  187 block: LP command_list RP .

    $default  使用规则 187 以归约 (block)


状态 321

  188 block: LP block RP .

    $default  使用规则 188 以归约 (block)


状态 322

  178 do_while_block: DO block stop_token while_exp .

    $default  使用规则 178 以归约 (do_while_block)


状态 323

   49 formal_parameter: formal_parameter COMMA MUL top_exp .

    $default  使用规则 49 以归约 (formal_parameter)


状态 324

   50 formal_parameter: formal_parameter COMMA POW top_exp .

    $default  使用规则 50 以归约 (formal_parameter)


状态 325

   51 formal_parameter: formal_parameter COMMA top_exp COLON . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 344
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 326

   58 call_number: call_number LB formal_parameter RB .

    $default  使用规则 58 以归约 (call_number)


状态 327

   63 chose_exp: chose_exp IF chose_exp ELSE . chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 111
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    BITNOT      偏移，并进入状态 40

    chose_exp       转到状态 345
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 328

  105 call_down: call_slice LI top_exp RI .

    $default  使用规则 105 以归约 (call_down)


状态 329

   55 slice_arguments_token: top_exp COLON .

    $default  使用规则 55 以归约 (slice_arguments_token)


状态 330

  107 call_slice: call_slice LI slice_arguments RI .

    $default  使用规则 107 以归约 (call_slice)


状态 331

   54 slice_arguments: slice_arguments top_exp .
   55 slice_arguments_token: top_exp . COLON

    COLON  偏移，并进入状态 329

    $default  使用规则 54 以归约 (slice_arguments)


状态 332

   53 slice_arguments: slice_arguments slice_arguments_token .

    $default  使用规则 53 以归约 (slice_arguments)


状态 333

  154 elif_exp: ELIF LB top_exp . RB

    RB  偏移，并进入状态 346


状态 334

  175 try_exp: try_token block EXCEPT AS . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 111
    LI          偏移，并进入状态 134
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28

    element         转到状态 347
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 335

   61 lambda_exp: LB formal_parameter RB LAMBDA chose_exp .
   63 chose_exp: chose_exp . IF chose_exp ELSE chose_exp

    IF  偏移，并进入状态 166

    $default  使用规则 61 以归约 (lambda_exp)


状态 336

  160 for_exp: FOR LB COMMA COMMA RB .

    $default  使用规则 160 以归约 (for_exp)


状态 337

  163 for_exp: FOR LB COMMA COMMA top_exp . RB

    RB  偏移，并进入状态 348


状态 338

  162 for_exp: FOR LB COMMA top_exp COMMA . RB
  166        | FOR LB COMMA top_exp COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 349
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 350
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 339

  161 for_exp: FOR LB top_exp COMMA COMMA . RB
  164        | FOR LB top_exp COMMA COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 351
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 352
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 340

  165 for_exp: FOR LB top_exp COMMA top_exp . COMMA RB
  167        | FOR LB top_exp COMMA top_exp . COMMA top_exp RB

    COMMA  偏移，并进入状态 353


状态 341

  168 for_exp: FOR LB element IN top_exp . RB

    RB  偏移，并进入状态 354


状态 342

  186 def_exp: DEF element LB formal_parameter RB .

    $default  使用规则 186 以归约 (def_exp)


状态 343

  183 class_exp: CLASS element LB formal_parameter RB .

    $default  使用规则 183 以归约 (class_exp)


状态 344

   51 formal_parameter: formal_parameter COMMA top_exp COLON top_exp .

    $default  使用规则 51 以归约 (formal_parameter)


状态 345

   63 chose_exp: chose_exp . IF chose_exp ELSE chose_exp
   63          | chose_exp IF chose_exp ELSE chose_exp .

    IF  偏移，并进入状态 166

    IF        [使用规则 63 以归约 (chose_exp)]
    $default  使用规则 63 以归约 (chose_exp)


状态 346

  154 elif_exp: ELIF LB top_exp RB .

    $default  使用规则 154 以归约 (elif_exp)


状态 347

  175 try_exp: try_token block EXCEPT AS element .

    $default  使用规则 175 以归约 (try_exp)


状态 348

  163 for_exp: FOR LB COMMA COMMA top_exp RB .

    $default  使用规则 163 以归约 (for_exp)


状态 349

  162 for_exp: FOR LB COMMA top_exp COMMA RB .

    $default  使用规则 162 以归约 (for_exp)


状态 350

  166 for_exp: FOR LB COMMA top_exp COMMA top_exp . RB

    RB  偏移，并进入状态 355


状态 351

  161 for_exp: FOR LB top_exp COMMA COMMA RB .

    $default  使用规则 161 以归约 (for_exp)


状态 352

  164 for_exp: FOR LB top_exp COMMA COMMA top_exp . RB

    RB  偏移，并进入状态 356


状态 353

  165 for_exp: FOR LB top_exp COMMA top_exp COMMA . RB
  167        | FOR LB top_exp COMMA top_exp COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 357
    LB          偏移，并进入状态 7
    LP          偏移，并进入状态 8
    LI          偏移，并进入状态 20
    FALSE       偏移，并进入状态 26
    TRUE        偏移，并进入状态 27
    NULL_token  偏移，并进入状态 28
    NOT         偏移，并进入状态 37
    FADD        偏移，并进入状态 38
    FSUB        偏移，并进入状态 39
    BITNOT      偏移，并进入状态 40

    top_exp         转到状态 358
    eq_number       转到状态 48
    call_number     转到状态 50
    lambda_exp      转到状态 51
    chose_exp       转到状态 52
    bool_or         转到状态 53
    bool_and        转到状态 54
    bool_not        转到状态 55
    third_number    转到状态 56
    bit_or_not      转到状态 57
    bit_or          转到状态 58
    bit_and         转到状态 59
    bit_move        转到状态 60
    second_number   转到状态 61
    first_number    转到状态 62
    negative        转到状态 63
    bit_not         转到状态 64
    zero_number     转到状态 65
    attribute       转到状态 66
    call_down       转到状态 67
    call_slice      转到状态 68
    iter_value      转到状态 69
    element         转到状态 70
    base_value      转到状态 71
    base_var_       转到状态 72
    base_var_token  转到状态 73
    base_string     转到状态 74


状态 354

  168 for_exp: FOR LB element IN top_exp RB .

    $default  使用规则 168 以归约 (for_exp)


状态 355

  166 for_exp: FOR LB COMMA top_exp COMMA top_exp RB .

    $default  使用规则 166 以归约 (for_exp)


状态 356

  164 for_exp: FOR LB top_exp COMMA COMMA top_exp RB .

    $default  使用规则 164 以归约 (for_exp)


状态 357

  165 for_exp: FOR LB top_exp COMMA top_exp COMMA RB .

    $default  使用规则 165 以归约 (for_exp)


状态 358

  167 for_exp: FOR LB top_exp COMMA top_exp COMMA top_exp . RB

    RB  偏移，并进入状态 359


状态 359

  167 for_exp: FOR LB top_exp COMMA top_exp COMMA top_exp RB .

    $default  使用规则 167 以归约 (for_exp)
