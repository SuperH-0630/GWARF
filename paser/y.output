终端机在文法中未使用

    INDENTA


状态 46冲突：4 项偏移/归约
状态 57冲突：1 项偏移/归约
状态 64冲突：1 项偏移/归约
状态 70冲突：1 项偏移/归约
状态 112冲突：1 项偏移/归约
状态 125冲突：1 项偏移/归约
状态 138冲突：1 项偏移/归约
状态 139冲突：1 项偏移/归约
状态 265冲突：1 项偏移/归约
状态 285冲突：1 项偏移/归约
状态 286冲突：1 项偏移/归约
状态 364冲突：1 项偏移/归约
状态 366冲突：1 项偏移/归约


语法

    0 $accept: command_block $end

    1 command_block: command_list

    2 command_list: command
    3             | command_list command

    4 command: top_exp stop_token
    5        | while_block stop_token
    6        | if_block stop_token
    7        | break_exp stop_token
    8        | broken_exp stop_token
    9        | continue_exp stop_token
   10        | continued_exp stop_token
   11        | restart_exp stop_token
   12        | restarted_exp stop_token
   13        | REGO stop_token
   14        | REWENT stop_token
   15        | default_token stop_token
   16        | global_token stop_token
   17        | for_block stop_token
   18        | nonlocal_token stop_token
   19        | block_block stop_token
   20        | def_block stop_token
   21        | return_exp stop_token
   22        | class_block stop_token
   23        | try_block stop_token
   24        | raise_exp stop_token
   25        | import_exp stop_token
   26        | include_exp stop_token
   27        | do_while_block stop_token

   28 top_exp: eq_number

   29 eq_number: call_number
   30          | call_number EQ eq_number
   31          | call_number AADD eq_number
   32          | call_number ASUB eq_number
   33          | call_number AMUL eq_number
   34          | call_number ADIV eq_number
   35          | call_number AMOD eq_number
   36          | call_number AINTDIV eq_number
   37          | call_number APOW eq_number
   38          | call_number FADD
   39          | FADD call_number
   40          | call_number FSUB
   41          | FSUB call_number

   42 formal_parameter: top_exp
   43                 | MUL top_exp
   44                 | POW top_exp
   45                 | top_exp EQ top_exp
   46                 | formal_parameter COMMA top_exp
   47                 | formal_parameter COMMA MUL top_exp
   48                 | formal_parameter COMMA POW top_exp
   49                 | formal_parameter COMMA top_exp EQ top_exp

   50 arguments: top_exp
   51          | arguments COMMA top_exp
   52          | base_var_ EQ top_exp
   53          | arguments COMMA base_var_ EQ top_exp
   54          | MUL top_exp
   55          | arguments COMMA MUL top_exp
   56          | POW top_exp
   57          | arguments COMMA POW top_exp

   58 slice_arguments: slice_arguments_token
   59                | slice_arguments slice_arguments_token
   60                | slice_arguments top_exp

   61 slice_arguments_token: top_exp COLON

   62 call_number: lambda_exp
   63            | call_number LB RB
   64            | call_number LB arguments RB

   65 lambda_exp: chose_exp
   66           | LB RB LAMBDA chose_exp
   67           | LB formal_parameter RB LAMBDA chose_exp

   68 chose_exp: bool_or
   69          | chose_exp IF chose_exp ELSE chose_exp

   70 bool_or: bool_and
   71        | bool_or OR bool_and

   72 bool_and: bool_not
   73         | bool_and AND bool_not

   74 bool_not: third_number
   75         | NOT third_number

   76 third_number: bit_or_not
   77             | third_number EQUAL bit_or_not
   78             | third_number MORE bit_or_not
   79             | third_number LESS bit_or_not
   80             | third_number MOREEQ bit_or_not
   81             | third_number LESSEQ bit_or_not
   82             | third_number NOTEQ bit_or_not

   83 bit_or_not: bit_or
   84           | bit_or_not BITNOTOR bit_or

   85 bit_or: bit_and
   86       | bit_or BITOR bit_and

   87 bit_and: bit_move
   88        | bit_and BITAND bit_move

   89 bit_move: second_number
   90         | bit_move BITRIGHT second_number
   91         | bit_move BITLEFT second_number

   92 second_number: first_number
   93              | second_number ADD first_number
   94              | second_number SUB first_number

   95 first_number: negative
   96             | first_number MUL negative
   97             | first_number DIV negative
   98             | first_number MOD negative
   99             | first_number INTDIV negative

  100 negative: bit_not
  101         | SUB bit_not

  102 bit_not: zero_number
  103        | BITNOT zero_number

  104 zero_number: attribute
  105            | zero_number POW attribute
  106            | zero_number LOG attribute
  107            | zero_number SQRT attribute

  108 attribute: call_down
  109          | attribute POINT call_down

  110 call_down: call_slice
  111          | call_slice LI top_exp RI

  112 call_slice: iter_value
  113           | call_slice LI slice_arguments RI

  114 iter_value: element
  115           | LI list_arguments RI
  116           | LP dict_arguments RP

  117 list_arguments: top_exp
  118               | list_arguments COMMA top_exp
  119               | MUL top_exp
  120               | list_arguments COMMA MUL top_exp

  121 dict_arguments: element COLON element
  122               | dict_arguments COMMA element COLON element
  123               | POW top_exp
  124               | dict_arguments COMMA POW top_exp

  125 element: base_value
  126        | base_var_
  127        | LB top_exp RB

  128 base_value: NUMBER
  129           | INT
  130           | base_string
  131           | TRUE
  132           | FALSE
  133           | NULL_token

  134 base_var_: base_var_token
  135          | LI top_exp RI base_var_token

  136 base_var_token: VAR

  137 base_string: STRING
  138            | base_string STRING

  139 nonlocal_token: NONLOCAL base_var_token

  140 global_token: GLOBAL base_var_token

  141 default_token: DEFAULT base_var_token element

  142 return_exp: return_token
  143           | return_token top_exp
  144           | return_token top_exp element

  145 return_token: RETURN

  146 restarted_exp: restarted_token
  147              | restarted_token element

  148 restarted_token: RESTARTED

  149 restart_exp: restart_token
  150            | restart_token element

  151 restart_token: RESTART

  152 continued_exp: continued_token
  153              | continued_token element

  154 continued_token: CONTINUED

  155 continue_exp: continue_token
  156             | continue_token element

  157 continue_token: CONTINUE

  158 break_exp: break_token
  159          | break_token element

  160 break_token: BREAK

  161 broken_exp: broken_token
  162           | broken_token element

  163 broken_token: BROKEN

  164 if_block: if_exp block
  165         | if_block elif_exp block

  166 elif_exp: ELIF LB top_exp RB
  167         | ELSE

  168 if_exp: IF LB top_exp RB

  169 block_block: block_exp block

  170 block_exp: BLOCK

  171 for_block: for_exp block

  172 for_exp: FOR LB COMMA COMMA RB
  173        | FOR LB top_exp COMMA COMMA RB
  174        | FOR LB COMMA top_exp COMMA RB
  175        | FOR LB COMMA COMMA top_exp RB
  176        | FOR LB top_exp COMMA COMMA top_exp RB
  177        | FOR LB top_exp COMMA top_exp COMMA RB
  178        | FOR LB COMMA top_exp COMMA top_exp RB
  179        | FOR LB top_exp COMMA top_exp COMMA top_exp RB
  180        | FOR LB element IN top_exp RB

  181 include_exp: INCLUDE top_exp

  182 import_exp: IMPORT top_exp AS element

  183 raise_exp: RAISE top_exp top_exp
  184          | THROW top_exp
  185          | ASSERT top_exp top_exp

  186 try_block: try_exp block

  187 try_exp: try_token block EXCEPT AS element

  188 try_token: TRY

  189 do_while_block: DO block while_exp
  190               | DO block stop_token while_exp

  191 while_block: while_exp block

  192 while_exp: WHILE LB top_exp RB

  193 class_block: class_exp block

  194 class_exp: CLASS element LB RB
  195          | CLASS element LB arguments RB

  196 def_block: def_exp block

  197 def_exp: DEF element LB RB
  198        | DEF element LB formal_parameter RB

  199 block: LP command_list RP
  200      | LP block RP
  201      | LP PASS RP

  202 stop_token: STOPN
  203           | STOPF
  204           | stop_token STOPF
  205           | stop_token STOPN


终结语词，附有它们出现处的规则

    $end (0) 0
    error (256)
    NUMBER <double_value> (258) 128
    INT <double_value> (259) 129
    STRING <string_value> (260) 137 138
    VAR <string_value> (261) 136
    ADD (262) 93
    SUB (263) 94 101
    DIV (264) 97
    MUL (265) 43 47 54 55 96 119 120
    EQ (266) 30 45 49 52 53
    LESS (267) 79
    MORE (268) 78
    RB (269) 63 64 66 67 127 166 168 172 173 174 175 176 177 178 179 180 192 194 195 197 198
    LB (270) 63 64 66 67 127 166 168 172 173 174 175 176 177 178 179 180 192 194 195 197 198
    RP (271) 116 199 200 201
    LP (272) 116 199 200 201
    WHILE (273) 192
    POW (274) 44 48 56 57 105 123 124
    LOG (275) 106
    SQRT (276) 107
    EQUAL (277) 77
    MOREEQ (278) 80
    LESSEQ (279) 81
    NOTEQ (280) 82
    BREAK (281) 160
    IF (282) 69 168
    ELSE (283) 69 167
    ELIF (284) 166
    BROKEN (285) 163
    CONTINUE (286) 157
    CONTINUED (287) 154
    RESTART (288) 151
    RESTARTED (289) 148
    REGO (290) 13
    REWENT (291) 14
    RI (292) 111 113 115 135
    LI (293) 111 113 115 135
    DEFAULT (294) 141
    FOR (295) 172 173 174 175 176 177 178 179 180
    COMMA (296) 46 47 48 49 51 53 55 57 118 120 122 124 172 173 174 175 176 177 178 179
    GLOBAL (297) 140
    NONLOCAL (298) 139
    INDENTA (299)
    STOPN (300) 202 205
    STOPF (301) 203 204
    BLOCK (302) 170
    FALSE (303) 132
    TRUE (304) 131
    NULL_token (305) 133
    DEF (306) 197 198
    RETURN (307) 145
    CLASS (308) 194 195
    POINT (309) 109
    COLON (310) 61 121 122
    TRY (311) 188
    EXCEPT (312) 187
    AS (313) 182 187
    RAISE (314) 183
    THROW (315) 184
    IMPORT (316) 182
    INCLUDE (317) 181
    IN (318) 180
    AND (319) 73
    OR (320) 71
    NOT (321) 75
    MOD (322) 98
    INTDIV (323) 99
    AADD (324) 31
    ASUB (325) 32
    AMUL (326) 33
    ADIV (327) 34
    AMOD (328) 35
    AINTDIV (329) 36
    FADD (330) 38 39
    FSUB (331) 40 41
    APOW (332) 37
    BITAND (333) 88
    BITOR (334) 86
    BITNOT (335) 103
    BITNOTOR (336) 84
    BITRIGHT (337) 90
    BITLEFT (338) 91
    PASS (339) 201
    DO (340) 189 190
    LAMBDA (341) 66 67
    ASSERT (342) 185


非终结语词，附有它们出现处的规则

    $accept (88)
        on left: 0
    command_block (89)
        on left: 1
        on right: 0
    command_list (90)
        on left: 2 3
        on right: 1 3 199
    command <statement_value> (91)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 2 3
    top_exp <statement_value> (92)
        on left: 28
        on right: 4 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 60 61 111 117 118 119 120 123 124 127 135 143 144 166 168 173 174 175 176 177 178 179 180 181 182 183 184 185 192
    eq_number <statement_value> (93)
        on left: 29 30 31 32 33 34 35 36 37 38 39 40 41
        on right: 28 30 31 32 33 34 35 36 37
    formal_parameter <parameter_list> (94)
        on left: 42 43 44 45 46 47 48 49
        on right: 46 47 48 49 67 198
    arguments <parameter_list> (95)
        on left: 50 51 52 53 54 55 56 57
        on right: 51 53 55 57 64 195
    slice_arguments <parameter_list> (96)
        on left: 58 59 60
        on right: 59 60 113
    slice_arguments_token <statement_value> (97)
        on left: 61
        on right: 58 59
    call_number <statement_value> (98)
        on left: 62 63 64
        on right: 29 30 31 32 33 34 35 36 37 38 39 40 41 63 64
    lambda_exp <statement_value> (99)
        on left: 65 66 67
        on right: 62
    chose_exp <statement_value> (100)
        on left: 68 69
        on right: 65 66 67 69
    bool_or <statement_value> (101)
        on left: 70 71
        on right: 68 71
    bool_and <statement_value> (102)
        on left: 72 73
        on right: 70 71 73
    bool_not <statement_value> (103)
        on left: 74 75
        on right: 72 73
    third_number <statement_value> (104)
        on left: 76 77 78 79 80 81 82
        on right: 74 75 77 78 79 80 81 82
    bit_or_not <statement_value> (105)
        on left: 83 84
        on right: 76 77 78 79 80 81 82 84
    bit_or <statement_value> (106)
        on left: 85 86
        on right: 83 84 86
    bit_and <statement_value> (107)
        on left: 87 88
        on right: 85 86 88
    bit_move <statement_value> (108)
        on left: 89 90 91
        on right: 87 88 90 91
    second_number <statement_value> (109)
        on left: 92 93 94
        on right: 89 90 91 93 94
    first_number <statement_value> (110)
        on left: 95 96 97 98 99
        on right: 92 93 94 96 97 98 99
    negative <statement_value> (111)
        on left: 100 101
        on right: 95 96 97 98 99
    bit_not <statement_value> (112)
        on left: 102 103
        on right: 100 101
    zero_number <statement_value> (113)
        on left: 104 105 106 107
        on right: 102 103 105 106 107
    attribute <statement_value> (114)
        on left: 108 109
        on right: 104 105 106 107 109
    call_down <statement_value> (115)
        on left: 110 111
        on right: 108 109
    call_slice <statement_value> (116)
        on left: 112 113
        on right: 110 111 113
    iter_value <statement_value> (117)
        on left: 114 115 116
        on right: 112
    list_arguments <parameter_list> (118)
        on left: 117 118 119 120
        on right: 115 118 120
    dict_arguments <parameter_list> (119)
        on left: 121 122 123 124
        on right: 116 122 124
    element <statement_value> (120)
        on left: 125 126 127
        on right: 114 121 122 141 144 147 150 153 156 159 162 180 182 187 194 195 197 198
    base_value <statement_value> (121)
        on left: 128 129 130 131 132 133
        on right: 125
    base_var_ <statement_value> (122)
        on left: 134 135
        on right: 52 53 126
    base_var_token <statement_value> (123)
        on left: 136
        on right: 134 135 139 140 141
    base_string <string_value> (124)
        on left: 137 138
        on right: 130 138
    nonlocal_token <statement_value> (125)
        on left: 139
        on right: 18
    global_token <statement_value> (126)
        on left: 140
        on right: 16
    default_token <statement_value> (127)
        on left: 141
        on right: 15
    return_exp <statement_value> (128)
        on left: 142 143 144
        on right: 21
    return_token <statement_value> (129)
        on left: 145
        on right: 142 143 144
    restarted_exp <statement_value> (130)
        on left: 146 147
        on right: 12
    restarted_token <statement_value> (131)
        on left: 148
        on right: 146 147
    restart_exp <statement_value> (132)
        on left: 149 150
        on right: 11
    restart_token <statement_value> (133)
        on left: 151
        on right: 149 150
    continued_exp <statement_value> (134)
        on left: 152 153
        on right: 10
    continued_token <statement_value> (135)
        on left: 154
        on right: 152 153
    continue_exp <statement_value> (136)
        on left: 155 156
        on right: 9
    continue_token <statement_value> (137)
        on left: 157
        on right: 155 156
    break_exp <statement_value> (138)
        on left: 158 159
        on right: 7
    break_token <statement_value> (139)
        on left: 160
        on right: 158 159
    broken_exp <statement_value> (140)
        on left: 161 162
        on right: 8
    broken_token <statement_value> (141)
        on left: 163
        on right: 161 162
    if_block <statement_value> (142)
        on left: 164 165
        on right: 6 165
    elif_exp <if_list_base> (143)
        on left: 166 167
        on right: 165
    if_exp <statement_value> (144)
        on left: 168
        on right: 164
    block_block <statement_value> (145)
        on left: 169
        on right: 19
    block_exp <statement_value> (146)
        on left: 170
        on right: 169
    for_block <statement_value> (147)
        on left: 171
        on right: 17
    for_exp <statement_value> (148)
        on left: 172 173 174 175 176 177 178 179 180
        on right: 171
    include_exp <statement_value> (149)
        on left: 181
        on right: 26
    import_exp <statement_value> (150)
        on left: 182
        on right: 25
    raise_exp <statement_value> (151)
        on left: 183 184 185
        on right: 24
    try_block <statement_value> (152)
        on left: 186
        on right: 23
    try_exp <statement_value> (153)
        on left: 187
        on right: 186
    try_token <statement_value> (154)
        on left: 188
        on right: 187
    do_while_block <statement_value> (155)
        on left: 189 190
        on right: 27
    while_block <statement_value> (156)
        on left: 191
        on right: 5
    while_exp <statement_value> (157)
        on left: 192
        on right: 189 190 191
    class_block <statement_value> (158)
        on left: 193
        on right: 22
    class_exp <statement_value> (159)
        on left: 194 195
        on right: 193
    def_block <statement_value> (160)
        on left: 196
        on right: 20
    def_exp <statement_value> (161)
        on left: 197 198
        on right: 196
    block (162)
        on left: 199 200 201
        on right: 164 165 169 171 186 187 189 190 191 193 196 200
    stop_token (163)
        on left: 202 203 204 205
        on right: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 190 204 205


状态 0

    0 $accept: . command_block $end

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    WHILE       偏移，并进入状态 8
    BREAK       偏移，并进入状态 9
    IF          偏移，并进入状态 10
    BROKEN      偏移，并进入状态 11
    CONTINUE    偏移，并进入状态 12
    CONTINUED   偏移，并进入状态 13
    RESTART     偏移，并进入状态 14
    RESTARTED   偏移，并进入状态 15
    REGO        偏移，并进入状态 16
    REWENT      偏移，并进入状态 17
    LI          偏移，并进入状态 18
    DEFAULT     偏移，并进入状态 19
    FOR         偏移，并进入状态 20
    GLOBAL      偏移，并进入状态 21
    NONLOCAL    偏移，并进入状态 22
    BLOCK       偏移，并进入状态 23
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    DEF         偏移，并进入状态 27
    RETURN      偏移，并进入状态 28
    CLASS       偏移，并进入状态 29
    TRY         偏移，并进入状态 30
    RAISE       偏移，并进入状态 31
    THROW       偏移，并进入状态 32
    IMPORT      偏移，并进入状态 33
    INCLUDE     偏移，并进入状态 34
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38
    DO          偏移，并进入状态 39
    ASSERT      偏移，并进入状态 40

    command_block    转到状态 41
    command_list     转到状态 42
    command          转到状态 43
    top_exp          转到状态 44
    eq_number        转到状态 45
    call_number      转到状态 46
    lambda_exp       转到状态 47
    chose_exp        转到状态 48
    bool_or          转到状态 49
    bool_and         转到状态 50
    bool_not         转到状态 51
    third_number     转到状态 52
    bit_or_not       转到状态 53
    bit_or           转到状态 54
    bit_and          转到状态 55
    bit_move         转到状态 56
    second_number    转到状态 57
    first_number     转到状态 58
    negative         转到状态 59
    bit_not          转到状态 60
    zero_number      转到状态 61
    attribute        转到状态 62
    call_down        转到状态 63
    call_slice       转到状态 64
    iter_value       转到状态 65
    element          转到状态 66
    base_value       转到状态 67
    base_var_        转到状态 68
    base_var_token   转到状态 69
    base_string      转到状态 70
    nonlocal_token   转到状态 71
    global_token     转到状态 72
    default_token    转到状态 73
    return_exp       转到状态 74
    return_token     转到状态 75
    restarted_exp    转到状态 76
    restarted_token  转到状态 77
    restart_exp      转到状态 78
    restart_token    转到状态 79
    continued_exp    转到状态 80
    continued_token  转到状态 81
    continue_exp     转到状态 82
    continue_token   转到状态 83
    break_exp        转到状态 84
    break_token      转到状态 85
    broken_exp       转到状态 86
    broken_token     转到状态 87
    if_block         转到状态 88
    if_exp           转到状态 89
    block_block      转到状态 90
    block_exp        转到状态 91
    for_block        转到状态 92
    for_exp          转到状态 93
    include_exp      转到状态 94
    import_exp       转到状态 95
    raise_exp        转到状态 96
    try_block        转到状态 97
    try_exp          转到状态 98
    try_token        转到状态 99
    do_while_block   转到状态 100
    while_block      转到状态 101
    while_exp        转到状态 102
    class_block      转到状态 103
    class_exp        转到状态 104
    def_block        转到状态 105
    def_exp          转到状态 106


状态 1

  128 base_value: NUMBER .

    $default  使用规则 128 以归约 (base_value)


状态 2

  129 base_value: INT .

    $default  使用规则 129 以归约 (base_value)


状态 3

  137 base_string: STRING .

    $default  使用规则 137 以归约 (base_string)


状态 4

  136 base_var_token: VAR .

    $default  使用规则 136 以归约 (base_var_token)


状态 5

  101 negative: SUB . bit_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_not         转到状态 108
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 6

   66 lambda_exp: LB . RB LAMBDA chose_exp
   67           | LB . formal_parameter RB LAMBDA chose_exp
  127 element: LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 109
    RB          偏移，并进入状态 110
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    POW         偏移，并进入状态 111
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp           转到状态 112
    eq_number         转到状态 45
    formal_parameter  转到状态 113
    call_number       转到状态 46
    lambda_exp        转到状态 47
    chose_exp         转到状态 48
    bool_or           转到状态 49
    bool_and          转到状态 50
    bool_not          转到状态 51
    third_number      转到状态 52
    bit_or_not        转到状态 53
    bit_or            转到状态 54
    bit_and           转到状态 55
    bit_move          转到状态 56
    second_number     转到状态 57
    first_number      转到状态 58
    negative          转到状态 59
    bit_not           转到状态 60
    zero_number       转到状态 61
    attribute         转到状态 62
    call_down         转到状态 63
    call_slice        转到状态 64
    iter_value        转到状态 65
    element           转到状态 66
    base_value        转到状态 67
    base_var_         转到状态 68
    base_var_token    转到状态 69
    base_string       转到状态 70


状态 7

  116 iter_value: LP . dict_arguments RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    POW         偏移，并进入状态 114
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    dict_arguments  转到状态 116
    element         转到状态 117
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 8

  192 while_exp: WHILE . LB top_exp RB

    LB  偏移，并进入状态 118


状态 9

  160 break_token: BREAK .

    $default  使用规则 160 以归约 (break_token)


状态 10

  168 if_exp: IF . LB top_exp RB

    LB  偏移，并进入状态 119


状态 11

  163 broken_token: BROKEN .

    $default  使用规则 163 以归约 (broken_token)


状态 12

  157 continue_token: CONTINUE .

    $default  使用规则 157 以归约 (continue_token)


状态 13

  154 continued_token: CONTINUED .

    $default  使用规则 154 以归约 (continued_token)


状态 14

  151 restart_token: RESTART .

    $default  使用规则 151 以归约 (restart_token)


状态 15

  148 restarted_token: RESTARTED .

    $default  使用规则 148 以归约 (restarted_token)


状态 16

   13 command: REGO . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 122


状态 17

   14 command: REWENT . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 123


状态 18

  115 iter_value: LI . list_arguments RI
  135 base_var_: LI . top_exp RI base_var_token

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 124
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 125
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    list_arguments  转到状态 126
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 19

  141 default_token: DEFAULT . base_var_token element

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 127


状态 20

  172 for_exp: FOR . LB COMMA COMMA RB
  173        | FOR . LB top_exp COMMA COMMA RB
  174        | FOR . LB COMMA top_exp COMMA RB
  175        | FOR . LB COMMA COMMA top_exp RB
  176        | FOR . LB top_exp COMMA COMMA top_exp RB
  177        | FOR . LB top_exp COMMA top_exp COMMA RB
  178        | FOR . LB COMMA top_exp COMMA top_exp RB
  179        | FOR . LB top_exp COMMA top_exp COMMA top_exp RB
  180        | FOR . LB element IN top_exp RB

    LB  偏移，并进入状态 128


状态 21

  140 global_token: GLOBAL . base_var_token

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 129


状态 22

  139 nonlocal_token: NONLOCAL . base_var_token

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 130


状态 23

  170 block_exp: BLOCK .

    $default  使用规则 170 以归约 (block_exp)


状态 24

  132 base_value: FALSE .

    $default  使用规则 132 以归约 (base_value)


状态 25

  131 base_value: TRUE .

    $default  使用规则 131 以归约 (base_value)


状态 26

  133 base_value: NULL_token .

    $default  使用规则 133 以归约 (base_value)


状态 27

  197 def_exp: DEF . element LB RB
  198        | DEF . element LB formal_parameter RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 131
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 28

  145 return_token: RETURN .

    $default  使用规则 145 以归约 (return_token)


状态 29

  194 class_exp: CLASS . element LB RB
  195          | CLASS . element LB arguments RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 132
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 30

  188 try_token: TRY .

    $default  使用规则 188 以归约 (try_token)


状态 31

  183 raise_exp: RAISE . top_exp top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 133
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 32

  184 raise_exp: THROW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 134
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 33

  182 import_exp: IMPORT . top_exp AS element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 135
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 34

  181 include_exp: INCLUDE . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 136
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 35

   75 bool_not: NOT . third_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    third_number    转到状态 137
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 36

   39 eq_number: FADD . call_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    call_number     转到状态 138
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 37

   41 eq_number: FSUB . call_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    call_number     转到状态 139
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 38

  103 bit_not: BITNOT . zero_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    zero_number     转到状态 140
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 39

  189 do_while_block: DO . block while_exp
  190               | DO . block stop_token while_exp

    LP  偏移，并进入状态 141

    block  转到状态 142


状态 40

  185 raise_exp: ASSERT . top_exp top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 143
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 41

    0 $accept: command_block . $end

    $end  偏移，并进入状态 144


状态 42

    1 command_block: command_list .
    3 command_list: command_list . command

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    WHILE       偏移，并进入状态 8
    BREAK       偏移，并进入状态 9
    IF          偏移，并进入状态 10
    BROKEN      偏移，并进入状态 11
    CONTINUE    偏移，并进入状态 12
    CONTINUED   偏移，并进入状态 13
    RESTART     偏移，并进入状态 14
    RESTARTED   偏移，并进入状态 15
    REGO        偏移，并进入状态 16
    REWENT      偏移，并进入状态 17
    LI          偏移，并进入状态 18
    DEFAULT     偏移，并进入状态 19
    FOR         偏移，并进入状态 20
    GLOBAL      偏移，并进入状态 21
    NONLOCAL    偏移，并进入状态 22
    BLOCK       偏移，并进入状态 23
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    DEF         偏移，并进入状态 27
    RETURN      偏移，并进入状态 28
    CLASS       偏移，并进入状态 29
    TRY         偏移，并进入状态 30
    RAISE       偏移，并进入状态 31
    THROW       偏移，并进入状态 32
    IMPORT      偏移，并进入状态 33
    INCLUDE     偏移，并进入状态 34
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38
    DO          偏移，并进入状态 39
    ASSERT      偏移，并进入状态 40

    $default  使用规则 1 以归约 (command_block)

    command          转到状态 145
    top_exp          转到状态 44
    eq_number        转到状态 45
    call_number      转到状态 46
    lambda_exp       转到状态 47
    chose_exp        转到状态 48
    bool_or          转到状态 49
    bool_and         转到状态 50
    bool_not         转到状态 51
    third_number     转到状态 52
    bit_or_not       转到状态 53
    bit_or           转到状态 54
    bit_and          转到状态 55
    bit_move         转到状态 56
    second_number    转到状态 57
    first_number     转到状态 58
    negative         转到状态 59
    bit_not          转到状态 60
    zero_number      转到状态 61
    attribute        转到状态 62
    call_down        转到状态 63
    call_slice       转到状态 64
    iter_value       转到状态 65
    element          转到状态 66
    base_value       转到状态 67
    base_var_        转到状态 68
    base_var_token   转到状态 69
    base_string      转到状态 70
    nonlocal_token   转到状态 71
    global_token     转到状态 72
    default_token    转到状态 73
    return_exp       转到状态 74
    return_token     转到状态 75
    restarted_exp    转到状态 76
    restarted_token  转到状态 77
    restart_exp      转到状态 78
    restart_token    转到状态 79
    continued_exp    转到状态 80
    continued_token  转到状态 81
    continue_exp     转到状态 82
    continue_token   转到状态 83
    break_exp        转到状态 84
    break_token      转到状态 85
    broken_exp       转到状态 86
    broken_token     转到状态 87
    if_block         转到状态 88
    if_exp           转到状态 89
    block_block      转到状态 90
    block_exp        转到状态 91
    for_block        转到状态 92
    for_exp          转到状态 93
    include_exp      转到状态 94
    import_exp       转到状态 95
    raise_exp        转到状态 96
    try_block        转到状态 97
    try_exp          转到状态 98
    try_token        转到状态 99
    do_while_block   转到状态 100
    while_block      转到状态 101
    while_exp        转到状态 102
    class_block      转到状态 103
    class_exp        转到状态 104
    def_block        转到状态 105
    def_exp          转到状态 106


状态 43

    2 command_list: command .

    $default  使用规则 2 以归约 (command_list)


状态 44

    4 command: top_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 146


状态 45

   28 top_exp: eq_number .

    $default  使用规则 28 以归约 (top_exp)


状态 46

   29 eq_number: call_number .
   30          | call_number . EQ eq_number
   31          | call_number . AADD eq_number
   32          | call_number . ASUB eq_number
   33          | call_number . AMUL eq_number
   34          | call_number . ADIV eq_number
   35          | call_number . AMOD eq_number
   36          | call_number . AINTDIV eq_number
   37          | call_number . APOW eq_number
   38          | call_number . FADD
   40          | call_number . FSUB
   63 call_number: call_number . LB RB
   64            | call_number . LB arguments RB

    EQ       偏移，并进入状态 147
    LB       偏移，并进入状态 148
    AADD     偏移，并进入状态 149
    ASUB     偏移，并进入状态 150
    AMUL     偏移，并进入状态 151
    ADIV     偏移，并进入状态 152
    AMOD     偏移，并进入状态 153
    AINTDIV  偏移，并进入状态 154
    FADD     偏移，并进入状态 155
    FSUB     偏移，并进入状态 156
    APOW     偏移，并进入状态 157

    EQ        [使用规则 29 以归约 (eq_number)]
    LB        [使用规则 29 以归约 (eq_number)]
    FADD      [使用规则 29 以归约 (eq_number)]
    FSUB      [使用规则 29 以归约 (eq_number)]
    $default  使用规则 29 以归约 (eq_number)


状态 47

   62 call_number: lambda_exp .

    $default  使用规则 62 以归约 (call_number)


状态 48

   65 lambda_exp: chose_exp .
   69 chose_exp: chose_exp . IF chose_exp ELSE chose_exp

    IF  偏移，并进入状态 158

    $default  使用规则 65 以归约 (lambda_exp)


状态 49

   68 chose_exp: bool_or .
   71 bool_or: bool_or . OR bool_and

    OR  偏移，并进入状态 159

    $default  使用规则 68 以归约 (chose_exp)


状态 50

   70 bool_or: bool_and .
   73 bool_and: bool_and . AND bool_not

    AND  偏移，并进入状态 160

    $default  使用规则 70 以归约 (bool_or)


状态 51

   72 bool_and: bool_not .

    $default  使用规则 72 以归约 (bool_and)


状态 52

   74 bool_not: third_number .
   77 third_number: third_number . EQUAL bit_or_not
   78             | third_number . MORE bit_or_not
   79             | third_number . LESS bit_or_not
   80             | third_number . MOREEQ bit_or_not
   81             | third_number . LESSEQ bit_or_not
   82             | third_number . NOTEQ bit_or_not

    LESS    偏移，并进入状态 161
    MORE    偏移，并进入状态 162
    EQUAL   偏移，并进入状态 163
    MOREEQ  偏移，并进入状态 164
    LESSEQ  偏移，并进入状态 165
    NOTEQ   偏移，并进入状态 166

    $default  使用规则 74 以归约 (bool_not)


状态 53

   76 third_number: bit_or_not .
   84 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 167

    $default  使用规则 76 以归约 (third_number)


状态 54

   83 bit_or_not: bit_or .
   86 bit_or: bit_or . BITOR bit_and

    BITOR  偏移，并进入状态 168

    $default  使用规则 83 以归约 (bit_or_not)


状态 55

   85 bit_or: bit_and .
   88 bit_and: bit_and . BITAND bit_move

    BITAND  偏移，并进入状态 169

    $default  使用规则 85 以归约 (bit_or)


状态 56

   87 bit_and: bit_move .
   90 bit_move: bit_move . BITRIGHT second_number
   91         | bit_move . BITLEFT second_number

    BITRIGHT  偏移，并进入状态 170
    BITLEFT   偏移，并进入状态 171

    $default  使用规则 87 以归约 (bit_and)


状态 57

   89 bit_move: second_number .
   93 second_number: second_number . ADD first_number
   94              | second_number . SUB first_number

    ADD  偏移，并进入状态 172
    SUB  偏移，并进入状态 173

    SUB       [使用规则 89 以归约 (bit_move)]
    $default  使用规则 89 以归约 (bit_move)


状态 58

   92 second_number: first_number .
   96 first_number: first_number . MUL negative
   97             | first_number . DIV negative
   98             | first_number . MOD negative
   99             | first_number . INTDIV negative

    DIV     偏移，并进入状态 174
    MUL     偏移，并进入状态 175
    MOD     偏移，并进入状态 176
    INTDIV  偏移，并进入状态 177

    $default  使用规则 92 以归约 (second_number)


状态 59

   95 first_number: negative .

    $default  使用规则 95 以归约 (first_number)


状态 60

  100 negative: bit_not .

    $default  使用规则 100 以归约 (negative)


状态 61

  102 bit_not: zero_number .
  105 zero_number: zero_number . POW attribute
  106            | zero_number . LOG attribute
  107            | zero_number . SQRT attribute

    POW   偏移，并进入状态 178
    LOG   偏移，并进入状态 179
    SQRT  偏移，并进入状态 180

    $default  使用规则 102 以归约 (bit_not)


状态 62

  104 zero_number: attribute .
  109 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 181

    $default  使用规则 104 以归约 (zero_number)


状态 63

  108 attribute: call_down .

    $default  使用规则 108 以归约 (attribute)


状态 64

  110 call_down: call_slice .
  111          | call_slice . LI top_exp RI
  113 call_slice: call_slice . LI slice_arguments RI

    LI  偏移，并进入状态 182

    LI        [使用规则 110 以归约 (call_down)]
    $default  使用规则 110 以归约 (call_down)


状态 65

  112 call_slice: iter_value .

    $default  使用规则 112 以归约 (call_slice)


状态 66

  114 iter_value: element .

    $default  使用规则 114 以归约 (iter_value)


状态 67

  125 element: base_value .

    $default  使用规则 125 以归约 (element)


状态 68

  126 element: base_var_ .

    $default  使用规则 126 以归约 (element)


状态 69

  134 base_var_: base_var_token .

    $default  使用规则 134 以归约 (base_var_)


状态 70

  130 base_value: base_string .
  138 base_string: base_string . STRING

    STRING  偏移，并进入状态 183

    STRING    [使用规则 130 以归约 (base_value)]
    $default  使用规则 130 以归约 (base_value)


状态 71

   18 command: nonlocal_token . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 184


状态 72

   16 command: global_token . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 185


状态 73

   15 command: default_token . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 186


状态 74

   21 command: return_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 187


状态 75

  142 return_exp: return_token .
  143           | return_token . top_exp
  144           | return_token . top_exp element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    $default  使用规则 142 以归约 (return_exp)

    top_exp         转到状态 188
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 76

   12 command: restarted_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 189


状态 77

  146 restarted_exp: restarted_token .
  147              | restarted_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 146 以归约 (restarted_exp)

    element         转到状态 190
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 78

   11 command: restart_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 191


状态 79

  149 restart_exp: restart_token .
  150            | restart_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 149 以归约 (restart_exp)

    element         转到状态 192
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 80

   10 command: continued_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 193


状态 81

  152 continued_exp: continued_token .
  153              | continued_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 152 以归约 (continued_exp)

    element         转到状态 194
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 82

    9 command: continue_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 195


状态 83

  155 continue_exp: continue_token .
  156             | continue_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 155 以归约 (continue_exp)

    element         转到状态 196
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 84

    7 command: break_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 197


状态 85

  158 break_exp: break_token .
  159          | break_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 158 以归约 (break_exp)

    element         转到状态 198
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 86

    8 command: broken_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 199


状态 87

  161 broken_exp: broken_token .
  162           | broken_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 161 以归约 (broken_exp)

    element         转到状态 200
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 88

    6 command: if_block . stop_token
  165 if_block: if_block . elif_exp block

    ELSE   偏移，并进入状态 201
    ELIF   偏移，并进入状态 202
    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    elif_exp    转到状态 203
    stop_token  转到状态 204


状态 89

  164 if_block: if_exp . block

    LP  偏移，并进入状态 141

    block  转到状态 205


状态 90

   19 command: block_block . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 206


状态 91

  169 block_block: block_exp . block

    LP  偏移，并进入状态 141

    block  转到状态 207


状态 92

   17 command: for_block . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 208


状态 93

  171 for_block: for_exp . block

    LP  偏移，并进入状态 141

    block  转到状态 209


状态 94

   26 command: include_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 210


状态 95

   25 command: import_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 211


状态 96

   24 command: raise_exp . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 212


状态 97

   23 command: try_block . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 213


状态 98

  186 try_block: try_exp . block

    LP  偏移，并进入状态 141

    block  转到状态 214


状态 99

  187 try_exp: try_token . block EXCEPT AS element

    LP  偏移，并进入状态 141

    block  转到状态 215


状态 100

   27 command: do_while_block . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 216


状态 101

    5 command: while_block . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 217


状态 102

  191 while_block: while_exp . block

    LP  偏移，并进入状态 141

    block  转到状态 218


状态 103

   22 command: class_block . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 219


状态 104

  193 class_block: class_exp . block

    LP  偏移，并进入状态 141

    block  转到状态 220


状态 105

   20 command: def_block . stop_token

    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    stop_token  转到状态 221


状态 106

  196 def_block: def_exp . block

    LP  偏移，并进入状态 141

    block  转到状态 222


状态 107

  127 element: LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 223
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 108

  101 negative: SUB bit_not .

    $default  使用规则 101 以归约 (negative)


状态 109

   43 formal_parameter: MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 224
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 110

   66 lambda_exp: LB RB . LAMBDA chose_exp

    LAMBDA  偏移，并进入状态 225


状态 111

   44 formal_parameter: POW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 226
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 112

   42 formal_parameter: top_exp .
   45                 | top_exp . EQ top_exp
  127 element: LB top_exp . RB

    EQ  偏移，并进入状态 227
    RB  偏移，并进入状态 228

    RB        [使用规则 42 以归约 (formal_parameter)]
    $default  使用规则 42 以归约 (formal_parameter)


状态 113

   46 formal_parameter: formal_parameter . COMMA top_exp
   47                 | formal_parameter . COMMA MUL top_exp
   48                 | formal_parameter . COMMA POW top_exp
   49                 | formal_parameter . COMMA top_exp EQ top_exp
   67 lambda_exp: LB formal_parameter . RB LAMBDA chose_exp

    RB     偏移，并进入状态 229
    COMMA  偏移，并进入状态 230


状态 114

  123 dict_arguments: POW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 231
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 115

  135 base_var_: LI . top_exp RI base_var_token

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 232
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 116

  116 iter_value: LP dict_arguments . RP
  122 dict_arguments: dict_arguments . COMMA element COLON element
  124               | dict_arguments . COMMA POW top_exp

    RP     偏移，并进入状态 233
    COMMA  偏移，并进入状态 234


状态 117

  121 dict_arguments: element . COLON element

    COLON  偏移，并进入状态 235


状态 118

  192 while_exp: WHILE LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 236
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 119

  168 if_exp: IF LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 237
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 120

  202 stop_token: STOPN .

    $default  使用规则 202 以归约 (stop_token)


状态 121

  203 stop_token: STOPF .

    $default  使用规则 203 以归约 (stop_token)


状态 122

   13 command: REGO stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 13 以归约 (command)


状态 123

   14 command: REWENT stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 14 以归约 (command)


状态 124

  119 list_arguments: MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 240
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 125

  117 list_arguments: top_exp .
  135 base_var_: LI top_exp . RI base_var_token

    RI  偏移，并进入状态 241

    RI        [使用规则 117 以归约 (list_arguments)]
    $default  使用规则 117 以归约 (list_arguments)


状态 126

  115 iter_value: LI list_arguments . RI
  118 list_arguments: list_arguments . COMMA top_exp
  120               | list_arguments . COMMA MUL top_exp

    RI     偏移，并进入状态 242
    COMMA  偏移，并进入状态 243


状态 127

  141 default_token: DEFAULT base_var_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 244
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 128

  172 for_exp: FOR LB . COMMA COMMA RB
  173        | FOR LB . top_exp COMMA COMMA RB
  174        | FOR LB . COMMA top_exp COMMA RB
  175        | FOR LB . COMMA COMMA top_exp RB
  176        | FOR LB . top_exp COMMA COMMA top_exp RB
  177        | FOR LB . top_exp COMMA top_exp COMMA RB
  178        | FOR LB . COMMA top_exp COMMA top_exp RB
  179        | FOR LB . top_exp COMMA top_exp COMMA top_exp RB
  180        | FOR LB . element IN top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    COMMA       偏移，并进入状态 245
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 246
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 247
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 129

  140 global_token: GLOBAL base_var_token .

    $default  使用规则 140 以归约 (global_token)


状态 130

  139 nonlocal_token: NONLOCAL base_var_token .

    $default  使用规则 139 以归约 (nonlocal_token)


状态 131

  197 def_exp: DEF element . LB RB
  198        | DEF element . LB formal_parameter RB

    LB  偏移，并进入状态 248


状态 132

  194 class_exp: CLASS element . LB RB
  195          | CLASS element . LB arguments RB

    LB  偏移，并进入状态 249


状态 133

  183 raise_exp: RAISE top_exp . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 250
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 134

  184 raise_exp: THROW top_exp .

    $default  使用规则 184 以归约 (raise_exp)


状态 135

  182 import_exp: IMPORT top_exp . AS element

    AS  偏移，并进入状态 251


状态 136

  181 include_exp: INCLUDE top_exp .

    $default  使用规则 181 以归约 (include_exp)


状态 137

   75 bool_not: NOT third_number .
   77 third_number: third_number . EQUAL bit_or_not
   78             | third_number . MORE bit_or_not
   79             | third_number . LESS bit_or_not
   80             | third_number . MOREEQ bit_or_not
   81             | third_number . LESSEQ bit_or_not
   82             | third_number . NOTEQ bit_or_not

    LESS    偏移，并进入状态 161
    MORE    偏移，并进入状态 162
    EQUAL   偏移，并进入状态 163
    MOREEQ  偏移，并进入状态 164
    LESSEQ  偏移，并进入状态 165
    NOTEQ   偏移，并进入状态 166

    $default  使用规则 75 以归约 (bool_not)


状态 138

   39 eq_number: FADD call_number .
   63 call_number: call_number . LB RB
   64            | call_number . LB arguments RB

    LB  偏移，并进入状态 148

    LB        [使用规则 39 以归约 (eq_number)]
    $default  使用规则 39 以归约 (eq_number)


状态 139

   41 eq_number: FSUB call_number .
   63 call_number: call_number . LB RB
   64            | call_number . LB arguments RB

    LB  偏移，并进入状态 148

    LB        [使用规则 41 以归约 (eq_number)]
    $default  使用规则 41 以归约 (eq_number)


状态 140

  103 bit_not: BITNOT zero_number .
  105 zero_number: zero_number . POW attribute
  106            | zero_number . LOG attribute
  107            | zero_number . SQRT attribute

    POW   偏移，并进入状态 178
    LOG   偏移，并进入状态 179
    SQRT  偏移，并进入状态 180

    $default  使用规则 103 以归约 (bit_not)


状态 141

  199 block: LP . command_list RP
  200      | LP . block RP
  201      | LP . PASS RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 252
    WHILE       偏移，并进入状态 8
    BREAK       偏移，并进入状态 9
    IF          偏移，并进入状态 10
    BROKEN      偏移，并进入状态 11
    CONTINUE    偏移，并进入状态 12
    CONTINUED   偏移，并进入状态 13
    RESTART     偏移，并进入状态 14
    RESTARTED   偏移，并进入状态 15
    REGO        偏移，并进入状态 16
    REWENT      偏移，并进入状态 17
    LI          偏移，并进入状态 18
    DEFAULT     偏移，并进入状态 19
    FOR         偏移，并进入状态 20
    GLOBAL      偏移，并进入状态 21
    NONLOCAL    偏移，并进入状态 22
    BLOCK       偏移，并进入状态 23
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    DEF         偏移，并进入状态 27
    RETURN      偏移，并进入状态 28
    CLASS       偏移，并进入状态 29
    TRY         偏移，并进入状态 30
    RAISE       偏移，并进入状态 31
    THROW       偏移，并进入状态 32
    IMPORT      偏移，并进入状态 33
    INCLUDE     偏移，并进入状态 34
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38
    PASS        偏移，并进入状态 253
    DO          偏移，并进入状态 39
    ASSERT      偏移，并进入状态 40

    command_list     转到状态 254
    command          转到状态 43
    top_exp          转到状态 44
    eq_number        转到状态 45
    call_number      转到状态 46
    lambda_exp       转到状态 47
    chose_exp        转到状态 48
    bool_or          转到状态 49
    bool_and         转到状态 50
    bool_not         转到状态 51
    third_number     转到状态 52
    bit_or_not       转到状态 53
    bit_or           转到状态 54
    bit_and          转到状态 55
    bit_move         转到状态 56
    second_number    转到状态 57
    first_number     转到状态 58
    negative         转到状态 59
    bit_not          转到状态 60
    zero_number      转到状态 61
    attribute        转到状态 62
    call_down        转到状态 63
    call_slice       转到状态 64
    iter_value       转到状态 65
    element          转到状态 66
    base_value       转到状态 67
    base_var_        转到状态 68
    base_var_token   转到状态 69
    base_string      转到状态 70
    nonlocal_token   转到状态 71
    global_token     转到状态 72
    default_token    转到状态 73
    return_exp       转到状态 74
    return_token     转到状态 75
    restarted_exp    转到状态 76
    restarted_token  转到状态 77
    restart_exp      转到状态 78
    restart_token    转到状态 79
    continued_exp    转到状态 80
    continued_token  转到状态 81
    continue_exp     转到状态 82
    continue_token   转到状态 83
    break_exp        转到状态 84
    break_token      转到状态 85
    broken_exp       转到状态 86
    broken_token     转到状态 87
    if_block         转到状态 88
    if_exp           转到状态 89
    block_block      转到状态 90
    block_exp        转到状态 91
    for_block        转到状态 92
    for_exp          转到状态 93
    include_exp      转到状态 94
    import_exp       转到状态 95
    raise_exp        转到状态 96
    try_block        转到状态 97
    try_exp          转到状态 98
    try_token        转到状态 99
    do_while_block   转到状态 100
    while_block      转到状态 101
    while_exp        转到状态 102
    class_block      转到状态 103
    class_exp        转到状态 104
    def_block        转到状态 105
    def_exp          转到状态 106
    block            转到状态 255


状态 142

  189 do_while_block: DO block . while_exp
  190               | DO block . stop_token while_exp

    WHILE  偏移，并进入状态 8
    STOPN  偏移，并进入状态 120
    STOPF  偏移，并进入状态 121

    while_exp   转到状态 256
    stop_token  转到状态 257


状态 143

  185 raise_exp: ASSERT top_exp . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 258
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 144

    0 $accept: command_block $end .

    $default  接受


状态 145

    3 command_list: command_list command .

    $default  使用规则 3 以归约 (command_list)


状态 146

    4 command: top_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 4 以归约 (command)


状态 147

   30 eq_number: call_number EQ . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 259
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 148

   63 call_number: call_number LB . RB
   64            | call_number LB . arguments RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 260
    RB          偏移，并进入状态 261
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    POW         偏移，并进入状态 262
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 263
    eq_number       转到状态 45
    arguments       转到状态 264
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 265
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 149

   31 eq_number: call_number AADD . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 266
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 150

   32 eq_number: call_number ASUB . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 267
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 151

   33 eq_number: call_number AMUL . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 268
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 152

   34 eq_number: call_number ADIV . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 269
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 153

   35 eq_number: call_number AMOD . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 270
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 154

   36 eq_number: call_number AINTDIV . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 271
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 155

   38 eq_number: call_number FADD .

    $default  使用规则 38 以归约 (eq_number)


状态 156

   40 eq_number: call_number FSUB .

    $default  使用规则 40 以归约 (eq_number)


状态 157

   37 eq_number: call_number APOW . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 272
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 158

   69 chose_exp: chose_exp IF . chose_exp ELSE chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    chose_exp       转到状态 273
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 159

   71 bool_or: bool_or OR . bool_and

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    bool_and        转到状态 274
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 160

   73 bool_and: bool_and AND . bool_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    bool_not        转到状态 275
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 161

   79 third_number: third_number LESS . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 276
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 162

   78 third_number: third_number MORE . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 277
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 163

   77 third_number: third_number EQUAL . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 278
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 164

   80 third_number: third_number MOREEQ . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 279
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 165

   81 third_number: third_number LESSEQ . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 280
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 166

   82 third_number: third_number NOTEQ . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 281
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 167

   84 bit_or_not: bit_or_not BITNOTOR . bit_or

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or          转到状态 282
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 168

   86 bit_or: bit_or BITOR . bit_and

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_and         转到状态 283
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 169

   88 bit_and: bit_and BITAND . bit_move

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_move        转到状态 284
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 170

   90 bit_move: bit_move BITRIGHT . second_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    second_number   转到状态 285
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 171

   91 bit_move: bit_move BITLEFT . second_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    second_number   转到状态 286
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 172

   93 second_number: second_number ADD . first_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    first_number    转到状态 287
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 173

   94 second_number: second_number SUB . first_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    first_number    转到状态 288
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 174

   97 first_number: first_number DIV . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    negative        转到状态 289
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 175

   96 first_number: first_number MUL . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    negative        转到状态 290
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 176

   98 first_number: first_number MOD . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    negative        转到状态 291
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 177

   99 first_number: first_number INTDIV . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    negative        转到状态 292
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 178

  105 zero_number: zero_number POW . attribute

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    attribute       转到状态 293
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 179

  106 zero_number: zero_number LOG . attribute

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    attribute       转到状态 294
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 180

  107 zero_number: zero_number SQRT . attribute

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    attribute       转到状态 295
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 181

  109 attribute: attribute POINT . call_down

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    call_down       转到状态 296
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 182

  111 call_down: call_slice LI . top_exp RI
  113 call_slice: call_slice LI . slice_arguments RI

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp                转到状态 297
    eq_number              转到状态 45
    slice_arguments        转到状态 298
    slice_arguments_token  转到状态 299
    call_number            转到状态 46
    lambda_exp             转到状态 47
    chose_exp              转到状态 48
    bool_or                转到状态 49
    bool_and               转到状态 50
    bool_not               转到状态 51
    third_number           转到状态 52
    bit_or_not             转到状态 53
    bit_or                 转到状态 54
    bit_and                转到状态 55
    bit_move               转到状态 56
    second_number          转到状态 57
    first_number           转到状态 58
    negative               转到状态 59
    bit_not                转到状态 60
    zero_number            转到状态 61
    attribute              转到状态 62
    call_down              转到状态 63
    call_slice             转到状态 64
    iter_value             转到状态 65
    element                转到状态 66
    base_value             转到状态 67
    base_var_              转到状态 68
    base_var_token         转到状态 69
    base_string            转到状态 70


状态 183

  138 base_string: base_string STRING .

    $default  使用规则 138 以归约 (base_string)


状态 184

   18 command: nonlocal_token stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 18 以归约 (command)


状态 185

   16 command: global_token stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 16 以归约 (command)


状态 186

   15 command: default_token stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 15 以归约 (command)


状态 187

   21 command: return_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 21 以归约 (command)


状态 188

  143 return_exp: return_token top_exp .
  144           | return_token top_exp . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 143 以归约 (return_exp)

    element         转到状态 300
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 189

   12 command: restarted_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 12 以归约 (command)


状态 190

  147 restarted_exp: restarted_token element .

    $default  使用规则 147 以归约 (restarted_exp)


状态 191

   11 command: restart_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 11 以归约 (command)


状态 192

  150 restart_exp: restart_token element .

    $default  使用规则 150 以归约 (restart_exp)


状态 193

   10 command: continued_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 10 以归约 (command)


状态 194

  153 continued_exp: continued_token element .

    $default  使用规则 153 以归约 (continued_exp)


状态 195

    9 command: continue_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 9 以归约 (command)


状态 196

  156 continue_exp: continue_token element .

    $default  使用规则 156 以归约 (continue_exp)


状态 197

    7 command: break_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 7 以归约 (command)


状态 198

  159 break_exp: break_token element .

    $default  使用规则 159 以归约 (break_exp)


状态 199

    8 command: broken_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 8 以归约 (command)


状态 200

  162 broken_exp: broken_token element .

    $default  使用规则 162 以归约 (broken_exp)


状态 201

  167 elif_exp: ELSE .

    $default  使用规则 167 以归约 (elif_exp)


状态 202

  166 elif_exp: ELIF . LB top_exp RB

    LB  偏移，并进入状态 301


状态 203

  165 if_block: if_block elif_exp . block

    LP  偏移，并进入状态 141

    block  转到状态 302


状态 204

    6 command: if_block stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 6 以归约 (command)


状态 205

  164 if_block: if_exp block .

    $default  使用规则 164 以归约 (if_block)


状态 206

   19 command: block_block stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 19 以归约 (command)


状态 207

  169 block_block: block_exp block .

    $default  使用规则 169 以归约 (block_block)


状态 208

   17 command: for_block stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 17 以归约 (command)


状态 209

  171 for_block: for_exp block .

    $default  使用规则 171 以归约 (for_block)


状态 210

   26 command: include_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 26 以归约 (command)


状态 211

   25 command: import_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 25 以归约 (command)


状态 212

   24 command: raise_exp stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 24 以归约 (command)


状态 213

   23 command: try_block stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 23 以归约 (command)


状态 214

  186 try_block: try_exp block .

    $default  使用规则 186 以归约 (try_block)


状态 215

  187 try_exp: try_token block . EXCEPT AS element

    EXCEPT  偏移，并进入状态 303


状态 216

   27 command: do_while_block stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 27 以归约 (command)


状态 217

    5 command: while_block stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 5 以归约 (command)


状态 218

  191 while_block: while_exp block .

    $default  使用规则 191 以归约 (while_block)


状态 219

   22 command: class_block stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 22 以归约 (command)


状态 220

  193 class_block: class_exp block .

    $default  使用规则 193 以归约 (class_block)


状态 221

   20 command: def_block stop_token .
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    $default  使用规则 20 以归约 (command)


状态 222

  196 def_block: def_exp block .

    $default  使用规则 196 以归约 (def_block)


状态 223

  127 element: LB top_exp . RB

    RB  偏移，并进入状态 228


状态 224

   43 formal_parameter: MUL top_exp .

    $default  使用规则 43 以归约 (formal_parameter)


状态 225

   66 lambda_exp: LB RB LAMBDA . chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    chose_exp       转到状态 304
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 226

   44 formal_parameter: POW top_exp .

    $default  使用规则 44 以归约 (formal_parameter)


状态 227

   45 formal_parameter: top_exp EQ . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 305
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 228

  127 element: LB top_exp RB .

    $default  使用规则 127 以归约 (element)


状态 229

   67 lambda_exp: LB formal_parameter RB . LAMBDA chose_exp

    LAMBDA  偏移，并进入状态 306


状态 230

   46 formal_parameter: formal_parameter COMMA . top_exp
   47                 | formal_parameter COMMA . MUL top_exp
   48                 | formal_parameter COMMA . POW top_exp
   49                 | formal_parameter COMMA . top_exp EQ top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 307
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    POW         偏移，并进入状态 308
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 309
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 231

  123 dict_arguments: POW top_exp .

    $default  使用规则 123 以归约 (dict_arguments)


状态 232

  135 base_var_: LI top_exp . RI base_var_token

    RI  偏移，并进入状态 241


状态 233

  116 iter_value: LP dict_arguments RP .

    $default  使用规则 116 以归约 (iter_value)


状态 234

  122 dict_arguments: dict_arguments COMMA . element COLON element
  124               | dict_arguments COMMA . POW top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    POW         偏移，并进入状态 310
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 311
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 235

  121 dict_arguments: element COLON . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 312
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 236

  192 while_exp: WHILE LB top_exp . RB

    RB  偏移，并进入状态 313


状态 237

  168 if_exp: IF LB top_exp . RB

    RB  偏移，并进入状态 314


状态 238

  205 stop_token: stop_token STOPN .

    $default  使用规则 205 以归约 (stop_token)


状态 239

  204 stop_token: stop_token STOPF .

    $default  使用规则 204 以归约 (stop_token)


状态 240

  119 list_arguments: MUL top_exp .

    $default  使用规则 119 以归约 (list_arguments)


状态 241

  135 base_var_: LI top_exp RI . base_var_token

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 315


状态 242

  115 iter_value: LI list_arguments RI .

    $default  使用规则 115 以归约 (iter_value)


状态 243

  118 list_arguments: list_arguments COMMA . top_exp
  120               | list_arguments COMMA . MUL top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 316
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 317
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 244

  141 default_token: DEFAULT base_var_token element .

    $default  使用规则 141 以归约 (default_token)


状态 245

  172 for_exp: FOR LB COMMA . COMMA RB
  174        | FOR LB COMMA . top_exp COMMA RB
  175        | FOR LB COMMA . COMMA top_exp RB
  178        | FOR LB COMMA . top_exp COMMA top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    COMMA       偏移，并进入状态 318
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 319
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 246

  173 for_exp: FOR LB top_exp . COMMA COMMA RB
  176        | FOR LB top_exp . COMMA COMMA top_exp RB
  177        | FOR LB top_exp . COMMA top_exp COMMA RB
  179        | FOR LB top_exp . COMMA top_exp COMMA top_exp RB

    COMMA  偏移，并进入状态 320


状态 247

  114 iter_value: element .
  180 for_exp: FOR LB element . IN top_exp RB

    IN  偏移，并进入状态 321

    $default  使用规则 114 以归约 (iter_value)


状态 248

  197 def_exp: DEF element LB . RB
  198        | DEF element LB . formal_parameter RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 109
    RB          偏移，并进入状态 322
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    POW         偏移，并进入状态 111
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp           转到状态 323
    eq_number         转到状态 45
    formal_parameter  转到状态 324
    call_number       转到状态 46
    lambda_exp        转到状态 47
    chose_exp         转到状态 48
    bool_or           转到状态 49
    bool_and          转到状态 50
    bool_not          转到状态 51
    third_number      转到状态 52
    bit_or_not        转到状态 53
    bit_or            转到状态 54
    bit_and           转到状态 55
    bit_move          转到状态 56
    second_number     转到状态 57
    first_number      转到状态 58
    negative          转到状态 59
    bit_not           转到状态 60
    zero_number       转到状态 61
    attribute         转到状态 62
    call_down         转到状态 63
    call_slice        转到状态 64
    iter_value        转到状态 65
    element           转到状态 66
    base_value        转到状态 67
    base_var_         转到状态 68
    base_var_token    转到状态 69
    base_string       转到状态 70


状态 249

  194 class_exp: CLASS element LB . RB
  195          | CLASS element LB . arguments RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 260
    RB          偏移，并进入状态 325
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    POW         偏移，并进入状态 262
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 263
    eq_number       转到状态 45
    arguments       转到状态 326
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 265
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 250

  183 raise_exp: RAISE top_exp top_exp .

    $default  使用规则 183 以归约 (raise_exp)


状态 251

  182 import_exp: IMPORT top_exp AS . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 327
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 252

  116 iter_value: LP . dict_arguments RP
  199 block: LP . command_list RP
  200      | LP . block RP
  201      | LP . PASS RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 252
    WHILE       偏移，并进入状态 8
    POW         偏移，并进入状态 114
    BREAK       偏移，并进入状态 9
    IF          偏移，并进入状态 10
    BROKEN      偏移，并进入状态 11
    CONTINUE    偏移，并进入状态 12
    CONTINUED   偏移，并进入状态 13
    RESTART     偏移，并进入状态 14
    RESTARTED   偏移，并进入状态 15
    REGO        偏移，并进入状态 16
    REWENT      偏移，并进入状态 17
    LI          偏移，并进入状态 18
    DEFAULT     偏移，并进入状态 19
    FOR         偏移，并进入状态 20
    GLOBAL      偏移，并进入状态 21
    NONLOCAL    偏移，并进入状态 22
    BLOCK       偏移，并进入状态 23
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    DEF         偏移，并进入状态 27
    RETURN      偏移，并进入状态 28
    CLASS       偏移，并进入状态 29
    TRY         偏移，并进入状态 30
    RAISE       偏移，并进入状态 31
    THROW       偏移，并进入状态 32
    IMPORT      偏移，并进入状态 33
    INCLUDE     偏移，并进入状态 34
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38
    PASS        偏移，并进入状态 253
    DO          偏移，并进入状态 39
    ASSERT      偏移，并进入状态 40

    command_list     转到状态 254
    command          转到状态 43
    top_exp          转到状态 44
    eq_number        转到状态 45
    call_number      转到状态 46
    lambda_exp       转到状态 47
    chose_exp        转到状态 48
    bool_or          转到状态 49
    bool_and         转到状态 50
    bool_not         转到状态 51
    third_number     转到状态 52
    bit_or_not       转到状态 53
    bit_or           转到状态 54
    bit_and          转到状态 55
    bit_move         转到状态 56
    second_number    转到状态 57
    first_number     转到状态 58
    negative         转到状态 59
    bit_not          转到状态 60
    zero_number      转到状态 61
    attribute        转到状态 62
    call_down        转到状态 63
    call_slice       转到状态 64
    iter_value       转到状态 65
    dict_arguments   转到状态 116
    element          转到状态 328
    base_value       转到状态 67
    base_var_        转到状态 68
    base_var_token   转到状态 69
    base_string      转到状态 70
    nonlocal_token   转到状态 71
    global_token     转到状态 72
    default_token    转到状态 73
    return_exp       转到状态 74
    return_token     转到状态 75
    restarted_exp    转到状态 76
    restarted_token  转到状态 77
    restart_exp      转到状态 78
    restart_token    转到状态 79
    continued_exp    转到状态 80
    continued_token  转到状态 81
    continue_exp     转到状态 82
    continue_token   转到状态 83
    break_exp        转到状态 84
    break_token      转到状态 85
    broken_exp       转到状态 86
    broken_token     转到状态 87
    if_block         转到状态 88
    if_exp           转到状态 89
    block_block      转到状态 90
    block_exp        转到状态 91
    for_block        转到状态 92
    for_exp          转到状态 93
    include_exp      转到状态 94
    import_exp       转到状态 95
    raise_exp        转到状态 96
    try_block        转到状态 97
    try_exp          转到状态 98
    try_token        转到状态 99
    do_while_block   转到状态 100
    while_block      转到状态 101
    while_exp        转到状态 102
    class_block      转到状态 103
    class_exp        转到状态 104
    def_block        转到状态 105
    def_exp          转到状态 106
    block            转到状态 255


状态 253

  201 block: LP PASS . RP

    RP  偏移，并进入状态 329


状态 254

    3 command_list: command_list . command
  199 block: LP command_list . RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    RP          偏移，并进入状态 330
    LP          偏移，并进入状态 7
    WHILE       偏移，并进入状态 8
    BREAK       偏移，并进入状态 9
    IF          偏移，并进入状态 10
    BROKEN      偏移，并进入状态 11
    CONTINUE    偏移，并进入状态 12
    CONTINUED   偏移，并进入状态 13
    RESTART     偏移，并进入状态 14
    RESTARTED   偏移，并进入状态 15
    REGO        偏移，并进入状态 16
    REWENT      偏移，并进入状态 17
    LI          偏移，并进入状态 18
    DEFAULT     偏移，并进入状态 19
    FOR         偏移，并进入状态 20
    GLOBAL      偏移，并进入状态 21
    NONLOCAL    偏移，并进入状态 22
    BLOCK       偏移，并进入状态 23
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    DEF         偏移，并进入状态 27
    RETURN      偏移，并进入状态 28
    CLASS       偏移，并进入状态 29
    TRY         偏移，并进入状态 30
    RAISE       偏移，并进入状态 31
    THROW       偏移，并进入状态 32
    IMPORT      偏移，并进入状态 33
    INCLUDE     偏移，并进入状态 34
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38
    DO          偏移，并进入状态 39
    ASSERT      偏移，并进入状态 40

    command          转到状态 145
    top_exp          转到状态 44
    eq_number        转到状态 45
    call_number      转到状态 46
    lambda_exp       转到状态 47
    chose_exp        转到状态 48
    bool_or          转到状态 49
    bool_and         转到状态 50
    bool_not         转到状态 51
    third_number     转到状态 52
    bit_or_not       转到状态 53
    bit_or           转到状态 54
    bit_and          转到状态 55
    bit_move         转到状态 56
    second_number    转到状态 57
    first_number     转到状态 58
    negative         转到状态 59
    bit_not          转到状态 60
    zero_number      转到状态 61
    attribute        转到状态 62
    call_down        转到状态 63
    call_slice       转到状态 64
    iter_value       转到状态 65
    element          转到状态 66
    base_value       转到状态 67
    base_var_        转到状态 68
    base_var_token   转到状态 69
    base_string      转到状态 70
    nonlocal_token   转到状态 71
    global_token     转到状态 72
    default_token    转到状态 73
    return_exp       转到状态 74
    return_token     转到状态 75
    restarted_exp    转到状态 76
    restarted_token  转到状态 77
    restart_exp      转到状态 78
    restart_token    转到状态 79
    continued_exp    转到状态 80
    continued_token  转到状态 81
    continue_exp     转到状态 82
    continue_token   转到状态 83
    break_exp        转到状态 84
    break_token      转到状态 85
    broken_exp       转到状态 86
    broken_token     转到状态 87
    if_block         转到状态 88
    if_exp           转到状态 89
    block_block      转到状态 90
    block_exp        转到状态 91
    for_block        转到状态 92
    for_exp          转到状态 93
    include_exp      转到状态 94
    import_exp       转到状态 95
    raise_exp        转到状态 96
    try_block        转到状态 97
    try_exp          转到状态 98
    try_token        转到状态 99
    do_while_block   转到状态 100
    while_block      转到状态 101
    while_exp        转到状态 102
    class_block      转到状态 103
    class_exp        转到状态 104
    def_block        转到状态 105
    def_exp          转到状态 106


状态 255

  200 block: LP block . RP

    RP  偏移，并进入状态 331


状态 256

  189 do_while_block: DO block while_exp .

    $default  使用规则 189 以归约 (do_while_block)


状态 257

  190 do_while_block: DO block stop_token . while_exp
  204 stop_token: stop_token . STOPF
  205           | stop_token . STOPN

    WHILE  偏移，并进入状态 8
    STOPN  偏移，并进入状态 238
    STOPF  偏移，并进入状态 239

    while_exp  转到状态 332


状态 258

  185 raise_exp: ASSERT top_exp top_exp .

    $default  使用规则 185 以归约 (raise_exp)


状态 259

   30 eq_number: call_number EQ eq_number .

    $default  使用规则 30 以归约 (eq_number)


状态 260

   54 arguments: MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 333
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 261

   63 call_number: call_number LB RB .

    $default  使用规则 63 以归约 (call_number)


状态 262

   56 arguments: POW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 334
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 263

   50 arguments: top_exp .

    $default  使用规则 50 以归约 (arguments)


状态 264

   51 arguments: arguments . COMMA top_exp
   53          | arguments . COMMA base_var_ EQ top_exp
   55          | arguments . COMMA MUL top_exp
   57          | arguments . COMMA POW top_exp
   64 call_number: call_number LB arguments . RB

    RB     偏移，并进入状态 335
    COMMA  偏移，并进入状态 336


状态 265

   52 arguments: base_var_ . EQ top_exp
  126 element: base_var_ .

    EQ  偏移，并进入状态 337

    EQ        [使用规则 126 以归约 (element)]
    $default  使用规则 126 以归约 (element)


状态 266

   31 eq_number: call_number AADD eq_number .

    $default  使用规则 31 以归约 (eq_number)


状态 267

   32 eq_number: call_number ASUB eq_number .

    $default  使用规则 32 以归约 (eq_number)


状态 268

   33 eq_number: call_number AMUL eq_number .

    $default  使用规则 33 以归约 (eq_number)


状态 269

   34 eq_number: call_number ADIV eq_number .

    $default  使用规则 34 以归约 (eq_number)


状态 270

   35 eq_number: call_number AMOD eq_number .

    $default  使用规则 35 以归约 (eq_number)


状态 271

   36 eq_number: call_number AINTDIV eq_number .

    $default  使用规则 36 以归约 (eq_number)


状态 272

   37 eq_number: call_number APOW eq_number .

    $default  使用规则 37 以归约 (eq_number)


状态 273

   69 chose_exp: chose_exp . IF chose_exp ELSE chose_exp
   69          | chose_exp IF chose_exp . ELSE chose_exp

    IF    偏移，并进入状态 158
    ELSE  偏移，并进入状态 338


状态 274

   71 bool_or: bool_or OR bool_and .
   73 bool_and: bool_and . AND bool_not

    AND  偏移，并进入状态 160

    $default  使用规则 71 以归约 (bool_or)


状态 275

   73 bool_and: bool_and AND bool_not .

    $default  使用规则 73 以归约 (bool_and)


状态 276

   79 third_number: third_number LESS bit_or_not .
   84 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 167

    $default  使用规则 79 以归约 (third_number)


状态 277

   78 third_number: third_number MORE bit_or_not .
   84 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 167

    $default  使用规则 78 以归约 (third_number)


状态 278

   77 third_number: third_number EQUAL bit_or_not .
   84 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 167

    $default  使用规则 77 以归约 (third_number)


状态 279

   80 third_number: third_number MOREEQ bit_or_not .
   84 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 167

    $default  使用规则 80 以归约 (third_number)


状态 280

   81 third_number: third_number LESSEQ bit_or_not .
   84 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 167

    $default  使用规则 81 以归约 (third_number)


状态 281

   82 third_number: third_number NOTEQ bit_or_not .
   84 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 167

    $default  使用规则 82 以归约 (third_number)


状态 282

   84 bit_or_not: bit_or_not BITNOTOR bit_or .
   86 bit_or: bit_or . BITOR bit_and

    BITOR  偏移，并进入状态 168

    $default  使用规则 84 以归约 (bit_or_not)


状态 283

   86 bit_or: bit_or BITOR bit_and .
   88 bit_and: bit_and . BITAND bit_move

    BITAND  偏移，并进入状态 169

    $default  使用规则 86 以归约 (bit_or)


状态 284

   88 bit_and: bit_and BITAND bit_move .
   90 bit_move: bit_move . BITRIGHT second_number
   91         | bit_move . BITLEFT second_number

    BITRIGHT  偏移，并进入状态 170
    BITLEFT   偏移，并进入状态 171

    $default  使用规则 88 以归约 (bit_and)


状态 285

   90 bit_move: bit_move BITRIGHT second_number .
   93 second_number: second_number . ADD first_number
   94              | second_number . SUB first_number

    ADD  偏移，并进入状态 172
    SUB  偏移，并进入状态 173

    SUB       [使用规则 90 以归约 (bit_move)]
    $default  使用规则 90 以归约 (bit_move)


状态 286

   91 bit_move: bit_move BITLEFT second_number .
   93 second_number: second_number . ADD first_number
   94              | second_number . SUB first_number

    ADD  偏移，并进入状态 172
    SUB  偏移，并进入状态 173

    SUB       [使用规则 91 以归约 (bit_move)]
    $default  使用规则 91 以归约 (bit_move)


状态 287

   93 second_number: second_number ADD first_number .
   96 first_number: first_number . MUL negative
   97             | first_number . DIV negative
   98             | first_number . MOD negative
   99             | first_number . INTDIV negative

    DIV     偏移，并进入状态 174
    MUL     偏移，并进入状态 175
    MOD     偏移，并进入状态 176
    INTDIV  偏移，并进入状态 177

    $default  使用规则 93 以归约 (second_number)


状态 288

   94 second_number: second_number SUB first_number .
   96 first_number: first_number . MUL negative
   97             | first_number . DIV negative
   98             | first_number . MOD negative
   99             | first_number . INTDIV negative

    DIV     偏移，并进入状态 174
    MUL     偏移，并进入状态 175
    MOD     偏移，并进入状态 176
    INTDIV  偏移，并进入状态 177

    $default  使用规则 94 以归约 (second_number)


状态 289

   97 first_number: first_number DIV negative .

    $default  使用规则 97 以归约 (first_number)


状态 290

   96 first_number: first_number MUL negative .

    $default  使用规则 96 以归约 (first_number)


状态 291

   98 first_number: first_number MOD negative .

    $default  使用规则 98 以归约 (first_number)


状态 292

   99 first_number: first_number INTDIV negative .

    $default  使用规则 99 以归约 (first_number)


状态 293

  105 zero_number: zero_number POW attribute .
  109 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 181

    $default  使用规则 105 以归约 (zero_number)


状态 294

  106 zero_number: zero_number LOG attribute .
  109 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 181

    $default  使用规则 106 以归约 (zero_number)


状态 295

  107 zero_number: zero_number SQRT attribute .
  109 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 181

    $default  使用规则 107 以归约 (zero_number)


状态 296

  109 attribute: attribute POINT call_down .

    $default  使用规则 109 以归约 (attribute)


状态 297

   61 slice_arguments_token: top_exp . COLON
  111 call_down: call_slice LI top_exp . RI

    RI     偏移，并进入状态 339
    COLON  偏移，并进入状态 340


状态 298

   59 slice_arguments: slice_arguments . slice_arguments_token
   60                | slice_arguments . top_exp
  113 call_slice: call_slice LI slice_arguments . RI

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    RI          偏移，并进入状态 341
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp                转到状态 342
    eq_number              转到状态 45
    slice_arguments_token  转到状态 343
    call_number            转到状态 46
    lambda_exp             转到状态 47
    chose_exp              转到状态 48
    bool_or                转到状态 49
    bool_and               转到状态 50
    bool_not               转到状态 51
    third_number           转到状态 52
    bit_or_not             转到状态 53
    bit_or                 转到状态 54
    bit_and                转到状态 55
    bit_move               转到状态 56
    second_number          转到状态 57
    first_number           转到状态 58
    negative               转到状态 59
    bit_not                转到状态 60
    zero_number            转到状态 61
    attribute              转到状态 62
    call_down              转到状态 63
    call_slice             转到状态 64
    iter_value             转到状态 65
    element                转到状态 66
    base_value             转到状态 67
    base_var_              转到状态 68
    base_var_token         转到状态 69
    base_string            转到状态 70


状态 299

   58 slice_arguments: slice_arguments_token .

    $default  使用规则 58 以归约 (slice_arguments)


状态 300

  144 return_exp: return_token top_exp element .

    $default  使用规则 144 以归约 (return_exp)


状态 301

  166 elif_exp: ELIF LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 344
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 302

  165 if_block: if_block elif_exp block .

    $default  使用规则 165 以归约 (if_block)


状态 303

  187 try_exp: try_token block EXCEPT . AS element

    AS  偏移，并进入状态 345


状态 304

   66 lambda_exp: LB RB LAMBDA chose_exp .
   69 chose_exp: chose_exp . IF chose_exp ELSE chose_exp

    IF  偏移，并进入状态 158

    $default  使用规则 66 以归约 (lambda_exp)


状态 305

   45 formal_parameter: top_exp EQ top_exp .

    $default  使用规则 45 以归约 (formal_parameter)


状态 306

   67 lambda_exp: LB formal_parameter RB LAMBDA . chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    chose_exp       转到状态 346
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 307

   47 formal_parameter: formal_parameter COMMA MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 347
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 308

   48 formal_parameter: formal_parameter COMMA POW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 348
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 309

   46 formal_parameter: formal_parameter COMMA top_exp .
   49                 | formal_parameter COMMA top_exp . EQ top_exp

    EQ  偏移，并进入状态 349

    $default  使用规则 46 以归约 (formal_parameter)


状态 310

  124 dict_arguments: dict_arguments COMMA POW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 350
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 311

  122 dict_arguments: dict_arguments COMMA element . COLON element

    COLON  偏移，并进入状态 351


状态 312

  121 dict_arguments: element COLON element .

    $default  使用规则 121 以归约 (dict_arguments)


状态 313

  192 while_exp: WHILE LB top_exp RB .

    $default  使用规则 192 以归约 (while_exp)


状态 314

  168 if_exp: IF LB top_exp RB .

    $default  使用规则 168 以归约 (if_exp)


状态 315

  135 base_var_: LI top_exp RI base_var_token .

    $default  使用规则 135 以归约 (base_var_)


状态 316

  120 list_arguments: list_arguments COMMA MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 352
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 317

  118 list_arguments: list_arguments COMMA top_exp .

    $default  使用规则 118 以归约 (list_arguments)


状态 318

  172 for_exp: FOR LB COMMA COMMA . RB
  175        | FOR LB COMMA COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 353
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 354
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 319

  174 for_exp: FOR LB COMMA top_exp . COMMA RB
  178        | FOR LB COMMA top_exp . COMMA top_exp RB

    COMMA  偏移，并进入状态 355


状态 320

  173 for_exp: FOR LB top_exp COMMA . COMMA RB
  176        | FOR LB top_exp COMMA . COMMA top_exp RB
  177        | FOR LB top_exp COMMA . top_exp COMMA RB
  179        | FOR LB top_exp COMMA . top_exp COMMA top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    COMMA       偏移，并进入状态 356
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 357
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 321

  180 for_exp: FOR LB element IN . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 358
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 322

  197 def_exp: DEF element LB RB .

    $default  使用规则 197 以归约 (def_exp)


状态 323

   42 formal_parameter: top_exp .
   45                 | top_exp . EQ top_exp

    EQ  偏移，并进入状态 227

    $default  使用规则 42 以归约 (formal_parameter)


状态 324

   46 formal_parameter: formal_parameter . COMMA top_exp
   47                 | formal_parameter . COMMA MUL top_exp
   48                 | formal_parameter . COMMA POW top_exp
   49                 | formal_parameter . COMMA top_exp EQ top_exp
  198 def_exp: DEF element LB formal_parameter . RB

    RB     偏移，并进入状态 359
    COMMA  偏移，并进入状态 230


状态 325

  194 class_exp: CLASS element LB RB .

    $default  使用规则 194 以归约 (class_exp)


状态 326

   51 arguments: arguments . COMMA top_exp
   53          | arguments . COMMA base_var_ EQ top_exp
   55          | arguments . COMMA MUL top_exp
   57          | arguments . COMMA POW top_exp
  195 class_exp: CLASS element LB arguments . RB

    RB     偏移，并进入状态 360
    COMMA  偏移，并进入状态 336


状态 327

  182 import_exp: IMPORT top_exp AS element .

    $default  使用规则 182 以归约 (import_exp)


状态 328

  114 iter_value: element .
  121 dict_arguments: element . COLON element

    COLON  偏移，并进入状态 235

    $default  使用规则 114 以归约 (iter_value)


状态 329

  201 block: LP PASS RP .

    $default  使用规则 201 以归约 (block)


状态 330

  199 block: LP command_list RP .

    $default  使用规则 199 以归约 (block)


状态 331

  200 block: LP block RP .

    $default  使用规则 200 以归约 (block)


状态 332

  190 do_while_block: DO block stop_token while_exp .

    $default  使用规则 190 以归约 (do_while_block)


状态 333

   54 arguments: MUL top_exp .

    $default  使用规则 54 以归约 (arguments)


状态 334

   56 arguments: POW top_exp .

    $default  使用规则 56 以归约 (arguments)


状态 335

   64 call_number: call_number LB arguments RB .

    $default  使用规则 64 以归约 (call_number)


状态 336

   51 arguments: arguments COMMA . top_exp
   53          | arguments COMMA . base_var_ EQ top_exp
   55          | arguments COMMA . MUL top_exp
   57          | arguments COMMA . POW top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 361
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    POW         偏移，并进入状态 362
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 363
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 364
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 337

   52 arguments: base_var_ EQ . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 365
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 338

   69 chose_exp: chose_exp IF chose_exp ELSE . chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    chose_exp       转到状态 366
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 339

  111 call_down: call_slice LI top_exp RI .

    $default  使用规则 111 以归约 (call_down)


状态 340

   61 slice_arguments_token: top_exp COLON .

    $default  使用规则 61 以归约 (slice_arguments_token)


状态 341

  113 call_slice: call_slice LI slice_arguments RI .

    $default  使用规则 113 以归约 (call_slice)


状态 342

   60 slice_arguments: slice_arguments top_exp .
   61 slice_arguments_token: top_exp . COLON

    COLON  偏移，并进入状态 340

    $default  使用规则 60 以归约 (slice_arguments)


状态 343

   59 slice_arguments: slice_arguments slice_arguments_token .

    $default  使用规则 59 以归约 (slice_arguments)


状态 344

  166 elif_exp: ELIF LB top_exp . RB

    RB  偏移，并进入状态 367


状态 345

  187 try_exp: try_token block EXCEPT AS . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 368
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 346

   67 lambda_exp: LB formal_parameter RB LAMBDA chose_exp .
   69 chose_exp: chose_exp . IF chose_exp ELSE chose_exp

    IF  偏移，并进入状态 158

    $default  使用规则 67 以归约 (lambda_exp)


状态 347

   47 formal_parameter: formal_parameter COMMA MUL top_exp .

    $default  使用规则 47 以归约 (formal_parameter)


状态 348

   48 formal_parameter: formal_parameter COMMA POW top_exp .

    $default  使用规则 48 以归约 (formal_parameter)


状态 349

   49 formal_parameter: formal_parameter COMMA top_exp EQ . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 369
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 350

  124 dict_arguments: dict_arguments COMMA POW top_exp .

    $default  使用规则 124 以归约 (dict_arguments)


状态 351

  122 dict_arguments: dict_arguments COMMA element COLON . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 115
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 370
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 352

  120 list_arguments: list_arguments COMMA MUL top_exp .

    $default  使用规则 120 以归约 (list_arguments)


状态 353

  172 for_exp: FOR LB COMMA COMMA RB .

    $default  使用规则 172 以归约 (for_exp)


状态 354

  175 for_exp: FOR LB COMMA COMMA top_exp . RB

    RB  偏移，并进入状态 371


状态 355

  174 for_exp: FOR LB COMMA top_exp COMMA . RB
  178        | FOR LB COMMA top_exp COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 372
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 373
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 356

  173 for_exp: FOR LB top_exp COMMA COMMA . RB
  176        | FOR LB top_exp COMMA COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 374
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 375
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 357

  177 for_exp: FOR LB top_exp COMMA top_exp . COMMA RB
  179        | FOR LB top_exp COMMA top_exp . COMMA top_exp RB

    COMMA  偏移，并进入状态 376


状态 358

  180 for_exp: FOR LB element IN top_exp . RB

    RB  偏移，并进入状态 377


状态 359

  198 def_exp: DEF element LB formal_parameter RB .

    $default  使用规则 198 以归约 (def_exp)


状态 360

  195 class_exp: CLASS element LB arguments RB .

    $default  使用规则 195 以归约 (class_exp)


状态 361

   55 arguments: arguments COMMA MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 378
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 362

   57 arguments: arguments COMMA POW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 379
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 363

   51 arguments: arguments COMMA top_exp .

    $default  使用规则 51 以归约 (arguments)


状态 364

   53 arguments: arguments COMMA base_var_ . EQ top_exp
  126 element: base_var_ .

    EQ  偏移，并进入状态 380

    EQ        [使用规则 126 以归约 (element)]
    $default  使用规则 126 以归约 (element)


状态 365

   52 arguments: base_var_ EQ top_exp .

    $default  使用规则 52 以归约 (arguments)


状态 366

   69 chose_exp: chose_exp . IF chose_exp ELSE chose_exp
   69          | chose_exp IF chose_exp ELSE chose_exp .

    IF  偏移，并进入状态 158

    IF        [使用规则 69 以归约 (chose_exp)]
    $default  使用规则 69 以归约 (chose_exp)


状态 367

  166 elif_exp: ELIF LB top_exp RB .

    $default  使用规则 166 以归约 (elif_exp)


状态 368

  187 try_exp: try_token block EXCEPT AS element .

    $default  使用规则 187 以归约 (try_exp)


状态 369

   49 formal_parameter: formal_parameter COMMA top_exp EQ top_exp .

    $default  使用规则 49 以归约 (formal_parameter)


状态 370

  122 dict_arguments: dict_arguments COMMA element COLON element .

    $default  使用规则 122 以归约 (dict_arguments)


状态 371

  175 for_exp: FOR LB COMMA COMMA top_exp RB .

    $default  使用规则 175 以归约 (for_exp)


状态 372

  174 for_exp: FOR LB COMMA top_exp COMMA RB .

    $default  使用规则 174 以归约 (for_exp)


状态 373

  178 for_exp: FOR LB COMMA top_exp COMMA top_exp . RB

    RB  偏移，并进入状态 381


状态 374

  173 for_exp: FOR LB top_exp COMMA COMMA RB .

    $default  使用规则 173 以归约 (for_exp)


状态 375

  176 for_exp: FOR LB top_exp COMMA COMMA top_exp . RB

    RB  偏移，并进入状态 382


状态 376

  177 for_exp: FOR LB top_exp COMMA top_exp COMMA . RB
  179        | FOR LB top_exp COMMA top_exp COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 383
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 384
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 377

  180 for_exp: FOR LB element IN top_exp RB .

    $default  使用规则 180 以归约 (for_exp)


状态 378

   55 arguments: arguments COMMA MUL top_exp .

    $default  使用规则 55 以归约 (arguments)


状态 379

   57 arguments: arguments COMMA POW top_exp .

    $default  使用规则 57 以归约 (arguments)


状态 380

   53 arguments: arguments COMMA base_var_ EQ . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 385
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 381

  178 for_exp: FOR LB COMMA top_exp COMMA top_exp RB .

    $default  使用规则 178 以归约 (for_exp)


状态 382

  176 for_exp: FOR LB top_exp COMMA COMMA top_exp RB .

    $default  使用规则 176 以归约 (for_exp)


状态 383

  177 for_exp: FOR LB top_exp COMMA top_exp COMMA RB .

    $default  使用规则 177 以归约 (for_exp)


状态 384

  179 for_exp: FOR LB top_exp COMMA top_exp COMMA top_exp . RB

    RB  偏移，并进入状态 386


状态 385

   53 arguments: arguments COMMA base_var_ EQ top_exp .

    $default  使用规则 53 以归约 (arguments)


状态 386

  179 for_exp: FOR LB top_exp COMMA top_exp COMMA top_exp RB .

    $default  使用规则 179 以归约 (for_exp)
