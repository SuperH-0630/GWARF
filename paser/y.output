终端机在文法中未使用

    INDENTA


状态 46冲突：4 项偏移/归约
状态 57冲突：1 项偏移/归约
状态 64冲突：1 项偏移/归约
状态 70冲突：1 项偏移/归约
状态 111冲突：1 项偏移/归约
状态 122冲突：1 项偏移/归约
状态 135冲突：1 项偏移/归约
状态 136冲突：1 项偏移/归约
状态 258冲突：1 项偏移/归约
状态 278冲突：1 项偏移/归约
状态 279冲突：1 项偏移/归约
状态 318冲突：1 项偏移/归约
状态 348冲突：1 项偏移/归约
状态 350冲突：1 项偏移/归约


语法

    0 $accept: command_block $end

    1 command_block: command_list

    2 command_list: command
    3             | command_list command

    4 command: top_exp stop_token
    5        | while_block stop_token
    6        | if_block stop_token
    7        | break_exp stop_token
    8        | broken_exp stop_token
    9        | continue_exp stop_token
   10        | continued_exp stop_token
   11        | restart_exp stop_token
   12        | restarted_exp stop_token
   13        | REGO stop_token
   14        | REWENT stop_token
   15        | default_token stop_token
   16        | global_token stop_token
   17        | for_block stop_token
   18        | nonlocal_token stop_token
   19        | block_block stop_token
   20        | def_block stop_token
   21        | return_exp stop_token
   22        | class_block stop_token
   23        | try_block stop_token
   24        | raise_exp stop_token
   25        | import_exp stop_token
   26        | include_exp stop_token
   27        | do_while_block stop_token

   28 top_exp: eq_number

   29 eq_number: call_number
   30          | call_number EQ eq_number
   31          | call_number AADD eq_number
   32          | call_number ASUB eq_number
   33          | call_number AMUL eq_number
   34          | call_number ADIV eq_number
   35          | call_number AMOD eq_number
   36          | call_number AINTDIV eq_number
   37          | call_number APOW eq_number
   38          | call_number FADD
   39          | FADD call_number
   40          | call_number FSUB
   41          | FSUB call_number

   42 formal_parameter: top_exp
   43                 | MUL top_exp
   44                 | top_exp EQ top_exp
   45                 | formal_parameter COMMA top_exp
   46                 | formal_parameter COMMA MUL top_exp
   47                 | formal_parameter COMMA top_exp EQ top_exp

   48 arguments: top_exp
   49          | arguments COMMA top_exp
   50          | base_var_ EQ top_exp
   51          | arguments COMMA base_var_ EQ top_exp
   52          | MUL top_exp

   53 slice_arguments: slice_arguments_token
   54                | slice_arguments slice_arguments_token
   55                | slice_arguments top_exp

   56 slice_arguments_token: top_exp COLON

   57 call_number: lambda_exp
   58            | call_number LB RB
   59            | call_number LB arguments RB

   60 lambda_exp: chose_exp
   61           | LB RB LAMBDA chose_exp
   62           | LB formal_parameter RB LAMBDA chose_exp

   63 chose_exp: bool_or
   64          | chose_exp IF chose_exp ELSE chose_exp

   65 bool_or: bool_and
   66        | bool_or OR bool_and

   67 bool_and: bool_not
   68         | bool_and AND bool_not

   69 bool_not: third_number
   70         | NOT third_number

   71 third_number: bit_or_not
   72             | third_number EQUAL bit_or_not
   73             | third_number MORE bit_or_not
   74             | third_number LESS bit_or_not
   75             | third_number MOREEQ bit_or_not
   76             | third_number LESSEQ bit_or_not
   77             | third_number NOTEQ bit_or_not

   78 bit_or_not: bit_or
   79           | bit_or_not BITNOTOR bit_or

   80 bit_or: bit_and
   81       | bit_or BITOR bit_and

   82 bit_and: bit_move
   83        | bit_and BITAND bit_move

   84 bit_move: second_number
   85         | bit_move BITRIGHT second_number
   86         | bit_move BITLEFT second_number

   87 second_number: first_number
   88              | second_number ADD first_number
   89              | second_number SUB first_number

   90 first_number: negative
   91             | first_number MUL negative
   92             | first_number DIV negative
   93             | first_number MOD negative
   94             | first_number INTDIV negative

   95 negative: bit_not
   96         | SUB bit_not

   97 bit_not: zero_number
   98        | BITNOT zero_number

   99 zero_number: attribute
  100            | zero_number POW attribute
  101            | zero_number LOG attribute
  102            | zero_number SQRT attribute

  103 attribute: call_down
  104          | attribute POINT call_down

  105 call_down: call_slice
  106          | call_slice LI top_exp RI

  107 call_slice: iter_value
  108           | call_slice LI slice_arguments RI

  109 iter_value: element
  110           | LI list_arguments RI
  111           | LP dict_arguments RP

  112 list_arguments: top_exp
  113               | list_arguments COMMA top_exp

  114 dict_arguments: element EQ element
  115               | dict_arguments COMMA element EQ element

  116 element: base_value
  117        | base_var_
  118        | LB top_exp RB

  119 base_value: NUMBER
  120           | INT
  121           | base_string
  122           | TRUE
  123           | FALSE
  124           | NULL_token

  125 base_var_: base_var_token
  126          | LI top_exp RI base_var_token

  127 base_var_token: VAR

  128 base_string: STRING
  129            | base_string STRING

  130 nonlocal_token: NONLOCAL base_var_token

  131 global_token: GLOBAL base_var_token

  132 default_token: DEFAULT base_var_token element

  133 return_exp: return_token
  134           | return_token top_exp
  135           | return_token top_exp element

  136 return_token: RETURN

  137 restarted_exp: restarted_token
  138              | restarted_token element

  139 restarted_token: RESTARTED

  140 restart_exp: restart_token
  141            | restart_token element

  142 restart_token: RESTART

  143 continued_exp: continued_token
  144              | continued_token element

  145 continued_token: CONTINUED

  146 continue_exp: continue_token
  147             | continue_token element

  148 continue_token: CONTINUE

  149 break_exp: break_token
  150          | break_token element

  151 break_token: BREAK

  152 broken_exp: broken_token
  153           | broken_token element

  154 broken_token: BROKEN

  155 if_block: if_exp block
  156         | if_block elif_exp block

  157 elif_exp: ELIF LB top_exp RB
  158         | ELSE

  159 if_exp: IF LB top_exp RB

  160 block_block: block_exp block

  161 block_exp: BLOCK

  162 for_block: for_exp block

  163 for_exp: FOR LB COMMA COMMA RB
  164        | FOR LB top_exp COMMA COMMA RB
  165        | FOR LB COMMA top_exp COMMA RB
  166        | FOR LB COMMA COMMA top_exp RB
  167        | FOR LB top_exp COMMA COMMA top_exp RB
  168        | FOR LB top_exp COMMA top_exp COMMA RB
  169        | FOR LB COMMA top_exp COMMA top_exp RB
  170        | FOR LB top_exp COMMA top_exp COMMA top_exp RB
  171        | FOR LB element IN top_exp RB

  172 include_exp: INCLUDE top_exp

  173 import_exp: IMPORT top_exp AS element

  174 raise_exp: RAISE top_exp top_exp
  175          | THROW top_exp
  176          | ASSERT top_exp top_exp

  177 try_block: try_exp block

  178 try_exp: try_token block EXCEPT AS element

  179 try_token: TRY

  180 do_while_block: DO block while_exp
  181               | DO block stop_token while_exp

  182 while_block: while_exp block

  183 while_exp: WHILE LB top_exp RB

  184 class_block: class_exp block

  185 class_exp: CLASS element LB RB
  186          | CLASS element LB arguments RB

  187 def_block: def_exp block

  188 def_exp: DEF element LB RB
  189        | DEF element LB formal_parameter RB

  190 block: LP command_list RP
  191      | LP block RP
  192      | LP PASS RP

  193 stop_token: STOPN
  194           | STOPF
  195           | stop_token STOPF
  196           | stop_token STOPN


终结语词，附有它们出现处的规则

    $end (0) 0
    error (256)
    NUMBER <double_value> (258) 119
    INT <double_value> (259) 120
    STRING <string_value> (260) 128 129
    VAR <string_value> (261) 127
    ADD (262) 88
    SUB (263) 89 96
    DIV (264) 92
    MUL (265) 43 46 52 91
    EQ (266) 30 44 47 50 51 114 115
    LESS (267) 74
    MORE (268) 73
    RB (269) 58 59 61 62 118 157 159 163 164 165 166 167 168 169 170 171 183 185 186 188 189
    LB (270) 58 59 61 62 118 157 159 163 164 165 166 167 168 169 170 171 183 185 186 188 189
    RP (271) 111 190 191 192
    LP (272) 111 190 191 192
    WHILE (273) 183
    POW (274) 100
    LOG (275) 101
    SQRT (276) 102
    EQUAL (277) 72
    MOREEQ (278) 75
    LESSEQ (279) 76
    NOTEQ (280) 77
    BREAK (281) 151
    IF (282) 64 159
    ELSE (283) 64 158
    ELIF (284) 157
    BROKEN (285) 154
    CONTINUE (286) 148
    CONTINUED (287) 145
    RESTART (288) 142
    RESTARTED (289) 139
    REGO (290) 13
    REWENT (291) 14
    RI (292) 106 108 110 126
    LI (293) 106 108 110 126
    DEFAULT (294) 132
    FOR (295) 163 164 165 166 167 168 169 170 171
    COMMA (296) 45 46 47 49 51 113 115 163 164 165 166 167 168 169 170
    GLOBAL (297) 131
    NONLOCAL (298) 130
    INDENTA (299)
    STOPN (300) 193 196
    STOPF (301) 194 195
    BLOCK (302) 161
    FALSE (303) 123
    TRUE (304) 122
    NULL_token (305) 124
    DEF (306) 188 189
    RETURN (307) 136
    CLASS (308) 185 186
    POINT (309) 104
    COLON (310) 56
    TRY (311) 179
    EXCEPT (312) 178
    AS (313) 173 178
    RAISE (314) 174
    THROW (315) 175
    IMPORT (316) 173
    INCLUDE (317) 172
    IN (318) 171
    AND (319) 68
    OR (320) 66
    NOT (321) 70
    MOD (322) 93
    INTDIV (323) 94
    AADD (324) 31
    ASUB (325) 32
    AMUL (326) 33
    ADIV (327) 34
    AMOD (328) 35
    AINTDIV (329) 36
    FADD (330) 38 39
    FSUB (331) 40 41
    APOW (332) 37
    BITAND (333) 83
    BITOR (334) 81
    BITNOT (335) 98
    BITNOTOR (336) 79
    BITRIGHT (337) 85
    BITLEFT (338) 86
    PASS (339) 192
    DO (340) 180 181
    LAMBDA (341) 61 62
    ASSERT (342) 176


非终结语词，附有它们出现处的规则

    $accept (88)
        on left: 0
    command_block (89)
        on left: 1
        on right: 0
    command_list (90)
        on left: 2 3
        on right: 1 3 190
    command <statement_value> (91)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 2 3
    top_exp <statement_value> (92)
        on left: 28
        on right: 4 42 43 44 45 46 47 48 49 50 51 52 55 56 106 112 113 118 126 134 135 157 159 164 165 166 167 168 169 170 171 172 173 174 175 176 183
    eq_number <statement_value> (93)
        on left: 29 30 31 32 33 34 35 36 37 38 39 40 41
        on right: 28 30 31 32 33 34 35 36 37
    formal_parameter <parameter_list> (94)
        on left: 42 43 44 45 46 47
        on right: 45 46 47 62 189
    arguments <parameter_list> (95)
        on left: 48 49 50 51 52
        on right: 49 51 59 186
    slice_arguments <parameter_list> (96)
        on left: 53 54 55
        on right: 54 55 108
    slice_arguments_token <statement_value> (97)
        on left: 56
        on right: 53 54
    call_number <statement_value> (98)
        on left: 57 58 59
        on right: 29 30 31 32 33 34 35 36 37 38 39 40 41 58 59
    lambda_exp <statement_value> (99)
        on left: 60 61 62
        on right: 57
    chose_exp <statement_value> (100)
        on left: 63 64
        on right: 60 61 62 64
    bool_or <statement_value> (101)
        on left: 65 66
        on right: 63 66
    bool_and <statement_value> (102)
        on left: 67 68
        on right: 65 66 68
    bool_not <statement_value> (103)
        on left: 69 70
        on right: 67 68
    third_number <statement_value> (104)
        on left: 71 72 73 74 75 76 77
        on right: 69 70 72 73 74 75 76 77
    bit_or_not <statement_value> (105)
        on left: 78 79
        on right: 71 72 73 74 75 76 77 79
    bit_or <statement_value> (106)
        on left: 80 81
        on right: 78 79 81
    bit_and <statement_value> (107)
        on left: 82 83
        on right: 80 81 83
    bit_move <statement_value> (108)
        on left: 84 85 86
        on right: 82 83 85 86
    second_number <statement_value> (109)
        on left: 87 88 89
        on right: 84 85 86 88 89
    first_number <statement_value> (110)
        on left: 90 91 92 93 94
        on right: 87 88 89 91 92 93 94
    negative <statement_value> (111)
        on left: 95 96
        on right: 90 91 92 93 94
    bit_not <statement_value> (112)
        on left: 97 98
        on right: 95 96
    zero_number <statement_value> (113)
        on left: 99 100 101 102
        on right: 97 98 100 101 102
    attribute <statement_value> (114)
        on left: 103 104
        on right: 99 100 101 102 104
    call_down <statement_value> (115)
        on left: 105 106
        on right: 103 104
    call_slice <statement_value> (116)
        on left: 107 108
        on right: 105 106 108
    iter_value <statement_value> (117)
        on left: 109 110 111
        on right: 107
    list_arguments <parameter_list> (118)
        on left: 112 113
        on right: 110 113
    dict_arguments <parameter_list> (119)
        on left: 114 115
        on right: 111 115
    element <statement_value> (120)
        on left: 116 117 118
        on right: 109 114 115 132 135 138 141 144 147 150 153 171 173 178 185 186 188 189
    base_value <statement_value> (121)
        on left: 119 120 121 122 123 124
        on right: 116
    base_var_ <statement_value> (122)
        on left: 125 126
        on right: 50 51 117
    base_var_token <statement_value> (123)
        on left: 127
        on right: 125 126 130 131 132
    base_string <string_value> (124)
        on left: 128 129
        on right: 121 129
    nonlocal_token <statement_value> (125)
        on left: 130
        on right: 18
    global_token <statement_value> (126)
        on left: 131
        on right: 16
    default_token <statement_value> (127)
        on left: 132
        on right: 15
    return_exp <statement_value> (128)
        on left: 133 134 135
        on right: 21
    return_token <statement_value> (129)
        on left: 136
        on right: 133 134 135
    restarted_exp <statement_value> (130)
        on left: 137 138
        on right: 12
    restarted_token <statement_value> (131)
        on left: 139
        on right: 137 138
    restart_exp <statement_value> (132)
        on left: 140 141
        on right: 11
    restart_token <statement_value> (133)
        on left: 142
        on right: 140 141
    continued_exp <statement_value> (134)
        on left: 143 144
        on right: 10
    continued_token <statement_value> (135)
        on left: 145
        on right: 143 144
    continue_exp <statement_value> (136)
        on left: 146 147
        on right: 9
    continue_token <statement_value> (137)
        on left: 148
        on right: 146 147
    break_exp <statement_value> (138)
        on left: 149 150
        on right: 7
    break_token <statement_value> (139)
        on left: 151
        on right: 149 150
    broken_exp <statement_value> (140)
        on left: 152 153
        on right: 8
    broken_token <statement_value> (141)
        on left: 154
        on right: 152 153
    if_block <statement_value> (142)
        on left: 155 156
        on right: 6 156
    elif_exp <if_list_base> (143)
        on left: 157 158
        on right: 156
    if_exp <statement_value> (144)
        on left: 159
        on right: 155
    block_block <statement_value> (145)
        on left: 160
        on right: 19
    block_exp <statement_value> (146)
        on left: 161
        on right: 160
    for_block <statement_value> (147)
        on left: 162
        on right: 17
    for_exp <statement_value> (148)
        on left: 163 164 165 166 167 168 169 170 171
        on right: 162
    include_exp <statement_value> (149)
        on left: 172
        on right: 26
    import_exp <statement_value> (150)
        on left: 173
        on right: 25
    raise_exp <statement_value> (151)
        on left: 174 175 176
        on right: 24
    try_block <statement_value> (152)
        on left: 177
        on right: 23
    try_exp <statement_value> (153)
        on left: 178
        on right: 177
    try_token <statement_value> (154)
        on left: 179
        on right: 178
    do_while_block <statement_value> (155)
        on left: 180 181
        on right: 27
    while_block <statement_value> (156)
        on left: 182
        on right: 5
    while_exp <statement_value> (157)
        on left: 183
        on right: 180 181 182
    class_block <statement_value> (158)
        on left: 184
        on right: 22
    class_exp <statement_value> (159)
        on left: 185 186
        on right: 184
    def_block <statement_value> (160)
        on left: 187
        on right: 20
    def_exp <statement_value> (161)
        on left: 188 189
        on right: 187
    block (162)
        on left: 190 191 192
        on right: 155 156 160 162 177 178 180 181 182 184 187 191
    stop_token (163)
        on left: 193 194 195 196
        on right: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 181 195 196


状态 0

    0 $accept: . command_block $end

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    WHILE       偏移，并进入状态 8
    BREAK       偏移，并进入状态 9
    IF          偏移，并进入状态 10
    BROKEN      偏移，并进入状态 11
    CONTINUE    偏移，并进入状态 12
    CONTINUED   偏移，并进入状态 13
    RESTART     偏移，并进入状态 14
    RESTARTED   偏移，并进入状态 15
    REGO        偏移，并进入状态 16
    REWENT      偏移，并进入状态 17
    LI          偏移，并进入状态 18
    DEFAULT     偏移，并进入状态 19
    FOR         偏移，并进入状态 20
    GLOBAL      偏移，并进入状态 21
    NONLOCAL    偏移，并进入状态 22
    BLOCK       偏移，并进入状态 23
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    DEF         偏移，并进入状态 27
    RETURN      偏移，并进入状态 28
    CLASS       偏移，并进入状态 29
    TRY         偏移，并进入状态 30
    RAISE       偏移，并进入状态 31
    THROW       偏移，并进入状态 32
    IMPORT      偏移，并进入状态 33
    INCLUDE     偏移，并进入状态 34
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38
    DO          偏移，并进入状态 39
    ASSERT      偏移，并进入状态 40

    command_block    转到状态 41
    command_list     转到状态 42
    command          转到状态 43
    top_exp          转到状态 44
    eq_number        转到状态 45
    call_number      转到状态 46
    lambda_exp       转到状态 47
    chose_exp        转到状态 48
    bool_or          转到状态 49
    bool_and         转到状态 50
    bool_not         转到状态 51
    third_number     转到状态 52
    bit_or_not       转到状态 53
    bit_or           转到状态 54
    bit_and          转到状态 55
    bit_move         转到状态 56
    second_number    转到状态 57
    first_number     转到状态 58
    negative         转到状态 59
    bit_not          转到状态 60
    zero_number      转到状态 61
    attribute        转到状态 62
    call_down        转到状态 63
    call_slice       转到状态 64
    iter_value       转到状态 65
    element          转到状态 66
    base_value       转到状态 67
    base_var_        转到状态 68
    base_var_token   转到状态 69
    base_string      转到状态 70
    nonlocal_token   转到状态 71
    global_token     转到状态 72
    default_token    转到状态 73
    return_exp       转到状态 74
    return_token     转到状态 75
    restarted_exp    转到状态 76
    restarted_token  转到状态 77
    restart_exp      转到状态 78
    restart_token    转到状态 79
    continued_exp    转到状态 80
    continued_token  转到状态 81
    continue_exp     转到状态 82
    continue_token   转到状态 83
    break_exp        转到状态 84
    break_token      转到状态 85
    broken_exp       转到状态 86
    broken_token     转到状态 87
    if_block         转到状态 88
    if_exp           转到状态 89
    block_block      转到状态 90
    block_exp        转到状态 91
    for_block        转到状态 92
    for_exp          转到状态 93
    include_exp      转到状态 94
    import_exp       转到状态 95
    raise_exp        转到状态 96
    try_block        转到状态 97
    try_exp          转到状态 98
    try_token        转到状态 99
    do_while_block   转到状态 100
    while_block      转到状态 101
    while_exp        转到状态 102
    class_block      转到状态 103
    class_exp        转到状态 104
    def_block        转到状态 105
    def_exp          转到状态 106


状态 1

  119 base_value: NUMBER .

    $default  使用规则 119 以归约 (base_value)


状态 2

  120 base_value: INT .

    $default  使用规则 120 以归约 (base_value)


状态 3

  128 base_string: STRING .

    $default  使用规则 128 以归约 (base_string)


状态 4

  127 base_var_token: VAR .

    $default  使用规则 127 以归约 (base_var_token)


状态 5

   96 negative: SUB . bit_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_not         转到状态 108
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 6

   61 lambda_exp: LB . RB LAMBDA chose_exp
   62           | LB . formal_parameter RB LAMBDA chose_exp
  118 element: LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 109
    RB          偏移，并进入状态 110
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp           转到状态 111
    eq_number         转到状态 45
    formal_parameter  转到状态 112
    call_number       转到状态 46
    lambda_exp        转到状态 47
    chose_exp         转到状态 48
    bool_or           转到状态 49
    bool_and          转到状态 50
    bool_not          转到状态 51
    third_number      转到状态 52
    bit_or_not        转到状态 53
    bit_or            转到状态 54
    bit_and           转到状态 55
    bit_move          转到状态 56
    second_number     转到状态 57
    first_number      转到状态 58
    negative          转到状态 59
    bit_not           转到状态 60
    zero_number       转到状态 61
    attribute         转到状态 62
    call_down         转到状态 63
    call_slice        转到状态 64
    iter_value        转到状态 65
    element           转到状态 66
    base_value        转到状态 67
    base_var_         转到状态 68
    base_var_token    转到状态 69
    base_string       转到状态 70


状态 7

  111 iter_value: LP . dict_arguments RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    dict_arguments  转到状态 114
    element         转到状态 115
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 8

  183 while_exp: WHILE . LB top_exp RB

    LB  偏移，并进入状态 116


状态 9

  151 break_token: BREAK .

    $default  使用规则 151 以归约 (break_token)


状态 10

  159 if_exp: IF . LB top_exp RB

    LB  偏移，并进入状态 117


状态 11

  154 broken_token: BROKEN .

    $default  使用规则 154 以归约 (broken_token)


状态 12

  148 continue_token: CONTINUE .

    $default  使用规则 148 以归约 (continue_token)


状态 13

  145 continued_token: CONTINUED .

    $default  使用规则 145 以归约 (continued_token)


状态 14

  142 restart_token: RESTART .

    $default  使用规则 142 以归约 (restart_token)


状态 15

  139 restarted_token: RESTARTED .

    $default  使用规则 139 以归约 (restarted_token)


状态 16

   13 command: REGO . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 120


状态 17

   14 command: REWENT . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 121


状态 18

  110 iter_value: LI . list_arguments RI
  126 base_var_: LI . top_exp RI base_var_token

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 122
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    list_arguments  转到状态 123
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 19

  132 default_token: DEFAULT . base_var_token element

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 124


状态 20

  163 for_exp: FOR . LB COMMA COMMA RB
  164        | FOR . LB top_exp COMMA COMMA RB
  165        | FOR . LB COMMA top_exp COMMA RB
  166        | FOR . LB COMMA COMMA top_exp RB
  167        | FOR . LB top_exp COMMA COMMA top_exp RB
  168        | FOR . LB top_exp COMMA top_exp COMMA RB
  169        | FOR . LB COMMA top_exp COMMA top_exp RB
  170        | FOR . LB top_exp COMMA top_exp COMMA top_exp RB
  171        | FOR . LB element IN top_exp RB

    LB  偏移，并进入状态 125


状态 21

  131 global_token: GLOBAL . base_var_token

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 126


状态 22

  130 nonlocal_token: NONLOCAL . base_var_token

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 127


状态 23

  161 block_exp: BLOCK .

    $default  使用规则 161 以归约 (block_exp)


状态 24

  123 base_value: FALSE .

    $default  使用规则 123 以归约 (base_value)


状态 25

  122 base_value: TRUE .

    $default  使用规则 122 以归约 (base_value)


状态 26

  124 base_value: NULL_token .

    $default  使用规则 124 以归约 (base_value)


状态 27

  188 def_exp: DEF . element LB RB
  189        | DEF . element LB formal_parameter RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 128
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 28

  136 return_token: RETURN .

    $default  使用规则 136 以归约 (return_token)


状态 29

  185 class_exp: CLASS . element LB RB
  186          | CLASS . element LB arguments RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 129
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 30

  179 try_token: TRY .

    $default  使用规则 179 以归约 (try_token)


状态 31

  174 raise_exp: RAISE . top_exp top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 130
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 32

  175 raise_exp: THROW . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 131
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 33

  173 import_exp: IMPORT . top_exp AS element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 132
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 34

  172 include_exp: INCLUDE . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 133
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 35

   70 bool_not: NOT . third_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    third_number    转到状态 134
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 36

   39 eq_number: FADD . call_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    call_number     转到状态 135
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 37

   41 eq_number: FSUB . call_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    call_number     转到状态 136
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 38

   98 bit_not: BITNOT . zero_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    zero_number     转到状态 137
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 39

  180 do_while_block: DO . block while_exp
  181               | DO . block stop_token while_exp

    LP  偏移，并进入状态 138

    block  转到状态 139


状态 40

  176 raise_exp: ASSERT . top_exp top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 140
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 41

    0 $accept: command_block . $end

    $end  偏移，并进入状态 141


状态 42

    1 command_block: command_list .
    3 command_list: command_list . command

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    WHILE       偏移，并进入状态 8
    BREAK       偏移，并进入状态 9
    IF          偏移，并进入状态 10
    BROKEN      偏移，并进入状态 11
    CONTINUE    偏移，并进入状态 12
    CONTINUED   偏移，并进入状态 13
    RESTART     偏移，并进入状态 14
    RESTARTED   偏移，并进入状态 15
    REGO        偏移，并进入状态 16
    REWENT      偏移，并进入状态 17
    LI          偏移，并进入状态 18
    DEFAULT     偏移，并进入状态 19
    FOR         偏移，并进入状态 20
    GLOBAL      偏移，并进入状态 21
    NONLOCAL    偏移，并进入状态 22
    BLOCK       偏移，并进入状态 23
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    DEF         偏移，并进入状态 27
    RETURN      偏移，并进入状态 28
    CLASS       偏移，并进入状态 29
    TRY         偏移，并进入状态 30
    RAISE       偏移，并进入状态 31
    THROW       偏移，并进入状态 32
    IMPORT      偏移，并进入状态 33
    INCLUDE     偏移，并进入状态 34
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38
    DO          偏移，并进入状态 39
    ASSERT      偏移，并进入状态 40

    $default  使用规则 1 以归约 (command_block)

    command          转到状态 142
    top_exp          转到状态 44
    eq_number        转到状态 45
    call_number      转到状态 46
    lambda_exp       转到状态 47
    chose_exp        转到状态 48
    bool_or          转到状态 49
    bool_and         转到状态 50
    bool_not         转到状态 51
    third_number     转到状态 52
    bit_or_not       转到状态 53
    bit_or           转到状态 54
    bit_and          转到状态 55
    bit_move         转到状态 56
    second_number    转到状态 57
    first_number     转到状态 58
    negative         转到状态 59
    bit_not          转到状态 60
    zero_number      转到状态 61
    attribute        转到状态 62
    call_down        转到状态 63
    call_slice       转到状态 64
    iter_value       转到状态 65
    element          转到状态 66
    base_value       转到状态 67
    base_var_        转到状态 68
    base_var_token   转到状态 69
    base_string      转到状态 70
    nonlocal_token   转到状态 71
    global_token     转到状态 72
    default_token    转到状态 73
    return_exp       转到状态 74
    return_token     转到状态 75
    restarted_exp    转到状态 76
    restarted_token  转到状态 77
    restart_exp      转到状态 78
    restart_token    转到状态 79
    continued_exp    转到状态 80
    continued_token  转到状态 81
    continue_exp     转到状态 82
    continue_token   转到状态 83
    break_exp        转到状态 84
    break_token      转到状态 85
    broken_exp       转到状态 86
    broken_token     转到状态 87
    if_block         转到状态 88
    if_exp           转到状态 89
    block_block      转到状态 90
    block_exp        转到状态 91
    for_block        转到状态 92
    for_exp          转到状态 93
    include_exp      转到状态 94
    import_exp       转到状态 95
    raise_exp        转到状态 96
    try_block        转到状态 97
    try_exp          转到状态 98
    try_token        转到状态 99
    do_while_block   转到状态 100
    while_block      转到状态 101
    while_exp        转到状态 102
    class_block      转到状态 103
    class_exp        转到状态 104
    def_block        转到状态 105
    def_exp          转到状态 106


状态 43

    2 command_list: command .

    $default  使用规则 2 以归约 (command_list)


状态 44

    4 command: top_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 143


状态 45

   28 top_exp: eq_number .

    $default  使用规则 28 以归约 (top_exp)


状态 46

   29 eq_number: call_number .
   30          | call_number . EQ eq_number
   31          | call_number . AADD eq_number
   32          | call_number . ASUB eq_number
   33          | call_number . AMUL eq_number
   34          | call_number . ADIV eq_number
   35          | call_number . AMOD eq_number
   36          | call_number . AINTDIV eq_number
   37          | call_number . APOW eq_number
   38          | call_number . FADD
   40          | call_number . FSUB
   58 call_number: call_number . LB RB
   59            | call_number . LB arguments RB

    EQ       偏移，并进入状态 144
    LB       偏移，并进入状态 145
    AADD     偏移，并进入状态 146
    ASUB     偏移，并进入状态 147
    AMUL     偏移，并进入状态 148
    ADIV     偏移，并进入状态 149
    AMOD     偏移，并进入状态 150
    AINTDIV  偏移，并进入状态 151
    FADD     偏移，并进入状态 152
    FSUB     偏移，并进入状态 153
    APOW     偏移，并进入状态 154

    EQ        [使用规则 29 以归约 (eq_number)]
    LB        [使用规则 29 以归约 (eq_number)]
    FADD      [使用规则 29 以归约 (eq_number)]
    FSUB      [使用规则 29 以归约 (eq_number)]
    $default  使用规则 29 以归约 (eq_number)


状态 47

   57 call_number: lambda_exp .

    $default  使用规则 57 以归约 (call_number)


状态 48

   60 lambda_exp: chose_exp .
   64 chose_exp: chose_exp . IF chose_exp ELSE chose_exp

    IF  偏移，并进入状态 155

    $default  使用规则 60 以归约 (lambda_exp)


状态 49

   63 chose_exp: bool_or .
   66 bool_or: bool_or . OR bool_and

    OR  偏移，并进入状态 156

    $default  使用规则 63 以归约 (chose_exp)


状态 50

   65 bool_or: bool_and .
   68 bool_and: bool_and . AND bool_not

    AND  偏移，并进入状态 157

    $default  使用规则 65 以归约 (bool_or)


状态 51

   67 bool_and: bool_not .

    $default  使用规则 67 以归约 (bool_and)


状态 52

   69 bool_not: third_number .
   72 third_number: third_number . EQUAL bit_or_not
   73             | third_number . MORE bit_or_not
   74             | third_number . LESS bit_or_not
   75             | third_number . MOREEQ bit_or_not
   76             | third_number . LESSEQ bit_or_not
   77             | third_number . NOTEQ bit_or_not

    LESS    偏移，并进入状态 158
    MORE    偏移，并进入状态 159
    EQUAL   偏移，并进入状态 160
    MOREEQ  偏移，并进入状态 161
    LESSEQ  偏移，并进入状态 162
    NOTEQ   偏移，并进入状态 163

    $default  使用规则 69 以归约 (bool_not)


状态 53

   71 third_number: bit_or_not .
   79 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 164

    $default  使用规则 71 以归约 (third_number)


状态 54

   78 bit_or_not: bit_or .
   81 bit_or: bit_or . BITOR bit_and

    BITOR  偏移，并进入状态 165

    $default  使用规则 78 以归约 (bit_or_not)


状态 55

   80 bit_or: bit_and .
   83 bit_and: bit_and . BITAND bit_move

    BITAND  偏移，并进入状态 166

    $default  使用规则 80 以归约 (bit_or)


状态 56

   82 bit_and: bit_move .
   85 bit_move: bit_move . BITRIGHT second_number
   86         | bit_move . BITLEFT second_number

    BITRIGHT  偏移，并进入状态 167
    BITLEFT   偏移，并进入状态 168

    $default  使用规则 82 以归约 (bit_and)


状态 57

   84 bit_move: second_number .
   88 second_number: second_number . ADD first_number
   89              | second_number . SUB first_number

    ADD  偏移，并进入状态 169
    SUB  偏移，并进入状态 170

    SUB       [使用规则 84 以归约 (bit_move)]
    $default  使用规则 84 以归约 (bit_move)


状态 58

   87 second_number: first_number .
   91 first_number: first_number . MUL negative
   92             | first_number . DIV negative
   93             | first_number . MOD negative
   94             | first_number . INTDIV negative

    DIV     偏移，并进入状态 171
    MUL     偏移，并进入状态 172
    MOD     偏移，并进入状态 173
    INTDIV  偏移，并进入状态 174

    $default  使用规则 87 以归约 (second_number)


状态 59

   90 first_number: negative .

    $default  使用规则 90 以归约 (first_number)


状态 60

   95 negative: bit_not .

    $default  使用规则 95 以归约 (negative)


状态 61

   97 bit_not: zero_number .
  100 zero_number: zero_number . POW attribute
  101            | zero_number . LOG attribute
  102            | zero_number . SQRT attribute

    POW   偏移，并进入状态 175
    LOG   偏移，并进入状态 176
    SQRT  偏移，并进入状态 177

    $default  使用规则 97 以归约 (bit_not)


状态 62

   99 zero_number: attribute .
  104 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 178

    $default  使用规则 99 以归约 (zero_number)


状态 63

  103 attribute: call_down .

    $default  使用规则 103 以归约 (attribute)


状态 64

  105 call_down: call_slice .
  106          | call_slice . LI top_exp RI
  108 call_slice: call_slice . LI slice_arguments RI

    LI  偏移，并进入状态 179

    LI        [使用规则 105 以归约 (call_down)]
    $default  使用规则 105 以归约 (call_down)


状态 65

  107 call_slice: iter_value .

    $default  使用规则 107 以归约 (call_slice)


状态 66

  109 iter_value: element .

    $default  使用规则 109 以归约 (iter_value)


状态 67

  116 element: base_value .

    $default  使用规则 116 以归约 (element)


状态 68

  117 element: base_var_ .

    $default  使用规则 117 以归约 (element)


状态 69

  125 base_var_: base_var_token .

    $default  使用规则 125 以归约 (base_var_)


状态 70

  121 base_value: base_string .
  129 base_string: base_string . STRING

    STRING  偏移，并进入状态 180

    STRING    [使用规则 121 以归约 (base_value)]
    $default  使用规则 121 以归约 (base_value)


状态 71

   18 command: nonlocal_token . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 181


状态 72

   16 command: global_token . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 182


状态 73

   15 command: default_token . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 183


状态 74

   21 command: return_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 184


状态 75

  133 return_exp: return_token .
  134           | return_token . top_exp
  135           | return_token . top_exp element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    $default  使用规则 133 以归约 (return_exp)

    top_exp         转到状态 185
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 76

   12 command: restarted_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 186


状态 77

  137 restarted_exp: restarted_token .
  138              | restarted_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 137 以归约 (restarted_exp)

    element         转到状态 187
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 78

   11 command: restart_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 188


状态 79

  140 restart_exp: restart_token .
  141            | restart_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 140 以归约 (restart_exp)

    element         转到状态 189
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 80

   10 command: continued_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 190


状态 81

  143 continued_exp: continued_token .
  144              | continued_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 143 以归约 (continued_exp)

    element         转到状态 191
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 82

    9 command: continue_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 192


状态 83

  146 continue_exp: continue_token .
  147             | continue_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 146 以归约 (continue_exp)

    element         转到状态 193
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 84

    7 command: break_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 194


状态 85

  149 break_exp: break_token .
  150          | break_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 149 以归约 (break_exp)

    element         转到状态 195
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 86

    8 command: broken_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 196


状态 87

  152 broken_exp: broken_token .
  153           | broken_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 152 以归约 (broken_exp)

    element         转到状态 197
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 88

    6 command: if_block . stop_token
  156 if_block: if_block . elif_exp block

    ELSE   偏移，并进入状态 198
    ELIF   偏移，并进入状态 199
    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    elif_exp    转到状态 200
    stop_token  转到状态 201


状态 89

  155 if_block: if_exp . block

    LP  偏移，并进入状态 138

    block  转到状态 202


状态 90

   19 command: block_block . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 203


状态 91

  160 block_block: block_exp . block

    LP  偏移，并进入状态 138

    block  转到状态 204


状态 92

   17 command: for_block . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 205


状态 93

  162 for_block: for_exp . block

    LP  偏移，并进入状态 138

    block  转到状态 206


状态 94

   26 command: include_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 207


状态 95

   25 command: import_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 208


状态 96

   24 command: raise_exp . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 209


状态 97

   23 command: try_block . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 210


状态 98

  177 try_block: try_exp . block

    LP  偏移，并进入状态 138

    block  转到状态 211


状态 99

  178 try_exp: try_token . block EXCEPT AS element

    LP  偏移，并进入状态 138

    block  转到状态 212


状态 100

   27 command: do_while_block . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 213


状态 101

    5 command: while_block . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 214


状态 102

  182 while_block: while_exp . block

    LP  偏移，并进入状态 138

    block  转到状态 215


状态 103

   22 command: class_block . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 216


状态 104

  184 class_block: class_exp . block

    LP  偏移，并进入状态 138

    block  转到状态 217


状态 105

   20 command: def_block . stop_token

    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    stop_token  转到状态 218


状态 106

  187 def_block: def_exp . block

    LP  偏移，并进入状态 138

    block  转到状态 219


状态 107

  118 element: LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 220
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 108

   96 negative: SUB bit_not .

    $default  使用规则 96 以归约 (negative)


状态 109

   43 formal_parameter: MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 221
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 110

   61 lambda_exp: LB RB . LAMBDA chose_exp

    LAMBDA  偏移，并进入状态 222


状态 111

   42 formal_parameter: top_exp .
   44                 | top_exp . EQ top_exp
  118 element: LB top_exp . RB

    EQ  偏移，并进入状态 223
    RB  偏移，并进入状态 224

    RB        [使用规则 42 以归约 (formal_parameter)]
    $default  使用规则 42 以归约 (formal_parameter)


状态 112

   45 formal_parameter: formal_parameter . COMMA top_exp
   46                 | formal_parameter . COMMA MUL top_exp
   47                 | formal_parameter . COMMA top_exp EQ top_exp
   62 lambda_exp: LB formal_parameter . RB LAMBDA chose_exp

    RB     偏移，并进入状态 225
    COMMA  偏移，并进入状态 226


状态 113

  126 base_var_: LI . top_exp RI base_var_token

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 227
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 114

  111 iter_value: LP dict_arguments . RP
  115 dict_arguments: dict_arguments . COMMA element EQ element

    RP     偏移，并进入状态 228
    COMMA  偏移，并进入状态 229


状态 115

  114 dict_arguments: element . EQ element

    EQ  偏移，并进入状态 230


状态 116

  183 while_exp: WHILE LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 231
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 117

  159 if_exp: IF LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 232
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 118

  193 stop_token: STOPN .

    $default  使用规则 193 以归约 (stop_token)


状态 119

  194 stop_token: STOPF .

    $default  使用规则 194 以归约 (stop_token)


状态 120

   13 command: REGO stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 13 以归约 (command)


状态 121

   14 command: REWENT stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 14 以归约 (command)


状态 122

  112 list_arguments: top_exp .
  126 base_var_: LI top_exp . RI base_var_token

    RI  偏移，并进入状态 235

    RI        [使用规则 112 以归约 (list_arguments)]
    $default  使用规则 112 以归约 (list_arguments)


状态 123

  110 iter_value: LI list_arguments . RI
  113 list_arguments: list_arguments . COMMA top_exp

    RI     偏移，并进入状态 236
    COMMA  偏移，并进入状态 237


状态 124

  132 default_token: DEFAULT base_var_token . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 238
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 125

  163 for_exp: FOR LB . COMMA COMMA RB
  164        | FOR LB . top_exp COMMA COMMA RB
  165        | FOR LB . COMMA top_exp COMMA RB
  166        | FOR LB . COMMA COMMA top_exp RB
  167        | FOR LB . top_exp COMMA COMMA top_exp RB
  168        | FOR LB . top_exp COMMA top_exp COMMA RB
  169        | FOR LB . COMMA top_exp COMMA top_exp RB
  170        | FOR LB . top_exp COMMA top_exp COMMA top_exp RB
  171        | FOR LB . element IN top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    COMMA       偏移，并进入状态 239
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 240
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 241
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 126

  131 global_token: GLOBAL base_var_token .

    $default  使用规则 131 以归约 (global_token)


状态 127

  130 nonlocal_token: NONLOCAL base_var_token .

    $default  使用规则 130 以归约 (nonlocal_token)


状态 128

  188 def_exp: DEF element . LB RB
  189        | DEF element . LB formal_parameter RB

    LB  偏移，并进入状态 242


状态 129

  185 class_exp: CLASS element . LB RB
  186          | CLASS element . LB arguments RB

    LB  偏移，并进入状态 243


状态 130

  174 raise_exp: RAISE top_exp . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 244
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 131

  175 raise_exp: THROW top_exp .

    $default  使用规则 175 以归约 (raise_exp)


状态 132

  173 import_exp: IMPORT top_exp . AS element

    AS  偏移，并进入状态 245


状态 133

  172 include_exp: INCLUDE top_exp .

    $default  使用规则 172 以归约 (include_exp)


状态 134

   70 bool_not: NOT third_number .
   72 third_number: third_number . EQUAL bit_or_not
   73             | third_number . MORE bit_or_not
   74             | third_number . LESS bit_or_not
   75             | third_number . MOREEQ bit_or_not
   76             | third_number . LESSEQ bit_or_not
   77             | third_number . NOTEQ bit_or_not

    LESS    偏移，并进入状态 158
    MORE    偏移，并进入状态 159
    EQUAL   偏移，并进入状态 160
    MOREEQ  偏移，并进入状态 161
    LESSEQ  偏移，并进入状态 162
    NOTEQ   偏移，并进入状态 163

    $default  使用规则 70 以归约 (bool_not)


状态 135

   39 eq_number: FADD call_number .
   58 call_number: call_number . LB RB
   59            | call_number . LB arguments RB

    LB  偏移，并进入状态 145

    LB        [使用规则 39 以归约 (eq_number)]
    $default  使用规则 39 以归约 (eq_number)


状态 136

   41 eq_number: FSUB call_number .
   58 call_number: call_number . LB RB
   59            | call_number . LB arguments RB

    LB  偏移，并进入状态 145

    LB        [使用规则 41 以归约 (eq_number)]
    $default  使用规则 41 以归约 (eq_number)


状态 137

   98 bit_not: BITNOT zero_number .
  100 zero_number: zero_number . POW attribute
  101            | zero_number . LOG attribute
  102            | zero_number . SQRT attribute

    POW   偏移，并进入状态 175
    LOG   偏移，并进入状态 176
    SQRT  偏移，并进入状态 177

    $default  使用规则 98 以归约 (bit_not)


状态 138

  190 block: LP . command_list RP
  191      | LP . block RP
  192      | LP . PASS RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 246
    WHILE       偏移，并进入状态 8
    BREAK       偏移，并进入状态 9
    IF          偏移，并进入状态 10
    BROKEN      偏移，并进入状态 11
    CONTINUE    偏移，并进入状态 12
    CONTINUED   偏移，并进入状态 13
    RESTART     偏移，并进入状态 14
    RESTARTED   偏移，并进入状态 15
    REGO        偏移，并进入状态 16
    REWENT      偏移，并进入状态 17
    LI          偏移，并进入状态 18
    DEFAULT     偏移，并进入状态 19
    FOR         偏移，并进入状态 20
    GLOBAL      偏移，并进入状态 21
    NONLOCAL    偏移，并进入状态 22
    BLOCK       偏移，并进入状态 23
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    DEF         偏移，并进入状态 27
    RETURN      偏移，并进入状态 28
    CLASS       偏移，并进入状态 29
    TRY         偏移，并进入状态 30
    RAISE       偏移，并进入状态 31
    THROW       偏移，并进入状态 32
    IMPORT      偏移，并进入状态 33
    INCLUDE     偏移，并进入状态 34
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38
    PASS        偏移，并进入状态 247
    DO          偏移，并进入状态 39
    ASSERT      偏移，并进入状态 40

    command_list     转到状态 248
    command          转到状态 43
    top_exp          转到状态 44
    eq_number        转到状态 45
    call_number      转到状态 46
    lambda_exp       转到状态 47
    chose_exp        转到状态 48
    bool_or          转到状态 49
    bool_and         转到状态 50
    bool_not         转到状态 51
    third_number     转到状态 52
    bit_or_not       转到状态 53
    bit_or           转到状态 54
    bit_and          转到状态 55
    bit_move         转到状态 56
    second_number    转到状态 57
    first_number     转到状态 58
    negative         转到状态 59
    bit_not          转到状态 60
    zero_number      转到状态 61
    attribute        转到状态 62
    call_down        转到状态 63
    call_slice       转到状态 64
    iter_value       转到状态 65
    element          转到状态 66
    base_value       转到状态 67
    base_var_        转到状态 68
    base_var_token   转到状态 69
    base_string      转到状态 70
    nonlocal_token   转到状态 71
    global_token     转到状态 72
    default_token    转到状态 73
    return_exp       转到状态 74
    return_token     转到状态 75
    restarted_exp    转到状态 76
    restarted_token  转到状态 77
    restart_exp      转到状态 78
    restart_token    转到状态 79
    continued_exp    转到状态 80
    continued_token  转到状态 81
    continue_exp     转到状态 82
    continue_token   转到状态 83
    break_exp        转到状态 84
    break_token      转到状态 85
    broken_exp       转到状态 86
    broken_token     转到状态 87
    if_block         转到状态 88
    if_exp           转到状态 89
    block_block      转到状态 90
    block_exp        转到状态 91
    for_block        转到状态 92
    for_exp          转到状态 93
    include_exp      转到状态 94
    import_exp       转到状态 95
    raise_exp        转到状态 96
    try_block        转到状态 97
    try_exp          转到状态 98
    try_token        转到状态 99
    do_while_block   转到状态 100
    while_block      转到状态 101
    while_exp        转到状态 102
    class_block      转到状态 103
    class_exp        转到状态 104
    def_block        转到状态 105
    def_exp          转到状态 106
    block            转到状态 249


状态 139

  180 do_while_block: DO block . while_exp
  181               | DO block . stop_token while_exp

    WHILE  偏移，并进入状态 8
    STOPN  偏移，并进入状态 118
    STOPF  偏移，并进入状态 119

    while_exp   转到状态 250
    stop_token  转到状态 251


状态 140

  176 raise_exp: ASSERT top_exp . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 252
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 141

    0 $accept: command_block $end .

    $default  接受


状态 142

    3 command_list: command_list command .

    $default  使用规则 3 以归约 (command_list)


状态 143

    4 command: top_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 4 以归约 (command)


状态 144

   30 eq_number: call_number EQ . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 253
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 145

   58 call_number: call_number LB . RB
   59            | call_number LB . arguments RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 254
    RB          偏移，并进入状态 255
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 256
    eq_number       转到状态 45
    arguments       转到状态 257
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 258
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 146

   31 eq_number: call_number AADD . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 259
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 147

   32 eq_number: call_number ASUB . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 260
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 148

   33 eq_number: call_number AMUL . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 261
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 149

   34 eq_number: call_number ADIV . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 262
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 150

   35 eq_number: call_number AMOD . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 263
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 151

   36 eq_number: call_number AINTDIV . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 264
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 152

   38 eq_number: call_number FADD .

    $default  使用规则 38 以归约 (eq_number)


状态 153

   40 eq_number: call_number FSUB .

    $default  使用规则 40 以归约 (eq_number)


状态 154

   37 eq_number: call_number APOW . eq_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    eq_number       转到状态 265
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 155

   64 chose_exp: chose_exp IF . chose_exp ELSE chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    chose_exp       转到状态 266
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 156

   66 bool_or: bool_or OR . bool_and

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    bool_and        转到状态 267
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 157

   68 bool_and: bool_and AND . bool_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    bool_not        转到状态 268
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 158

   74 third_number: third_number LESS . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 269
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 159

   73 third_number: third_number MORE . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 270
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 160

   72 third_number: third_number EQUAL . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 271
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 161

   75 third_number: third_number MOREEQ . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 272
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 162

   76 third_number: third_number LESSEQ . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 273
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 163

   77 third_number: third_number NOTEQ . bit_or_not

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or_not      转到状态 274
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 164

   79 bit_or_not: bit_or_not BITNOTOR . bit_or

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_or          转到状态 275
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 165

   81 bit_or: bit_or BITOR . bit_and

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_and         转到状态 276
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 166

   83 bit_and: bit_and BITAND . bit_move

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    bit_move        转到状态 277
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 167

   85 bit_move: bit_move BITRIGHT . second_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    second_number   转到状态 278
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 168

   86 bit_move: bit_move BITLEFT . second_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    second_number   转到状态 279
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 169

   88 second_number: second_number ADD . first_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    first_number    转到状态 280
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 170

   89 second_number: second_number SUB . first_number

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    first_number    转到状态 281
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 171

   92 first_number: first_number DIV . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    negative        转到状态 282
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 172

   91 first_number: first_number MUL . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    negative        转到状态 283
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 173

   93 first_number: first_number MOD . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    negative        转到状态 284
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 174

   94 first_number: first_number INTDIV . negative

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    BITNOT      偏移，并进入状态 38

    negative        转到状态 285
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 175

  100 zero_number: zero_number POW . attribute

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    attribute       转到状态 286
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 176

  101 zero_number: zero_number LOG . attribute

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    attribute       转到状态 287
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 177

  102 zero_number: zero_number SQRT . attribute

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    attribute       转到状态 288
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 178

  104 attribute: attribute POINT . call_down

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    call_down       转到状态 289
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 179

  106 call_down: call_slice LI . top_exp RI
  108 call_slice: call_slice LI . slice_arguments RI

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp                转到状态 290
    eq_number              转到状态 45
    slice_arguments        转到状态 291
    slice_arguments_token  转到状态 292
    call_number            转到状态 46
    lambda_exp             转到状态 47
    chose_exp              转到状态 48
    bool_or                转到状态 49
    bool_and               转到状态 50
    bool_not               转到状态 51
    third_number           转到状态 52
    bit_or_not             转到状态 53
    bit_or                 转到状态 54
    bit_and                转到状态 55
    bit_move               转到状态 56
    second_number          转到状态 57
    first_number           转到状态 58
    negative               转到状态 59
    bit_not                转到状态 60
    zero_number            转到状态 61
    attribute              转到状态 62
    call_down              转到状态 63
    call_slice             转到状态 64
    iter_value             转到状态 65
    element                转到状态 66
    base_value             转到状态 67
    base_var_              转到状态 68
    base_var_token         转到状态 69
    base_string            转到状态 70


状态 180

  129 base_string: base_string STRING .

    $default  使用规则 129 以归约 (base_string)


状态 181

   18 command: nonlocal_token stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 18 以归约 (command)


状态 182

   16 command: global_token stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 16 以归约 (command)


状态 183

   15 command: default_token stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 15 以归约 (command)


状态 184

   21 command: return_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 21 以归约 (command)


状态 185

  134 return_exp: return_token top_exp .
  135           | return_token top_exp . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    $default  使用规则 134 以归约 (return_exp)

    element         转到状态 293
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 186

   12 command: restarted_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 12 以归约 (command)


状态 187

  138 restarted_exp: restarted_token element .

    $default  使用规则 138 以归约 (restarted_exp)


状态 188

   11 command: restart_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 11 以归约 (command)


状态 189

  141 restart_exp: restart_token element .

    $default  使用规则 141 以归约 (restart_exp)


状态 190

   10 command: continued_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 10 以归约 (command)


状态 191

  144 continued_exp: continued_token element .

    $default  使用规则 144 以归约 (continued_exp)


状态 192

    9 command: continue_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 9 以归约 (command)


状态 193

  147 continue_exp: continue_token element .

    $default  使用规则 147 以归约 (continue_exp)


状态 194

    7 command: break_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 7 以归约 (command)


状态 195

  150 break_exp: break_token element .

    $default  使用规则 150 以归约 (break_exp)


状态 196

    8 command: broken_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 8 以归约 (command)


状态 197

  153 broken_exp: broken_token element .

    $default  使用规则 153 以归约 (broken_exp)


状态 198

  158 elif_exp: ELSE .

    $default  使用规则 158 以归约 (elif_exp)


状态 199

  157 elif_exp: ELIF . LB top_exp RB

    LB  偏移，并进入状态 294


状态 200

  156 if_block: if_block elif_exp . block

    LP  偏移，并进入状态 138

    block  转到状态 295


状态 201

    6 command: if_block stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 6 以归约 (command)


状态 202

  155 if_block: if_exp block .

    $default  使用规则 155 以归约 (if_block)


状态 203

   19 command: block_block stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 19 以归约 (command)


状态 204

  160 block_block: block_exp block .

    $default  使用规则 160 以归约 (block_block)


状态 205

   17 command: for_block stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 17 以归约 (command)


状态 206

  162 for_block: for_exp block .

    $default  使用规则 162 以归约 (for_block)


状态 207

   26 command: include_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 26 以归约 (command)


状态 208

   25 command: import_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 25 以归约 (command)


状态 209

   24 command: raise_exp stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 24 以归约 (command)


状态 210

   23 command: try_block stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 23 以归约 (command)


状态 211

  177 try_block: try_exp block .

    $default  使用规则 177 以归约 (try_block)


状态 212

  178 try_exp: try_token block . EXCEPT AS element

    EXCEPT  偏移，并进入状态 296


状态 213

   27 command: do_while_block stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 27 以归约 (command)


状态 214

    5 command: while_block stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 5 以归约 (command)


状态 215

  182 while_block: while_exp block .

    $default  使用规则 182 以归约 (while_block)


状态 216

   22 command: class_block stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 22 以归约 (command)


状态 217

  184 class_block: class_exp block .

    $default  使用规则 184 以归约 (class_block)


状态 218

   20 command: def_block stop_token .
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    $default  使用规则 20 以归约 (command)


状态 219

  187 def_block: def_exp block .

    $default  使用规则 187 以归约 (def_block)


状态 220

  118 element: LB top_exp . RB

    RB  偏移，并进入状态 224


状态 221

   43 formal_parameter: MUL top_exp .

    $default  使用规则 43 以归约 (formal_parameter)


状态 222

   61 lambda_exp: LB RB LAMBDA . chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    chose_exp       转到状态 297
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 223

   44 formal_parameter: top_exp EQ . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 298
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 224

  118 element: LB top_exp RB .

    $default  使用规则 118 以归约 (element)


状态 225

   62 lambda_exp: LB formal_parameter RB . LAMBDA chose_exp

    LAMBDA  偏移，并进入状态 299


状态 226

   45 formal_parameter: formal_parameter COMMA . top_exp
   46                 | formal_parameter COMMA . MUL top_exp
   47                 | formal_parameter COMMA . top_exp EQ top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 300
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 301
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 227

  126 base_var_: LI top_exp . RI base_var_token

    RI  偏移，并进入状态 235


状态 228

  111 iter_value: LP dict_arguments RP .

    $default  使用规则 111 以归约 (iter_value)


状态 229

  115 dict_arguments: dict_arguments COMMA . element EQ element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 302
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 230

  114 dict_arguments: element EQ . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 303
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 231

  183 while_exp: WHILE LB top_exp . RB

    RB  偏移，并进入状态 304


状态 232

  159 if_exp: IF LB top_exp . RB

    RB  偏移，并进入状态 305


状态 233

  196 stop_token: stop_token STOPN .

    $default  使用规则 196 以归约 (stop_token)


状态 234

  195 stop_token: stop_token STOPF .

    $default  使用规则 195 以归约 (stop_token)


状态 235

  126 base_var_: LI top_exp RI . base_var_token

    VAR  偏移，并进入状态 4

    base_var_token  转到状态 306


状态 236

  110 iter_value: LI list_arguments RI .

    $default  使用规则 110 以归约 (iter_value)


状态 237

  113 list_arguments: list_arguments COMMA . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 307
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 238

  132 default_token: DEFAULT base_var_token element .

    $default  使用规则 132 以归约 (default_token)


状态 239

  163 for_exp: FOR LB COMMA . COMMA RB
  165        | FOR LB COMMA . top_exp COMMA RB
  166        | FOR LB COMMA . COMMA top_exp RB
  169        | FOR LB COMMA . top_exp COMMA top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    COMMA       偏移，并进入状态 308
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 309
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 240

  164 for_exp: FOR LB top_exp . COMMA COMMA RB
  167        | FOR LB top_exp . COMMA COMMA top_exp RB
  168        | FOR LB top_exp . COMMA top_exp COMMA RB
  170        | FOR LB top_exp . COMMA top_exp COMMA top_exp RB

    COMMA  偏移，并进入状态 310


状态 241

  109 iter_value: element .
  171 for_exp: FOR LB element . IN top_exp RB

    IN  偏移，并进入状态 311

    $default  使用规则 109 以归约 (iter_value)


状态 242

  188 def_exp: DEF element LB . RB
  189        | DEF element LB . formal_parameter RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 109
    RB          偏移，并进入状态 312
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp           转到状态 313
    eq_number         转到状态 45
    formal_parameter  转到状态 314
    call_number       转到状态 46
    lambda_exp        转到状态 47
    chose_exp         转到状态 48
    bool_or           转到状态 49
    bool_and          转到状态 50
    bool_not          转到状态 51
    third_number      转到状态 52
    bit_or_not        转到状态 53
    bit_or            转到状态 54
    bit_and           转到状态 55
    bit_move          转到状态 56
    second_number     转到状态 57
    first_number      转到状态 58
    negative          转到状态 59
    bit_not           转到状态 60
    zero_number       转到状态 61
    attribute         转到状态 62
    call_down         转到状态 63
    call_slice        转到状态 64
    iter_value        转到状态 65
    element           转到状态 66
    base_value        转到状态 67
    base_var_         转到状态 68
    base_var_token    转到状态 69
    base_string       转到状态 70


状态 243

  185 class_exp: CLASS element LB . RB
  186          | CLASS element LB . arguments RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    MUL         偏移，并进入状态 254
    RB          偏移，并进入状态 315
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 256
    eq_number       转到状态 45
    arguments       转到状态 316
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 258
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 244

  174 raise_exp: RAISE top_exp top_exp .

    $default  使用规则 174 以归约 (raise_exp)


状态 245

  173 import_exp: IMPORT top_exp AS . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 317
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 246

  111 iter_value: LP . dict_arguments RP
  190 block: LP . command_list RP
  191      | LP . block RP
  192      | LP . PASS RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 246
    WHILE       偏移，并进入状态 8
    BREAK       偏移，并进入状态 9
    IF          偏移，并进入状态 10
    BROKEN      偏移，并进入状态 11
    CONTINUE    偏移，并进入状态 12
    CONTINUED   偏移，并进入状态 13
    RESTART     偏移，并进入状态 14
    RESTARTED   偏移，并进入状态 15
    REGO        偏移，并进入状态 16
    REWENT      偏移，并进入状态 17
    LI          偏移，并进入状态 18
    DEFAULT     偏移，并进入状态 19
    FOR         偏移，并进入状态 20
    GLOBAL      偏移，并进入状态 21
    NONLOCAL    偏移，并进入状态 22
    BLOCK       偏移，并进入状态 23
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    DEF         偏移，并进入状态 27
    RETURN      偏移，并进入状态 28
    CLASS       偏移，并进入状态 29
    TRY         偏移，并进入状态 30
    RAISE       偏移，并进入状态 31
    THROW       偏移，并进入状态 32
    IMPORT      偏移，并进入状态 33
    INCLUDE     偏移，并进入状态 34
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38
    PASS        偏移，并进入状态 247
    DO          偏移，并进入状态 39
    ASSERT      偏移，并进入状态 40

    command_list     转到状态 248
    command          转到状态 43
    top_exp          转到状态 44
    eq_number        转到状态 45
    call_number      转到状态 46
    lambda_exp       转到状态 47
    chose_exp        转到状态 48
    bool_or          转到状态 49
    bool_and         转到状态 50
    bool_not         转到状态 51
    third_number     转到状态 52
    bit_or_not       转到状态 53
    bit_or           转到状态 54
    bit_and          转到状态 55
    bit_move         转到状态 56
    second_number    转到状态 57
    first_number     转到状态 58
    negative         转到状态 59
    bit_not          转到状态 60
    zero_number      转到状态 61
    attribute        转到状态 62
    call_down        转到状态 63
    call_slice       转到状态 64
    iter_value       转到状态 65
    dict_arguments   转到状态 114
    element          转到状态 318
    base_value       转到状态 67
    base_var_        转到状态 68
    base_var_token   转到状态 69
    base_string      转到状态 70
    nonlocal_token   转到状态 71
    global_token     转到状态 72
    default_token    转到状态 73
    return_exp       转到状态 74
    return_token     转到状态 75
    restarted_exp    转到状态 76
    restarted_token  转到状态 77
    restart_exp      转到状态 78
    restart_token    转到状态 79
    continued_exp    转到状态 80
    continued_token  转到状态 81
    continue_exp     转到状态 82
    continue_token   转到状态 83
    break_exp        转到状态 84
    break_token      转到状态 85
    broken_exp       转到状态 86
    broken_token     转到状态 87
    if_block         转到状态 88
    if_exp           转到状态 89
    block_block      转到状态 90
    block_exp        转到状态 91
    for_block        转到状态 92
    for_exp          转到状态 93
    include_exp      转到状态 94
    import_exp       转到状态 95
    raise_exp        转到状态 96
    try_block        转到状态 97
    try_exp          转到状态 98
    try_token        转到状态 99
    do_while_block   转到状态 100
    while_block      转到状态 101
    while_exp        转到状态 102
    class_block      转到状态 103
    class_exp        转到状态 104
    def_block        转到状态 105
    def_exp          转到状态 106
    block            转到状态 249


状态 247

  192 block: LP PASS . RP

    RP  偏移，并进入状态 319


状态 248

    3 command_list: command_list . command
  190 block: LP command_list . RP

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    RP          偏移，并进入状态 320
    LP          偏移，并进入状态 7
    WHILE       偏移，并进入状态 8
    BREAK       偏移，并进入状态 9
    IF          偏移，并进入状态 10
    BROKEN      偏移，并进入状态 11
    CONTINUE    偏移，并进入状态 12
    CONTINUED   偏移，并进入状态 13
    RESTART     偏移，并进入状态 14
    RESTARTED   偏移，并进入状态 15
    REGO        偏移，并进入状态 16
    REWENT      偏移，并进入状态 17
    LI          偏移，并进入状态 18
    DEFAULT     偏移，并进入状态 19
    FOR         偏移，并进入状态 20
    GLOBAL      偏移，并进入状态 21
    NONLOCAL    偏移，并进入状态 22
    BLOCK       偏移，并进入状态 23
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    DEF         偏移，并进入状态 27
    RETURN      偏移，并进入状态 28
    CLASS       偏移，并进入状态 29
    TRY         偏移，并进入状态 30
    RAISE       偏移，并进入状态 31
    THROW       偏移，并进入状态 32
    IMPORT      偏移，并进入状态 33
    INCLUDE     偏移，并进入状态 34
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38
    DO          偏移，并进入状态 39
    ASSERT      偏移，并进入状态 40

    command          转到状态 142
    top_exp          转到状态 44
    eq_number        转到状态 45
    call_number      转到状态 46
    lambda_exp       转到状态 47
    chose_exp        转到状态 48
    bool_or          转到状态 49
    bool_and         转到状态 50
    bool_not         转到状态 51
    third_number     转到状态 52
    bit_or_not       转到状态 53
    bit_or           转到状态 54
    bit_and          转到状态 55
    bit_move         转到状态 56
    second_number    转到状态 57
    first_number     转到状态 58
    negative         转到状态 59
    bit_not          转到状态 60
    zero_number      转到状态 61
    attribute        转到状态 62
    call_down        转到状态 63
    call_slice       转到状态 64
    iter_value       转到状态 65
    element          转到状态 66
    base_value       转到状态 67
    base_var_        转到状态 68
    base_var_token   转到状态 69
    base_string      转到状态 70
    nonlocal_token   转到状态 71
    global_token     转到状态 72
    default_token    转到状态 73
    return_exp       转到状态 74
    return_token     转到状态 75
    restarted_exp    转到状态 76
    restarted_token  转到状态 77
    restart_exp      转到状态 78
    restart_token    转到状态 79
    continued_exp    转到状态 80
    continued_token  转到状态 81
    continue_exp     转到状态 82
    continue_token   转到状态 83
    break_exp        转到状态 84
    break_token      转到状态 85
    broken_exp       转到状态 86
    broken_token     转到状态 87
    if_block         转到状态 88
    if_exp           转到状态 89
    block_block      转到状态 90
    block_exp        转到状态 91
    for_block        转到状态 92
    for_exp          转到状态 93
    include_exp      转到状态 94
    import_exp       转到状态 95
    raise_exp        转到状态 96
    try_block        转到状态 97
    try_exp          转到状态 98
    try_token        转到状态 99
    do_while_block   转到状态 100
    while_block      转到状态 101
    while_exp        转到状态 102
    class_block      转到状态 103
    class_exp        转到状态 104
    def_block        转到状态 105
    def_exp          转到状态 106


状态 249

  191 block: LP block . RP

    RP  偏移，并进入状态 321


状态 250

  180 do_while_block: DO block while_exp .

    $default  使用规则 180 以归约 (do_while_block)


状态 251

  181 do_while_block: DO block stop_token . while_exp
  195 stop_token: stop_token . STOPF
  196           | stop_token . STOPN

    WHILE  偏移，并进入状态 8
    STOPN  偏移，并进入状态 233
    STOPF  偏移，并进入状态 234

    while_exp  转到状态 322


状态 252

  176 raise_exp: ASSERT top_exp top_exp .

    $default  使用规则 176 以归约 (raise_exp)


状态 253

   30 eq_number: call_number EQ eq_number .

    $default  使用规则 30 以归约 (eq_number)


状态 254

   52 arguments: MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 323
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 255

   58 call_number: call_number LB RB .

    $default  使用规则 58 以归约 (call_number)


状态 256

   48 arguments: top_exp .

    $default  使用规则 48 以归约 (arguments)


状态 257

   49 arguments: arguments . COMMA top_exp
   51          | arguments . COMMA base_var_ EQ top_exp
   59 call_number: call_number LB arguments . RB

    RB     偏移，并进入状态 324
    COMMA  偏移，并进入状态 325


状态 258

   50 arguments: base_var_ . EQ top_exp
  117 element: base_var_ .

    EQ  偏移，并进入状态 326

    EQ        [使用规则 117 以归约 (element)]
    $default  使用规则 117 以归约 (element)


状态 259

   31 eq_number: call_number AADD eq_number .

    $default  使用规则 31 以归约 (eq_number)


状态 260

   32 eq_number: call_number ASUB eq_number .

    $default  使用规则 32 以归约 (eq_number)


状态 261

   33 eq_number: call_number AMUL eq_number .

    $default  使用规则 33 以归约 (eq_number)


状态 262

   34 eq_number: call_number ADIV eq_number .

    $default  使用规则 34 以归约 (eq_number)


状态 263

   35 eq_number: call_number AMOD eq_number .

    $default  使用规则 35 以归约 (eq_number)


状态 264

   36 eq_number: call_number AINTDIV eq_number .

    $default  使用规则 36 以归约 (eq_number)


状态 265

   37 eq_number: call_number APOW eq_number .

    $default  使用规则 37 以归约 (eq_number)


状态 266

   64 chose_exp: chose_exp . IF chose_exp ELSE chose_exp
   64          | chose_exp IF chose_exp . ELSE chose_exp

    IF    偏移，并进入状态 155
    ELSE  偏移，并进入状态 327


状态 267

   66 bool_or: bool_or OR bool_and .
   68 bool_and: bool_and . AND bool_not

    AND  偏移，并进入状态 157

    $default  使用规则 66 以归约 (bool_or)


状态 268

   68 bool_and: bool_and AND bool_not .

    $default  使用规则 68 以归约 (bool_and)


状态 269

   74 third_number: third_number LESS bit_or_not .
   79 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 164

    $default  使用规则 74 以归约 (third_number)


状态 270

   73 third_number: third_number MORE bit_or_not .
   79 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 164

    $default  使用规则 73 以归约 (third_number)


状态 271

   72 third_number: third_number EQUAL bit_or_not .
   79 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 164

    $default  使用规则 72 以归约 (third_number)


状态 272

   75 third_number: third_number MOREEQ bit_or_not .
   79 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 164

    $default  使用规则 75 以归约 (third_number)


状态 273

   76 third_number: third_number LESSEQ bit_or_not .
   79 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 164

    $default  使用规则 76 以归约 (third_number)


状态 274

   77 third_number: third_number NOTEQ bit_or_not .
   79 bit_or_not: bit_or_not . BITNOTOR bit_or

    BITNOTOR  偏移，并进入状态 164

    $default  使用规则 77 以归约 (third_number)


状态 275

   79 bit_or_not: bit_or_not BITNOTOR bit_or .
   81 bit_or: bit_or . BITOR bit_and

    BITOR  偏移，并进入状态 165

    $default  使用规则 79 以归约 (bit_or_not)


状态 276

   81 bit_or: bit_or BITOR bit_and .
   83 bit_and: bit_and . BITAND bit_move

    BITAND  偏移，并进入状态 166

    $default  使用规则 81 以归约 (bit_or)


状态 277

   83 bit_and: bit_and BITAND bit_move .
   85 bit_move: bit_move . BITRIGHT second_number
   86         | bit_move . BITLEFT second_number

    BITRIGHT  偏移，并进入状态 167
    BITLEFT   偏移，并进入状态 168

    $default  使用规则 83 以归约 (bit_and)


状态 278

   85 bit_move: bit_move BITRIGHT second_number .
   88 second_number: second_number . ADD first_number
   89              | second_number . SUB first_number

    ADD  偏移，并进入状态 169
    SUB  偏移，并进入状态 170

    SUB       [使用规则 85 以归约 (bit_move)]
    $default  使用规则 85 以归约 (bit_move)


状态 279

   86 bit_move: bit_move BITLEFT second_number .
   88 second_number: second_number . ADD first_number
   89              | second_number . SUB first_number

    ADD  偏移，并进入状态 169
    SUB  偏移，并进入状态 170

    SUB       [使用规则 86 以归约 (bit_move)]
    $default  使用规则 86 以归约 (bit_move)


状态 280

   88 second_number: second_number ADD first_number .
   91 first_number: first_number . MUL negative
   92             | first_number . DIV negative
   93             | first_number . MOD negative
   94             | first_number . INTDIV negative

    DIV     偏移，并进入状态 171
    MUL     偏移，并进入状态 172
    MOD     偏移，并进入状态 173
    INTDIV  偏移，并进入状态 174

    $default  使用规则 88 以归约 (second_number)


状态 281

   89 second_number: second_number SUB first_number .
   91 first_number: first_number . MUL negative
   92             | first_number . DIV negative
   93             | first_number . MOD negative
   94             | first_number . INTDIV negative

    DIV     偏移，并进入状态 171
    MUL     偏移，并进入状态 172
    MOD     偏移，并进入状态 173
    INTDIV  偏移，并进入状态 174

    $default  使用规则 89 以归约 (second_number)


状态 282

   92 first_number: first_number DIV negative .

    $default  使用规则 92 以归约 (first_number)


状态 283

   91 first_number: first_number MUL negative .

    $default  使用规则 91 以归约 (first_number)


状态 284

   93 first_number: first_number MOD negative .

    $default  使用规则 93 以归约 (first_number)


状态 285

   94 first_number: first_number INTDIV negative .

    $default  使用规则 94 以归约 (first_number)


状态 286

  100 zero_number: zero_number POW attribute .
  104 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 178

    $default  使用规则 100 以归约 (zero_number)


状态 287

  101 zero_number: zero_number LOG attribute .
  104 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 178

    $default  使用规则 101 以归约 (zero_number)


状态 288

  102 zero_number: zero_number SQRT attribute .
  104 attribute: attribute . POINT call_down

    POINT  偏移，并进入状态 178

    $default  使用规则 102 以归约 (zero_number)


状态 289

  104 attribute: attribute POINT call_down .

    $default  使用规则 104 以归约 (attribute)


状态 290

   56 slice_arguments_token: top_exp . COLON
  106 call_down: call_slice LI top_exp . RI

    RI     偏移，并进入状态 328
    COLON  偏移，并进入状态 329


状态 291

   54 slice_arguments: slice_arguments . slice_arguments_token
   55                | slice_arguments . top_exp
  108 call_slice: call_slice LI slice_arguments . RI

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    RI          偏移，并进入状态 330
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp                转到状态 331
    eq_number              转到状态 45
    slice_arguments_token  转到状态 332
    call_number            转到状态 46
    lambda_exp             转到状态 47
    chose_exp              转到状态 48
    bool_or                转到状态 49
    bool_and               转到状态 50
    bool_not               转到状态 51
    third_number           转到状态 52
    bit_or_not             转到状态 53
    bit_or                 转到状态 54
    bit_and                转到状态 55
    bit_move               转到状态 56
    second_number          转到状态 57
    first_number           转到状态 58
    negative               转到状态 59
    bit_not                转到状态 60
    zero_number            转到状态 61
    attribute              转到状态 62
    call_down              转到状态 63
    call_slice             转到状态 64
    iter_value             转到状态 65
    element                转到状态 66
    base_value             转到状态 67
    base_var_              转到状态 68
    base_var_token         转到状态 69
    base_string            转到状态 70


状态 292

   53 slice_arguments: slice_arguments_token .

    $default  使用规则 53 以归约 (slice_arguments)


状态 293

  135 return_exp: return_token top_exp element .

    $default  使用规则 135 以归约 (return_exp)


状态 294

  157 elif_exp: ELIF LB . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 333
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 295

  156 if_block: if_block elif_exp block .

    $default  使用规则 156 以归约 (if_block)


状态 296

  178 try_exp: try_token block EXCEPT . AS element

    AS  偏移，并进入状态 334


状态 297

   61 lambda_exp: LB RB LAMBDA chose_exp .
   64 chose_exp: chose_exp . IF chose_exp ELSE chose_exp

    IF  偏移，并进入状态 155

    $default  使用规则 61 以归约 (lambda_exp)


状态 298

   44 formal_parameter: top_exp EQ top_exp .

    $default  使用规则 44 以归约 (formal_parameter)


状态 299

   62 lambda_exp: LB formal_parameter RB LAMBDA . chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    chose_exp       转到状态 335
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 300

   46 formal_parameter: formal_parameter COMMA MUL . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 336
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 301

   45 formal_parameter: formal_parameter COMMA top_exp .
   47                 | formal_parameter COMMA top_exp . EQ top_exp

    EQ  偏移，并进入状态 337

    $default  使用规则 45 以归约 (formal_parameter)


状态 302

  115 dict_arguments: dict_arguments COMMA element . EQ element

    EQ  偏移，并进入状态 338


状态 303

  114 dict_arguments: element EQ element .

    $default  使用规则 114 以归约 (dict_arguments)


状态 304

  183 while_exp: WHILE LB top_exp RB .

    $default  使用规则 183 以归约 (while_exp)


状态 305

  159 if_exp: IF LB top_exp RB .

    $default  使用规则 159 以归约 (if_exp)


状态 306

  126 base_var_: LI top_exp RI base_var_token .

    $default  使用规则 126 以归约 (base_var_)


状态 307

  113 list_arguments: list_arguments COMMA top_exp .

    $default  使用规则 113 以归约 (list_arguments)


状态 308

  163 for_exp: FOR LB COMMA COMMA . RB
  166        | FOR LB COMMA COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 339
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 340
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 309

  165 for_exp: FOR LB COMMA top_exp . COMMA RB
  169        | FOR LB COMMA top_exp . COMMA top_exp RB

    COMMA  偏移，并进入状态 341


状态 310

  164 for_exp: FOR LB top_exp COMMA . COMMA RB
  167        | FOR LB top_exp COMMA . COMMA top_exp RB
  168        | FOR LB top_exp COMMA . top_exp COMMA RB
  170        | FOR LB top_exp COMMA . top_exp COMMA top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    COMMA       偏移，并进入状态 342
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 343
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 311

  171 for_exp: FOR LB element IN . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 344
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 312

  188 def_exp: DEF element LB RB .

    $default  使用规则 188 以归约 (def_exp)


状态 313

   42 formal_parameter: top_exp .
   44                 | top_exp . EQ top_exp

    EQ  偏移，并进入状态 223

    $default  使用规则 42 以归约 (formal_parameter)


状态 314

   45 formal_parameter: formal_parameter . COMMA top_exp
   46                 | formal_parameter . COMMA MUL top_exp
   47                 | formal_parameter . COMMA top_exp EQ top_exp
  189 def_exp: DEF element LB formal_parameter . RB

    RB     偏移，并进入状态 345
    COMMA  偏移，并进入状态 226


状态 315

  185 class_exp: CLASS element LB RB .

    $default  使用规则 185 以归约 (class_exp)


状态 316

   49 arguments: arguments . COMMA top_exp
   51          | arguments . COMMA base_var_ EQ top_exp
  186 class_exp: CLASS element LB arguments . RB

    RB     偏移，并进入状态 346
    COMMA  偏移，并进入状态 325


状态 317

  173 import_exp: IMPORT top_exp AS element .

    $default  使用规则 173 以归约 (import_exp)


状态 318

  109 iter_value: element .
  114 dict_arguments: element . EQ element

    EQ  偏移，并进入状态 230

    EQ        [使用规则 109 以归约 (iter_value)]
    $default  使用规则 109 以归约 (iter_value)


状态 319

  192 block: LP PASS RP .

    $default  使用规则 192 以归约 (block)


状态 320

  190 block: LP command_list RP .

    $default  使用规则 190 以归约 (block)


状态 321

  191 block: LP block RP .

    $default  使用规则 191 以归约 (block)


状态 322

  181 do_while_block: DO block stop_token while_exp .

    $default  使用规则 181 以归约 (do_while_block)


状态 323

   52 arguments: MUL top_exp .

    $default  使用规则 52 以归约 (arguments)


状态 324

   59 call_number: call_number LB arguments RB .

    $default  使用规则 59 以归约 (call_number)


状态 325

   49 arguments: arguments COMMA . top_exp
   51          | arguments COMMA . base_var_ EQ top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 347
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 348
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 326

   50 arguments: base_var_ EQ . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 349
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 327

   64 chose_exp: chose_exp IF chose_exp ELSE . chose_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 107
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    BITNOT      偏移，并进入状态 38

    chose_exp       转到状态 350
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 328

  106 call_down: call_slice LI top_exp RI .

    $default  使用规则 106 以归约 (call_down)


状态 329

   56 slice_arguments_token: top_exp COLON .

    $default  使用规则 56 以归约 (slice_arguments_token)


状态 330

  108 call_slice: call_slice LI slice_arguments RI .

    $default  使用规则 108 以归约 (call_slice)


状态 331

   55 slice_arguments: slice_arguments top_exp .
   56 slice_arguments_token: top_exp . COLON

    COLON  偏移，并进入状态 329

    $default  使用规则 55 以归约 (slice_arguments)


状态 332

   54 slice_arguments: slice_arguments slice_arguments_token .

    $default  使用规则 54 以归约 (slice_arguments)


状态 333

  157 elif_exp: ELIF LB top_exp . RB

    RB  偏移，并进入状态 351


状态 334

  178 try_exp: try_token block EXCEPT AS . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 352
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 335

   62 lambda_exp: LB formal_parameter RB LAMBDA chose_exp .
   64 chose_exp: chose_exp . IF chose_exp ELSE chose_exp

    IF  偏移，并进入状态 155

    $default  使用规则 62 以归约 (lambda_exp)


状态 336

   46 formal_parameter: formal_parameter COMMA MUL top_exp .

    $default  使用规则 46 以归约 (formal_parameter)


状态 337

   47 formal_parameter: formal_parameter COMMA top_exp EQ . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 353
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 338

  115 dict_arguments: dict_arguments COMMA element EQ . element

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    LB          偏移，并进入状态 107
    LI          偏移，并进入状态 113
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26

    element         转到状态 354
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 339

  163 for_exp: FOR LB COMMA COMMA RB .

    $default  使用规则 163 以归约 (for_exp)


状态 340

  166 for_exp: FOR LB COMMA COMMA top_exp . RB

    RB  偏移，并进入状态 355


状态 341

  165 for_exp: FOR LB COMMA top_exp COMMA . RB
  169        | FOR LB COMMA top_exp COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 356
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 357
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 342

  164 for_exp: FOR LB top_exp COMMA COMMA . RB
  167        | FOR LB top_exp COMMA COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 358
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 359
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 343

  168 for_exp: FOR LB top_exp COMMA top_exp . COMMA RB
  170        | FOR LB top_exp COMMA top_exp . COMMA top_exp RB

    COMMA  偏移，并进入状态 360


状态 344

  171 for_exp: FOR LB element IN top_exp . RB

    RB  偏移，并进入状态 361


状态 345

  189 def_exp: DEF element LB formal_parameter RB .

    $default  使用规则 189 以归约 (def_exp)


状态 346

  186 class_exp: CLASS element LB arguments RB .

    $default  使用规则 186 以归约 (class_exp)


状态 347

   49 arguments: arguments COMMA top_exp .

    $default  使用规则 49 以归约 (arguments)


状态 348

   51 arguments: arguments COMMA base_var_ . EQ top_exp
  117 element: base_var_ .

    EQ  偏移，并进入状态 362

    EQ        [使用规则 117 以归约 (element)]
    $default  使用规则 117 以归约 (element)


状态 349

   50 arguments: base_var_ EQ top_exp .

    $default  使用规则 50 以归约 (arguments)


状态 350

   64 chose_exp: chose_exp . IF chose_exp ELSE chose_exp
   64          | chose_exp IF chose_exp ELSE chose_exp .

    IF  偏移，并进入状态 155

    IF        [使用规则 64 以归约 (chose_exp)]
    $default  使用规则 64 以归约 (chose_exp)


状态 351

  157 elif_exp: ELIF LB top_exp RB .

    $default  使用规则 157 以归约 (elif_exp)


状态 352

  178 try_exp: try_token block EXCEPT AS element .

    $default  使用规则 178 以归约 (try_exp)


状态 353

   47 formal_parameter: formal_parameter COMMA top_exp EQ top_exp .

    $default  使用规则 47 以归约 (formal_parameter)


状态 354

  115 dict_arguments: dict_arguments COMMA element EQ element .

    $default  使用规则 115 以归约 (dict_arguments)


状态 355

  166 for_exp: FOR LB COMMA COMMA top_exp RB .

    $default  使用规则 166 以归约 (for_exp)


状态 356

  165 for_exp: FOR LB COMMA top_exp COMMA RB .

    $default  使用规则 165 以归约 (for_exp)


状态 357

  169 for_exp: FOR LB COMMA top_exp COMMA top_exp . RB

    RB  偏移，并进入状态 363


状态 358

  164 for_exp: FOR LB top_exp COMMA COMMA RB .

    $default  使用规则 164 以归约 (for_exp)


状态 359

  167 for_exp: FOR LB top_exp COMMA COMMA top_exp . RB

    RB  偏移，并进入状态 364


状态 360

  168 for_exp: FOR LB top_exp COMMA top_exp COMMA . RB
  170        | FOR LB top_exp COMMA top_exp COMMA . top_exp RB

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    RB          偏移，并进入状态 365
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 366
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 361

  171 for_exp: FOR LB element IN top_exp RB .

    $default  使用规则 171 以归约 (for_exp)


状态 362

   51 arguments: arguments COMMA base_var_ EQ . top_exp

    NUMBER      偏移，并进入状态 1
    INT         偏移，并进入状态 2
    STRING      偏移，并进入状态 3
    VAR         偏移，并进入状态 4
    SUB         偏移，并进入状态 5
    LB          偏移，并进入状态 6
    LP          偏移，并进入状态 7
    LI          偏移，并进入状态 18
    FALSE       偏移，并进入状态 24
    TRUE        偏移，并进入状态 25
    NULL_token  偏移，并进入状态 26
    NOT         偏移，并进入状态 35
    FADD        偏移，并进入状态 36
    FSUB        偏移，并进入状态 37
    BITNOT      偏移，并进入状态 38

    top_exp         转到状态 367
    eq_number       转到状态 45
    call_number     转到状态 46
    lambda_exp      转到状态 47
    chose_exp       转到状态 48
    bool_or         转到状态 49
    bool_and        转到状态 50
    bool_not        转到状态 51
    third_number    转到状态 52
    bit_or_not      转到状态 53
    bit_or          转到状态 54
    bit_and         转到状态 55
    bit_move        转到状态 56
    second_number   转到状态 57
    first_number    转到状态 58
    negative        转到状态 59
    bit_not         转到状态 60
    zero_number     转到状态 61
    attribute       转到状态 62
    call_down       转到状态 63
    call_slice      转到状态 64
    iter_value      转到状态 65
    element         转到状态 66
    base_value      转到状态 67
    base_var_       转到状态 68
    base_var_token  转到状态 69
    base_string     转到状态 70


状态 363

  169 for_exp: FOR LB COMMA top_exp COMMA top_exp RB .

    $default  使用规则 169 以归约 (for_exp)


状态 364

  167 for_exp: FOR LB top_exp COMMA COMMA top_exp RB .

    $default  使用规则 167 以归约 (for_exp)


状态 365

  168 for_exp: FOR LB top_exp COMMA top_exp COMMA RB .

    $default  使用规则 168 以归约 (for_exp)


状态 366

  170 for_exp: FOR LB top_exp COMMA top_exp COMMA top_exp . RB

    RB  偏移，并进入状态 368


状态 367

   51 arguments: arguments COMMA base_var_ EQ top_exp .

    $default  使用规则 51 以归约 (arguments)


状态 368

  170 for_exp: FOR LB top_exp COMMA top_exp COMMA top_exp RB .

    $default  使用规则 170 以归约 (for_exp)
